from django.conf import settings
from django.core.mail import send_mail
from django.shortcuts import render, redirect
from datetime import datetime, date, timedelta
from .models import *
from django.contrib.auth.models import auth, User
from django.contrib import messages
from django.db.models import Sum, Q
from django.db.models.functions import Coalesce
import json
from django.http.response import JsonResponse
from django.contrib.auth.decorators import login_required
import itertools


def index(request):
    return render(request, 'app1/index.html')


def something(request):
    cmp1 = company.objects.get(id=request.session["uid"])
    return render(request, 'app1/something.html', {'cmp1': cmp1})


def go(request):
    return render(request, 'app1/login.html')


def create(request):
    try:
        if request.method == 'POST':
            firstname = request.POST['first_name']
            lastname = request.POST['last_name']
            email = request.POST['email']
            username = request.POST['username']
            password = request.POST['password']
            conformpassword = request.POST['conformpassword']
            if password == conformpassword:
                if User.objects.filter(username=username).exists():
                    messages.info(
                        request, 'This username already exists. Sign up again')
                    return render(request, 'app1/login.html')
                else:
                    user = User.objects.create_user(first_name=firstname, last_name=lastname, email=email,
                                                    username=username, password=password)
                    user.save()
                    return render(request, 'app1/company.html', {'member': user})
            else:
                return redirect('')
        else:
            return redirect('')
    except:
        return redirect('')


def register(request, id):
    try:
        if request.method == 'POST':
            cname = request.POST.get('cname')
            caddress = request.POST.get('caddress')
            city = request.POST.get('city')
            state = request.POST.get('state')
            pincode = request.POST.get('pincode')
            cemail = request.POST.get('cemail')
            phone = request.POST.get('phone')
            try:
                img1 = request.FILES['img1']
            except:
                img1 = 'default'
            bname = request.POST.get('bname')
            industry = request.POST.get('industry')
            ctype = request.POST.get('ctype')
            abt = request.POST.get('abt')
            paid = request.POST.get('paid')
            new_id = User.objects.get(id=id)
            companys = company(id=new_id, cname=cname, caddress=caddress, city=city, state=state, pincode=pincode,
                               cemail=cemail,
                               phone=phone, bname=bname, industry=industry, ctype=ctype, abt=abt, paid=paid)
            if img1 != 'default':
                companys.cimg = img1
            companys.save()
            toda = date.today()
            tod = toda.strftime("%Y-%m-%d")
            comp = company.objects.get(id=new_id)
            accountsecond = [
                ['Account Receivable(Debtors)', 'Account Receivable(Debtors)',
                 'Account Receivable(Debtors)'],
                ['Current Assets', 'Deferred Service Tax Input Credit', 'Deferred CGST'],
                ['Current Assets', 'Deferred Service Tax Input Credit',
                    'Deferred GST Input Credit'],
                ['Current Assets', 'Deferred Service Tax Input Credit', 'Deferred IGST'],
                ['Current Assets', 'Deferred Service Tax Input Credit',
                    'Deferred Krishi Kalyan Cess Input Credit'],
                ['Current Assets', 'Prepaid Expenses', 'Prepaid Expenses'],
                ['Current Assets', 'Deferred Service Tax Input Credit',
                    'Deferred Service Tax Input Credit'],
                ['Current Assets', 'Deferred Service Tax Input Credit', 'Deferred SGST'],
                ['Current Assets', 'Deferred Service Tax Input Credit',
                    'Deferred VAT Input Credit'],
                ['Current Assets', 'Service Tax Refund', 'GST Refund'],
                ['Current Assets', 'Inventory', 'Inventory Asset'],
                ['Current Assets', 'Service Tax Refund',
                    'Krishi Kalyan Cess Refund'],
                ['Current Assets', 'Prepaid Expenses', 'Prepaid Insurance'],
                ['Current Assets', 'Service Tax Refund', 'Service Tax Refund'],
                ['Current Assets', 'Other Current Assets', 'TDS Receivable'],
                ['Current Assets', 'Other Current Assets', 'Uncategorised Asset'],
                ['Current Assets', 'Undeposited Fund', 'Undeposited Fund'],
                ['Fixed Assets', 'Accumulated Depreciation',
                    'Accumulated Depreciation'],
                ['Fixed Assets', 'Buildings', 'Buildings and Improvements'],
                ['Fixed Assets', 'Furniture and fixtures', 'Furniture and Equipment'], [
                    'Fixed Assets', 'Land', 'Land'],
                ['Fixed Assets', 'Leasehold Improvements', 'Leasehold Improvements'],
                ['Fixed Assets', 'Vehicles', 'Vehicles'],
                ['Accounts Payable(Creditors)', 'Accounts Payable(Creditors)',
                 'Accounts Payable(Creditors)'],
                ['Current Liabilities', 'Sales and Service Tax Payable', 'CGST Payable'],
                ['Current Liabilities', 'Sales and Service Tax Payable', 'CST Payable'],
                ['Current Liabilities', 'Tax Suspense', 'CST Suspense'],
                ['Current Liabilities', 'Sales And Service Tax Payable', 'GST Payable'],
                ['Current Liabilities', 'Tax Suspense', 'GST Suspense'],
                ['Current Liabilities', 'Sales and Service Tax Payable', 'IGST Payable'],
                ['Current Liabilities', 'Sales and Service Tax Payable', 'Input CGST'],
                ['Current Liabilities', 'Sales and Service Tax Payable',
                    'Input CGST Tax RCM'],
                ['Current Liabilities', 'Sales and Service Tax Payable', 'Input IGST'],
                ['Current Liabilities', 'Sales and Service Tax Payable',
                    'Input IGST Tax RCM'],
                ['Current Liabilities', 'Sales and Service Tax Payable',
                    'Input Krishi Kalyan Cess'],
                ['Current Liabilities', 'Sales and Service Tax Payable',
                    'Input Krishi Kalyan Cess RCM'],
                ['Current Liabilities', 'Sales and Service Tax Payable',
                    'Input Service Tax'],
                ['Current Liabilities', 'Sales and Service Tax Payable',
                    'Input Service Tax RCM'],
                ['Current Liabilities', 'Sales and Service Tax Payable', 'Input SGST'],
                ['Current Liabilities', 'Sales asnd Service Tax Payable',
                    'Input SGST Tax RCM'],
                ['Current Liabilities', 'Sales and Service Tax Payable', 'Input VAT 14%'],
                ['Current Liabilities', 'Sales and Service Tax Payable', 'Input VAT 4%'],
                ['Current Liabilities', 'Sales and Service Tax Payable', 'Input VAT 5%'],
                ['Current Liabilities', 'Sales and Service Tax Payable',
                    'Krishi Kalyan Cess Payable'],
                ['Current Liabilities', 'Tax Suspense',
                    'Krishi Kalyan Cess Suspense'],
                ['Current Liabilities', 'Sales and Service Tax Payable', 'Output CGST'],
                ['Current Liabilities', 'Sales and Service Tax Payable',
                    'Output CGST Tax RCM'],
                ['Current Liabilities', 'Sales and Service Tax Payable', 'Output CST 2%'],
                ['Current Liabilities', 'Sales and Service Tax Payable', 'Output IGST'],
                ['Current Liabilities', 'Sales and Service Tax Payable',
                    'Output IGST Tax RCM'],
                ['Current Liabilties', 'Sales and Service Tax Payable',
                    'Output Krishi Kaylan Cess'],
                ['Current Liabilities', 'Sales and Service Tax Payable',
                    'Output Krishi Kalyan Cess RCM'],
                ['Current Liabilties', 'Sales and Service Tax Payable',
                    'Output Service Tax'],
                ['Current Liabilities', 'Sales and Service Tax Payable',
                    'Output Service Tax RCM'],
                ['Current Liabilities', 'Sales and Service Tax Payable', 'Output SGST'],
                ['Current Liabilities', 'Sales and Service Tax Payable',
                    'Output SGST Tax RCM'],
                ['Current Liabilities', 'Sales and Service Tax Payable', 'Output VAT 14%'],
                ['Current Liabilities', 'Sales and Service Tax Payable', 'Output VAT 4%'],
                ['Current Liabilities', 'Sales and Service Tax Payable', 'Output VAT 5%'],
                ['Current Liabilties', 'Sales and Service Tax Payable',
                    'Service Tax Payable'],
                ['Current Liabilities', 'Tax Suspense', 'Service Tax Suspense'],
                ['Current Liabilities', 'Sales and Service Tax Payable', 'SGST Payable'],
                ['Current Liabilities', 'Sales and Service Tax Payable',
                    'Swachh Barath Cess Payable'],
                ['Current Liabilities', 'Tax Suspense',
                    'Swachh Barath Cess Suspense'],
                ['Current Liabilities', 'Current Liabilities', 'TDS Payable'],
                ['Current Liabilities', 'Sales and Service Tax Payable', 'VAT Payable'],
                ['Current Liabilities', 'Tax Suspense', 'VAT Suspense'],
                ['Equity', 'Opening Balance Equity', 'Opening Balance Equity'],
                ['Equity', 'Retained Earnings', 'Retained Earnings'],
                ['Income', 'Service/Fee Income', 'Billable Expense Income'],
                ['Income', 'Service/Fee Income', 'Consulting Income'],
                ['Income', 'Sales of Product Income', 'Product Sales'], [
                    'Income', 'Sales of Product Income', 'Sales'],
                ['Income', 'Sales of Product Income', 'Sales-Hardware'],
                ['Income', 'Sales of Product Income', 'Sales-Software'],
                ['Income', 'Sales of Product Income',
                    'Sales-Support and Maintanance'],
                ['Income', 'Discount/Refund Given', 'Sales Discounts'],
                ['Income', 'Sales of Product Income', 'Sales of Product Income'],
                ['Income', 'Service/Fee Income', 'Services'],
                ['Income', 'Unapplied Cash Payment Income',
                    'Unapplied Cash Payment Income'],
                ['Income', 'Service/Fee Income', 'Uncategorised Income'],
                ['Cost of Goods Sold', 'Suppliers and Materials-COS', 'Cost of Sales'],
                ['Cost of Goods Sold', 'Cost of Goods Sold',
                    'Equipment Rental for Jobs'],
                ['Cost of Goods Sold', 'Cost of Goods Sold',
                    'Freight and Shipping Cost'],
                ['Cost of Goods Sold', 'Suppliers and Materials-COS',
                    'Inventory Shrinkage'],
                ['Cost of Goods Sold', 'Cost of Goods Sold', 'Merchant Account Fees'],
                ['Cost of Goods Sold', 'Cost of Goods Sold',
                    'Purchases-Hardware for Resale'],
                ['Cost of Goods Sold', 'Cost of Goods Sold',
                    'Purchases-Software for Resale'],
                ['Cost of Goods Sold', 'Cost of Goods Sold',
                    'Subcontracted Services'],
                ['Cost of Goods Sold', 'Cost of Goods Sold',
                    'Tools and Craft Suppliers'],
                ['Expenses', 'Advertising/Promotional', 'Advertising/Promotional'],
                ['Expenses', 'Bank Charges', 'Bank Charges'],
                ['Expenses', 'Office/General Administrative Expenses',
                    'Business Licenses and Permitts'],
                ['Expenses', 'Charitable Contributions', 'Charitable Contributions'],
                ['Expenses', 'Office/General Administrative Expenses',
                    'Computer and Internet Expense'],
                ['Expenses', 'Office/General Administrative Expenses',
                    'Continuing Education'],
                ['Expenses', 'Office/General Administrative Expenses',
                    'Depreciation Expense'],
                ['Expenses', 'Dues and Subscriptions', 'Dues and Subscriptions'],
                ['Expenses', 'Office/General Administrative Expenses',
                    'Housekeeping Charges'],
                ['Expenses', 'Office/General Administrative Expenses',
                    'Insurance Expenses'],
                ['Expenses', 'Office/General Administrative Expenses',
                 'Insurance Expenses-General Liability Insurance'],
                ['Expenses', 'Office/General Administrative Expenses',
                    'Insurance Expenses-Health Insurance'],
                ['Expenses', 'Office/General Administrative Expenses',
                 'Insurance Expenses-Life and Disability Insurance'],
                ['Expenses', 'Office/General Administrative Expenses',
                    'Insurance Expenses-Professional Liability'],
                ['Expenses', 'Interest Paid', 'Interest Expenses'],
                ['Expenses', 'Meals and Entertainment', 'Meals and Entertainment'],
                ['Expenses', 'Office/General Administrative Expenses', 'Office Supplies'],
                ['Expenses', 'Office/General Administrative Expenses',
                    'Postage and Delivery'],
                ['Expenses', 'Office/General Administrative Expenses',
                    'Printing and Reproduction'],
                ['Expenses', 'Office/General Administrative Expenses',
                    'Professional Fees'],
                ['Expenses', 'Suppliers and Materials', 'Purchases'],
                ['Expenses', 'Office/General Administrative Expenses', 'Rent Expense'],
                ['Expenses', 'Office/General Administrative Expenses',
                    'Repair and Maintanance'],
                ['Expenses', 'Office/General Administrative Expenses',
                    'Small Tools and Equipments'],
                ['Expenses', 'Tax Expense', 'Swachh Barath Cess Expense'],
                ['Expense', 'Office/General Administrative Expenses', 'Taxes-Property'],
                ['Expenses', 'Office/General Administrative Expenses',
                    'Telephone Expense'],
                ['Expenses', 'Office/General Administrative Expenses', 'Travel Expense'],
                ['Expenses', 'Other Miscellaneous Service Cost',
                    'Uncategorised Expense'],
                ['Expenses', 'Utilities', 'Utilities'],
                ['Other Income', 'Other Miscellaneous Income',
                    'Finance Charge Income'],
                ['Other Income', 'Other Miscellaneous Income',
                    'Insurance Proceeds Received'],
                ['Other Income', 'Interest Earned', 'Interest Income'],
                ['Other Income', 'Other Miscellaneous Income',
                    'Proceeds From Sale of Assets'],
                ['Other Income', 'Other Miscellaneous Income',
                    'Shipping and Delivery Income'],
                ['Other Expenses', 'Other Expenses', 'Ask My Accountant'],
                ['Other Expenses', 'Other Expenses', 'CGST Write-Off'],
                ['Other Expense', 'Other Expense', 'GST Write-Off'],
                ['Other Expenses', 'Other Expenses', 'IGST Write-Off'],
                ['Other Expenses', 'Other Expenses', 'Miscellaneous Expense'],
                ['Other Expenses', 'Other Expenses', 'Political Contributions'],
                ['Other Expenses', 'Other Expenses',
                    'Reconciliation Discrepancies'],
                ['Other Expenses', 'Other Expenses', 'SGST Write-Off'],
                ['Other Expenses', 'Other Expenses', 'Tax Write-Off'],
                ['Other Expenses', 'Other Expenses', 'Vehicle Expenses']]

            accounype = [['Deferred CGST'], ['Deferred GST Input Credit'], ['Deferred IGST'],
                         ['Deferred Krishi Kalyan Cess Input Credit'],
                         ['Deferred Service Tax Input Credit'], [
                             'Deferred SGST'], ['Deferred VAT Input Credit'],
                         ['GST Refund'],
                         ['Inventory Asset'], ['Paid Insurance'], [
                             'Service Tax Refund'], ['TDS Receivable'],
                         ['Uncategorised Asset'],
                         ['Accumulated Depreciation'], ['Buildings and Improvements'], [
                             'Furniture and Equipments'],
                         ['Land'],
                         ['Leasehold Improvements'], ['Vehicles'], [
                             'CGST Payable'], ['CST Payable'], ['CST Suspense'],
                         ['GST Payable'],
                         ['GST Suspense'], ['IGST Payable'], ['Input CGST'], [
                             'Input CGST Tax RCM'], ['Input IGST'],
                         ['Input IGST Tax RCM'],
                         ['Input Krishi Kalyan Cess'], [
                             'Input Krishi Kalyan Cess RCM'], ['Input Service Tax'],
                         ['Input Service Tax RCM'],
                         ['Input SGST'], ['Input SGST Tax RCM'], [
                             'Input VAT 14 %'], ['Input VAT 4%'], ['Input VAT 5%'],
                         ['Krishi Kalyan Cess Payable'], [
                             'Krishi Kalyan Cess Suspense'], ['Output CGST'],
                         ['Output CGST Tax RCM'],
                         ['Output CST 2%'], ['Output IGST'], [
                             'Output IGST Tax RCM'], ['Output Krishi Kalyan Cess'],
                         ['Output Krishi Kalyan Cess RCM'], [
                             'Output Service Tax'], ['Output Service Tax RCM'],
                         ['Output SGST'],
                         ['Output SGST Tax RCM'], ['Output VAT 14%'], [
                             'Output VAT 4%'], ['Output VAT 5%'],
                         ['Service Tax Payable'],
                         ['Service Tax Suspense'], ['SGST Payable'], [
                             'SGST Suspense'], ['Swachh Barath Cess Payable'],
                         ['Swachh Barath Cess Suspense'], ['TDS Payable'], ['VAT Payable'], ['VAT Suspense']]
            for i in range(len(accountsecond)):
                for j in range(1):
                    accounts1model = accounts1(cid=comp, acctype=accountsecond[i][0],
                                               detype=accountsecond[i][1], name=accountsecond[i][2], description='',
                                               gst='', deftaxcode='', balance=0.0,
                                               asof=tod)
                    accounts1model.save()
            for i in range(len(accounype)):
                for j in range(1):
                    accoutype = accountype(
                        cid=comp, accountname=accounype[i][0])
                    accoutype.save()
            newstyl = customize(name='Default', template='classic', pcolour='#87CEFA', scolour='#87CEFA', fonts='serif', selected='selected', cid=cmp1)
            newstyl.save()
            return redirect('regcomp')
        else:
            return redirect('regcomp')
    except:
        return redirect('regcomp')


def login(request):
    try:
        if request.method == 'POST':
            try:
                username = request.POST['username']
                password = request.POST['password']
                user = auth.authenticate(username=username, password=password)
                cmp1 = company.objects.get(id=user.id)
                request.session["uid"] = user.id
                if user is not None:
                    auth.login(request, user)
                    return redirect('/app1/godash')
                else:
                    messages.info(request, 'Invalid username or password')
                    return redirect('regcomp')
            except:
                messages.info(request, 'Invalid username or password')
                return render(request, 'app1/login.html')
        else:
            messages.info(request, 'Invalid username or password')
            return render(request, 'app1/login.html')
    except:
        messages.info(request, 'Invalid username or password')
        return render(request, 'app1/login.html')

@login_required(login_url='regcomp')
def godash(request):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
    except:
        return redirect('/')

    try:

        cmp1 = company.objects.get(id=request.session['uid'])
        request.session["invcol"] = " "
        request.session["noninvcol"] = " "
        request.session["buncol"] = " "

        label_1 = []
        data_1 = []
        label_2=[]
        data_2=[]
        label_3 = []
        data_3 = []
        exp = 0.0
        inc = 0.0
        up=0.0
        p=0.0
        s=0.0
        balance=accounts1.objects.order_by('balance')
        for bal in balance:
                if (bal.cid==cmp1 and bal.balance!=0 and bal.acctype=='Expenses'):
                    label_1.append(bal.name)
                    data_1.append(bal.balance)
                    exp+=bal.balance
                if (bal.cid==cmp1 and bal.balance!=0 and bal.acctype=='Other Expenses'):
                    label_1.append(bal.name)
                    data_1.append(bal.balance)
                    exp+=bal.balance
                if (bal.cid==cmp1 and bal.balance!=0 and bal.acctype=='Cost of Goods Sold'):
                    label_1.append(bal.name)
                    data_1.append(bal.balance)
                    exp+=bal.balance

                if (bal.cid==cmp1 and bal.balance!=0 and bal.acctype=='Income'):
                    label_2.append(bal.name)
                    data_2.append(bal.balance)
                    inc+=bal.balance
                if (bal.cid==cmp1 and bal.balance!=0 and bal.acctype=='Other Income'):
                    label_2.append(bal.name)
                    data_2.append(bal.balance)
                    inc+=bal.balance

        balance1 = accounts.objects.order_by('balance')
        for bal in balance1:
            if (bal.cid == cmp1 and bal.balance != 0 and bal.acctype == 'Expenses'):
                label_1.append(bal.name)
                data_1.append(bal.balance)
                exp+= bal.balance
            if (bal.cid == cmp1 and bal.balance != 0 and bal.acctype == 'Other Expenses'):
                label_1.append(bal.name)
                data_1.append(bal.balance)
                exp+= bal.balance
            if (bal.cid == cmp1 and bal.balance != 0 and bal.acctype == 'Cost of Goods Sold'):
                label_1.append(bal.name)
                data_1.append(bal.balance)
                exp+= bal.balance

            if (bal.cid == cmp1 and bal.balance != 0 and bal.acctype == 'Income'):
                label_2.append(bal.name)
                data_2.append(bal.balance)
                inc += bal.balance
            if (bal.cid == cmp1 and bal.balance != 0 and bal.acctype == 'Other Income'):
                label_2.append(bal.name)
                data_2.append(bal.balance)
                inc += bal.balance



        invoice1 = invoice.objects.order_by('baldue')
        for inv in invoice1:
            if (inv.cid == cmp1 and inv.baldue != 0):
                up += float(inv.baldue)

        invoice2 = invoice.objects.order_by('grandtotal')
        for inv in invoice2:

            if(inv.cid == cmp1 and inv.baldue != 0):
                label_3.append(inv.invoicedate)
                data_3.append(inv.grandtotal)
                s+=float(inv.grandtotal)

        payment1 = payment.objects.order_by('amtreceived')
        for pay in payment1:
            if (pay.cid == cmp1 and pay.amtreceived != 0):
                p += float(pay.amtreceived)


        context = {'cmp1': cmp1,'label_1':label_1,'data_1':data_1,'label_2':label_2,'data_2':data_2,'label_3':label_3,'data_3':data_3,'balance':balance,'balance1':balance1,'exp':exp,'inc':inc,'invoice1':invoice1,'invoice2':invoice2,'up':up,'p':p,'s':s}
        return render(request, 'app1/dashbord.html', context)
    except:
        return redirect('/')



def logout(request):
    request.session["uid"] = ""
    auth.logout(request)
    return redirect('/')


@login_required(login_url='regcomp')
def userprofile(request, id):
    try:
        user1 = User.objects.get(id=id)
        cmp1 = company.objects.get(id=request.session["uid"])
        return render(request, 'app1/userprofile.html', {'users': user1, 'cmp1': cmp1})
    except:
        return redirect('godash')


@login_required(login_url='regcomp')
def edituserprofile(request):
    try:
        user1 = User.objects.get(id=request.session["uid"])
        cmp1 = company.objects.get(id=request.session["uid"])
        context = {'users': user1, 'cmp1': cmp1}
        return render(request, 'app1/edituserprofile.html', context)
    except:
        return redirect('godash')


@login_required(login_url='regcomp')
def updateuserprofile(request):
    try:
        user = User.objects.get(id=request.session["uid"])
        comp = company.objects.get(id=user.id)

        user.first_name = request.POST["first_name"]
        user.last_name = request.POST["last_name"]
        user.email = request.POST["email"]
        p1 = request.POST["newpassword"]
        p2 = request.POST["newpassword1"]

        comp.cname = request.POST["cname"]
        comp.caddress = request.POST["caddress"]
        comp.city = request.POST["city"]
        comp.state = request.POST["state"]
        comp.pincode = request.POST["pincode"]
        comp.cemail = request.POST["cemail"]
        comp.phone = request.POST["phone"]
        comp.bname = request.POST["bname"]
        comp.industry = request.POST["industry"]
        comp.ctype = request.POST["ctype"]
        try:
            img1 = request.FILES["img1"]
            comp.cimg = img1
        except:
            img2 = request.POST["img2"]
            comp.cimg = img2

        comp.save()
        user.save()

        if p1 == p2:
            if p1 != "":
                user.set_password(p1)
                user.save()
                logout(request)
                return redirect('/app1/go')
        elif p1 == "":
            return redirect('/app1/godash')

        return redirect('/app1/godash')
    except:
        return redirect('godash')


@login_required(login_url='regcomp')
def goonlinebank(request):
    return render(request, 'app1/onlinebank.html')


@login_required(login_url='regcomp')
def goofflinebank(request):
    cmp1 = company.objects.get(id=request.session['uid'])
    return render(request, 'app1/offlinebank.html', {'cmp1': cmp1})


@login_required(login_url='regcomp')
def gobankrecon(request):
    cmp1 = company.objects.get(id=request.session["uid"])
    return render(request, 'app1/bankrecon.html', {'cmp1': cmp1})


@login_required(login_url='regcomp')
def gosalesrecords(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        emp = salesrecpts.objects.filter(cid=cmp1).all()
        sds = timeactsale.objects.filter(cid=cmp1).all()
        inv = invoice.objects.filter(cid=cmp1).all()
        est1 = estimate.objects.filter(cid=cmp1).all()
        crd1 = credit.objects.filter(cid=cmp1).all()
        pay1 = payment.objects.filter(cid=cmp1).all()
        delayed1 = delayedcharge.objects.all()
        context = {'sale': emp, 'tisa': sds, 'invosales': inv, 'crd': crd1, 'pay': pay1, 'est': est1,
                   'delayed': delayed1,
                   'cmp1': cmp1}
        return render(request, 'app1/salesrecords.html', context)
    except:
        return redirect('godash')


@login_required(login_url='regcomp')
def goinvoices(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        customers = customer.objects.filter(cid=cmp1).all()
        invs = invoice.objects.filter(cid=cmp1).all()
        context = {'invoice': invs, 'customers': customers, 'cmp1': cmp1}
        return render(request, 'app1/invoices.html', context)
    except:
        return redirect('godash')


@login_required(login_url='regcomp')
def gocustomers(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        custo = customer.objects.filter(cid=cmp1).all()
        context = {'customer': custo, 'cmp1': cmp1}
        return render(request, 'app1/customers.html', context)
    except:
        return redirect('godash')


@login_required(login_url='regcomp')
def gopands(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        suppliers = supplier.objects.filter(cid=cmp1)
        inv = inventory.objects.filter(cid=cmp1)
        bun = bundle.objects.filter(cid=cmp1)
        noninv = noninventory.objects.filter(cid=cmp1)
        ser = service.objects.filter(cid=cmp1)
        l_count = 0
        o_count = 0
        invcol1 = request.session["invcol"]
        noninvcol1 = request.session["noninvcol"]
        buncol1 = request.session["buncol"]
        invcol = invcol1
        noninvcol = noninvcol1
        buncol = buncol1
        for i in inv:
            if int(i.initialqty) == 0:
                o_count += 1
            elif int(i.initialqty) < int(i.stockalrt):
                l_count += 1
        context = {'inv': inv, 'cmp1': cmp1, 'bun': bun, 'noninv': noninv, 'ser': ser, 'suppliers': suppliers,
                   'l_count': l_count, 'o_count': o_count, 'invcol': invcol, 'noninvcol': noninvcol, 'buncol': buncol}
        return render(request, 'app1/pands.html', context)
    except:
        return redirect('gopands')


@login_required(login_url='regcomp')
def goexpences(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        tyi = timeact.objects.filter(cid=cmp1).all()
        ch = Cheqs.objects.filter(cid=cmp1).all()
        exp = advancepayment.objects.filter(cid=cmp1).all()
        bill = bills.objects.filter(cid=cmp1).all()
        supl = suplrcredit.objects.filter(cid=cmp1).all()
        suppliers = supplier.objects.filter(cid=cmp1).all()
        exp1 = expences.objects.filter(cid=cmp1).all()
        pdc = paydowncreditcard.objects.filter(cid=cmp1).all()
        context = {'ti': tyi, 'che': ch, 'advancepayment': exp, 'suplrcredit': supl, 'bills': bill, 'exp': exp1,
                   'pdcc': pdc, 'cmp1': cmp1, 'suppliers': suppliers}
        return render(request, 'app1/expences.html', context)
    except:
        return redirect('goexpences')


@login_required(login_url='regcomp')
def gosupplies(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        suppliers = supplier.objects.filter(cid=cmp1).all()
        context = {'suppliers': suppliers, 'cmp1': cmp1}
        return render(request, 'app1/supplies.html', context)
    except:
        return redirect('gosupplies')


@login_required(login_url='regcomp')
def goaddsuppliers(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        acounts = accounts.objects.filter(cid=cmp1)
        context = {'cmp1': cmp1, 'accoun': acounts}
        return render(request, 'app1/addsuppliers.html', context)
    except:
        return redirect('gosupplies')


@login_required(login_url='regcomp')
def customers(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        if request.method == "POST":
            firstname = request.POST['firstname']
            lastname = request.POST['lastname']
            if customer.objects.filter(firstname=firstname, lastname=lastname, cid=cmp1).exists():
                messages.info(request,
                              f"Customer {firstname} {lastname} already exists. Please provide a different name.")
                return redirect('gocustomers')
            else:
                customer1 = customer(title=request.POST['title'], firstname=request.POST['firstname'],
                                     lastname=request.POST['lastname'], company=request.POST['company'],
                                     location=request.POST['location'], gsttype=request.POST['gsttype'],
                                     gstin=request.POST['gstin'], panno=request.POST['panno'],
                                     email=request.POST['email'],
                                     website=request.POST['website'], mobile=request.POST['mobile'],
                                     street=request.POST['street'], city=request.POST['city'],
                                     state=request.POST['state'],
                                     pincode=request.POST['pincode'], country=request.POST['country'],
                                     shipstreet=request.POST['shipstreet'], shipcity=request.POST['shipcity'],
                                     shipstate=request.POST['shipstate'],
                                     shippincode=request.POST['shippincode'], shipcountry=request.POST['shipcountry'],
                                     cid=cmp1)

                customer1.save()
                return redirect('/app1/customers')
        customers = customer.objects.filter(cid=cmp1).all()
        context = {'customers': customers, 'cmp1': cmp1}
        return render(request, 'app1/customers.html', context)
    except:
        return redirect('gocustomers')


@login_required(login_url='regcomp')
def viewcust(request, id):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        custo = customer.objects.get(id=id, cid=cmp1)
        context = {'customer': custo, 'cmp1': cmp1}
        return render(request, 'app1/viewcust.html', context)
    except:
        return redirect('gocustomers')


@login_required(login_url='regcomp')
def editcustomer(request, id):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        custo = customer.objects.get(customerid=id, cid=cmp1)
        context = {'customer': custo, 'cmp1': cmp1}
        return render(request, 'app1/editcustomer.html', context)
    except:
        return redirect('gocustomers')


@login_required(login_url='regcomp')
def updatecustomer(request, id):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        custom = customer.objects.get(customerid=id, cid=cmp1)
        custom.title = request.POST['title']
        custom.firstname = request.POST['firstname']
        custom.lastname = request.POST['lastname']
        custom.company = request.POST['company']
        custom.location = request.POST['location']
        custom.gsttype = request.POST['gsttype']
        custom.gstin = request.POST['gstin']
        custom.panno = request.POST['panno']
        custom.email = request.POST['email']
        custom.website = request.POST['website']
        custom.mobile = request.POST['mobile']
        custom.street = request.POST['street']
        custom.city = request.POST['city']
        custom.state = request.POST['state']
        custom.pincode = request.POST['pincode']
        custom.country = request.POST['country']
        custom.shipstreet = request.POST['shipstreet']
        custom.shipcity = request.POST['shipcity']
        custom.shipstate = request.POST['shipstate']
        custom.shippincode = request.POST['shippincode']
        custom.shipcountry = request.POST['shipcountry']
        custom.save()
        return redirect('gocustomers')
    except:
        return redirect('gocustomers')


@login_required(login_url='regcomp')
def deletecustomer(request, id):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        custom = customer.objects.get(customerid=id, cid=cmp1)
        custom.delete()
        return redirect('gocustomers')
    except:
        return redirect('gocustomers')


@login_required(login_url='regcomp')
def gostandard(request):
    return render(request, 'app1/standard.html')


@login_required(login_url='regcomp')
def goreports(request):
    return render(request, 'app1/customreport.html')


@login_required(login_url='regcomp')
def gomanagementreports(request):
    return render(request, 'app1/managementreports.html')


@login_required(login_url='regcomp')
def gotaxes(request):
    return render(request, 'app1/viewtax.html')


@login_required(login_url='regcomp')
def returntaxes(request):
    return render(request, 'app1/returntaxes.html')


@login_required(login_url='regcomp')
def addtax(request):
    return render(request, 'app1/addtax.html')


@login_required(login_url='regcomp')
def taxrate(request):
    return render(request, 'app1/taxrate.html')


@login_required(login_url='regcomp')
def grouptaxes(request):
    return render(request, 'app1/grouptax.html')


@login_required(login_url='regcomp')
def customtaxes(request):
    return render(request, 'app1/customtax.html')


@login_required(login_url='regcomp')
def edittaxes(request):
    return render(request, 'app1/edittaxes.html')


@login_required(login_url='regcomp')
def editsettings(request):
    return render(request, 'app1/editsettings.html')


@login_required(login_url='regcomp')
def taxadd1(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        tax2 = addtax1(
            taxname=request.POST['taxnam'], description=request.POST['descrip1'], cid=cmp1)
        tax2.save()
        return redirect('gotax')
    except:
        return redirect('gotax')


@login_required(login_url='regcomp')
def gotax(request):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        tax = addtax1.objects.filter(cid=cmp1).all()
        context = {'addtax1': tax, 'cmp1': cmp1}
        return render(request, 'app1/viewtax.html', context)
    except:
        return redirect('gotax')


@login_required(login_url='regcomp')
def paymenthistory(request):
    return render(request, 'app1/paymenthistory.html')


@login_required(login_url='regcomp')
def gocoa(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        prodobj = ProductModel.objects.all()
        itemobj = ItemModel.objects.all()
        acounts = accounts.objects.filter(cid=cmp1)
        account1s = accounts1.objects.filter(cid=cmp1)
        toda = date.today()
        tod = toda.strftime("%Y-%m-%d")
        return render(request, 'app1/coa.html',
                      {'Product': prodobj, 'tod': tod, 'Items': itemobj, 'acount': acounts, 'cmp1': cmp1,
                       'account1s': account1s})
    except:
        return redirect('gocoa')


@login_required(login_url='regcomp')
def createaccount(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        acctype = request.POST.get('acctype')
        detype = request.POST.get('detype')
        name = request.POST.get('name')
        description = request.POST.get('description')
        gst = request.POST.get('gst')
        deftaxcode = request.POST.get('deftaxcode')
        balance = request.POST.get('balance')
        asof = request.POST.get('asof')
        pro = accountype.objects.get(accountypeid=acctype)
        pro2 = ProductModel.objects.get(Pid=acctype)
        if request.method == 'POST':
            if accountype.objects.filter(accountname=detype).exists() and accounts.objects.filter(name=name,
                                                                                                  acctype=acctype,
                                                                                                  cid=cmp1.cid) or accounts1.objects.filter(
                    name=name, acctype=acctype, cid=cmp1.cid):
                messages.info(
                    request, f"Account with {name} already exists. Please provide another name.")
                return redirect('gocoa')
            else:
                account = accounts(acctype=acctype, detype=detype, name=name, description=description,
                                   gst=gst, balfordisp=balance,
                                   deftaxcode=deftaxcode, balance=balance, asof=asof, cid=cmp1, proid=pro,
                                   productid=pro2)
                account.save()
                account1 = accountype(
                    cid=cmp1, accountname=detype, accountbal=balance)
                account1.save()
                acco = accounts1.objects.get(
                    name='Opening Balance Equity', cid=cmp1)
                acco.balance = round(float(acco.balance) + float(balance), 2)
                acco.save()
                return redirect('gocoa')
        else:
            return redirect('gocoa')
    except:
        return redirect('gocoa')


@login_required(login_url='regcomp')
def coaedit(request, accountsid):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        prodobj = ProductModel.objects.all()
        itemobj = ItemModel.objects.all()
        account = accounts.objects.get(accountsid=accountsid)
        context = {'acount': account, 'Product': prodobj,
                   'Items': itemobj, 'cmp1': cmp1}
        return render(request, 'app1/coaedit.html', context)
    except:
        return redirect('gocoa')


@login_required(login_url='regcomp')
def accupdate(request, accountsid):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        if request.method == 'POST':
            gst = request.POST.get('gst')
            if gst == None:
                acc = accounts.objects.get(accountsid=accountsid, cid=cmp1)
                acc.description = request.POST['description']
                acc.gst = ''
                acc.deftaxcode = request.POST['deftaxcode']
                acc.save()
                return redirect('gocoa')
            else:
                acc = accounts.objects.get(accountsid=accountsid, cid=cmp1)
                acc.description = request.POST['description']
                acc.gst = request.POST['gst']
                acc.deftaxcode = request.POST['deftaxcode']
                acc.save()
                return redirect('gocoa')
        else:
            return redirect('gocoa')
    except:
        return redirect('gocoa')


@login_required(login_url='regcomp')
def deleteaccount(request, accountsid):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        account = accounts.objects.get(accountsid=accountsid, cid=cmp1)
        account.delete()
        return redirect('gocoa')
    except:
        return redirect('gocoa')


@login_required(login_url='regcomp')
def coa1edit(request, accounts1id):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        prodobj = ProductModel.objects.all()
        itemobj = ItemModel.objects.all()
        account1s = accounts1.objects.get(accounts1id=accounts1id, cid=cmp1)
        context = {'account1s': account1s, 'Product': prodobj,
                   'Items': itemobj, 'cmp1': cmp1}
        return render(request, 'app1/coa1edit.html', context)
    except:
        return redirect('gocoa')


@login_required(login_url='regcomp')
def acc1update(request, accounts1id):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        if request.method == 'POST':
            gst = request.POST.get('gst')
            if gst == None:
                print('hello1')
                acc = accounts1.objects.get(accounts1id=accounts1id, cid=cmp1)
                acc.description = request.POST['description']
                acc.gst = ''
                acc.balance = request.POST['balance']
                acc.deftaxcode = request.POST['deftaxcode']
                acc.save()
                return redirect('gocoa')
            else:
                acc = accounts1.objects.get(accounts1id=accounts1id, cid=cmp1)
                acc.description = request.POST['description']
                acc.gst = request.POST['gst']
                acc.balance = request.POST['balance']
                acc.deftaxcode = request.POST['deftaxcode']
                acc.save()
                return redirect('gocoa')
        else:
            return redirect('gocoa')
    except:
        return redirect('gocoa')


@login_required(login_url='regcomp')
def gomyacc(request):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        adf = addac.objects.filter(cid=cmp1)
        context = {'addac': adf}
        return render(request, 'app1/myacc.html', context)
    except:
        return redirect('godash')


@login_required(login_url='regcomp')
def goaddinvoices(request):
    try:
        customers = customer.objects.all()
        toda = date.today()
        tod = toda.strftime("%Y-%m-%d")
        cmp1 = company.objects.get(id=request.session["uid"])
        inv = inventory.objects.filter(cid=cmp1)
        bun = bundle.objects.filter(cid=cmp1)
        noninv = noninventory.objects.filter(cid=cmp1)
        ser = service.objects.filter(cid=cmp1)
        context = {'cmp1': cmp1, 'customers': customers, 'inv': inv, 'bun': bun, 'noninv': noninv,
                   'ser': ser,
                   'tod': tod}
        return render(request, 'app1/addinvoics.html', context)
    except:
        return redirect('goinvoices')


@login_required(login_url='regcomp')
def goprintinvoice(request):
    return render(request, 'app1/printinvoice.html')


@login_required(login_url='regcomp')
def goaddcust(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        context = {'cmp1': cmp1}
        return render(request, 'app1/addcust.html', context)
    except:
        return redirect('godash')


@login_required(login_url='regcomp')
def goselectpands(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        context = {'cmp1': cmp1}
        return render(request, 'app1/selectpands.html', context)
    except:
        return redirect('godash')


@login_required(login_url='regcomp')
def goemployee(request):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        emp = employee.objects.filter(cid=cmp1).all()
        context = {'employee': emp, 'cmp1': cmp1}
        return render(request, 'app1/employee.html', context)
    except:
        return redirect('godash')


@login_required(login_url='regcomp')
def gopayslip(request):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        pay = payslip.objects.filter(cid=cmp1).all()
        context = {'payslip': pay, 'cmp1': cmp1}
        return render(request, 'app1/showpayslip.html', context)
    except:
        return redirect('godash')


@login_required(login_url='regcomp')
def goaddemp(request):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        return render(request, 'app1/addemp.html', {'cmp1': cmp1})
    except:
        return redirect('godash')


@login_required(login_url='regcomp')
def employees(request):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        if employee.objects.filter(aadhaarnumber=request.POST['aadhaarnumber']).exists() or employee.objects.filter(
                employeenumber=request.POST['employeenumber']).exists():
            emp = employee.objects.filter(cid=cmp1).all()
            context = {'employee': emp, 'cmp1': cmp1}
            return redirect('goemployee')
        else:
            employees1 = employee(name=request.POST['name'], joiningdate=request.POST['joiningdate'],
                                  employeenumber=request.POST['employeenumber'],
                                  designation=request.POST['designation'],
                                  department=request.POST['department'], branch=request.POST['branch'],
                                  location=request.POST['location'], gender=request.POST['gender'],
                                  age=request.POST['age'],
                                  mobile=request.POST['mobile'], gmail=request.POST['gmail'],
                                  address=request.POST['address'],

                                  providebankdetails=request.POST['providebankdetails'],
                                  bankaccountnumber=request.POST['bankaccountnumber'],
                                  ifsccode=request.POST['ifsccode'],

                                  hrareceived=request.POST['hrareceived'],
                                  totalrentpaid=request.POST['totalrentpaid'],
                                  livein=request.POST['livein'],

                                  applicabletaxregime=request.POST['applicabletaxregime'],
                                  pannumber=request.POST['pannumber'],
                                  aadhaarnumber=request.POST['aadhaarnumber'],
                                  universalaccountnumber=request.POST['universalaccountnumber'],
                                  pfaccountnumber=request.POST['pfaccountnumber'],
                                  epsaccountnumber=request.POST['epsaccountnumber'],
                                  praccountnumber=request.POST['praccountnumber'],
                                  esinumber=request.POST['esinumber'],
                                  esidispensaryname=request.POST['esidispensaryname'], basic=request.POST['basic'],
                                  da=request.POST['da'],
                                  othincome1=request.POST['othrincome1'], othincome2=request.POST['othrincome2'],
                                  othincome3=request.POST['othrincome3'], othincome4=request.POST['othrincome4'],
                                  othincome5=request.POST['othrincome5'], othamount1=request.POST['othramount1'],
                                  othamount2=request.POST['othramount2'], othamount3=request.POST['othramount3'],
                                  othamount4=request.POST['othramount4'], othamount5=request.POST['othramount5'],
                                  provifund=request.POST['provifund'], proftax=request.POST['proftax'],
                                  esi=request.POST['esi'], deduc1=request.POST['deduc1'], deduc2=request.POST['deduc2'],
                                  deduc3=request.POST['deduc3'], deduc4=request.POST['deduc4'],
                                  deducamt1=request.POST['deducamt1'],
                                  deducamt2=request.POST['deducamt2'], deducamt3=request.POST['deducamt3'],
                                  deducamt4=request.POST['deducamt4'], cid=cmp1)
            employees1.save()
            emp = employee.objects.filter(cid=cmp1).all()
            context = {'employee': emp, 'cmp1': cmp1}
            return redirect('goemployee')
    except:
        return redirect('goemployee')


@login_required(login_url='regcomp')
def empedit(request, employeeid):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        empl = employee.objects.get(employeeid=employeeid, cid=cmp1)
        context = {'employee': empl, 'cmp1': cmp1}
        return render(request, 'app1/editemp.html', context)
    except:
        return redirect('goemployee')


@login_required(login_url='regcomp')
def updateemp(request, employeeid):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        emplo = employee.objects.get(employeeid=employeeid, cid=cmp1)
        emplo.name = request.POST['name']
        emplo.joiningdate = request.POST['joiningdate']
        emplo.employeenumber = request.POST['employeenumber']
        emplo.designation = request.POST['designation']
        emplo.department = request.POST['department']
        emplo.branch = request.POST['branch']
        emplo.location = request.POST['location']
        emplo.gender = request.POST['gender']
        emplo.age = request.POST['age']
        emplo.mobile = request.POST['mobile']
        emplo.gmail = request.POST['gmail']
        emplo.address = request.POST['address']

        emplo.providebankdetails = request.POST['providebankdetails']
        emplo.bankaccountnumber = request.POST['bankaccountnumber']
        emplo.ifsccode = request.POST['ifsccode']

        emplo.hrareceived = request.POST['hrareceived']
        emplo.totalrentpaid = request.POST['totalrentpaid']
        emplo.livein = request.POST['livein']

        emplo.applicabletaxregime = request.POST['applicabletaxregime']
        emplo.pannumber = request.POST['pannumber']
        emplo.aadhaarnumber = request.POST['aadhaarnumber']
        emplo.universalaccountnumber = request.POST['universalaccountnumber']
        emplo.pfaccountnumber = request.POST['pfaccountnumber']
        emplo.epsaccountnumber = request.POST['epsaccountnumber']
        emplo.praccountnumber = request.POST['praccountnumber']
        emplo.esinumber = request.POST['esinumber']
        emplo.esidispensaryname = request.POST['esidispensaryname']

        emplo.basic = request.POST['basic']
        emplo.da = request.POST['da']

        emplo.othincome1 = request.POST['othrincome1']
        emplo.othincome2 = request.POST['othrincome2']
        emplo.othincome3 = request.POST['othrincome3']
        emplo.othincome4 = request.POST['othrincome4']
        emplo.othincome5 = request.POST['othrincome5']
        emplo.othamount1 = request.POST['othramount1']
        emplo.othamount2 = request.POST['othramount2']
        emplo.othamount3 = request.POST['othramount3']
        emplo.othamount4 = request.POST['othramount4']
        emplo.othamount5 = request.POST['othramount5']
        emplo.provifund = request.POST['provifund']
        emplo.proftax = request.POST['proftax']
        emplo.esi = request.POST['esi']
        emplo.deduc1 = request.POST['deduc1']
        emplo.deduc2 = request.POST['deduc2']
        emplo.deduc3 = request.POST['deduc3']
        emplo.deduc4 = request.POST['deduc4']
        emplo.deducamt1 = request.POST['deducamt1']
        emplo.deducamt2 = request.POST['deducamt2']
        emplo.deducamt3 = request.POST['deducamt3']
        emplo.deducamt4 = request.POST['deducamt4']

        emplo.save()
        return redirect('goemployee')
    except:
        return redirect('goemployee')


@login_required(login_url='regcomp')
def deleteemp(request, employeeid):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        empl = employee.objects.get(employeeid=employeeid, cid=cmp1)
        empl.delete()
        return redirect('goemployee')
    except:
        return redirect('goemployee')


@login_required(login_url='regcomp')
def payslipcreate(request):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        empp = employee.objects.filter(cid=cmp1).all()
        context = {'employees': empp, 'cmp1': cmp1}
        pay = payslip(empname=request.POST['empname'], employeenumber=request.POST['employeenumber'],
                      desig=request.POST['desig'], fper=request.POST['fper'],
                      tper=request.POST['tper'], paydate=request.POST['paydate'], basic=request.POST['basic'],
                      da=request.POST['da'],
                      ear1=request.POST['ear1'], earr1=request.POST['earr1'], ear2=request.POST['ear2'],
                      earr2=request.POST['earr2'], ear3=request.POST['ear3'], earr3=request.POST['earr3'],
                      ear4=request.POST['ear4'], earr4=request.POST['earr4'], ear5=request.POST['ear5'],
                      earr5=request.POST['earr5'], ear6=request.POST['ear6'], earr6=request.POST['earr6'],
                      ear7=request.POST['ear7'], earr7=request.POST['earr7'], provi=request.POST['provi'],
                      prof=request.POST['prof'], esi=request.POST['esi'], ded1=request.POST['ded1'],
                      dedu1=request.POST['dedu1'], ded2=request.POST['ded2'], dedu2=request.POST['dedu2'],
                      ded3=request.POST['ded3'], dedu3=request.POST['dedu3'], ded4=request.POST['ded4'],
                      dedu4=request.POST['dedu4'], ded5=request.POST['ded5'], dedu5=request.POST['dedu5'],
                      ded6=request.POST['ded6'], dedu6=request.POST['dedu6'],
                      gros=request.POST['gros'], tded=request.POST['tded'], netsal=request.POST['netsal'], cid=cmp1)
        pay.save()
        return redirect('gopayslip')
    except:
        return redirect('gopayslip')


@login_required(login_url='regcomp')
def viewpayslip(request, employeeid):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        empp = employee.objects.get(employeeid=employeeid, cid=cmp1)
        context = {'employees': empp, 'cmp1': cmp1}
        return render(request, 'app1/payslip.html', context)
    except:
        return redirect('gopayslip')


@login_required(login_url='regcomp')
def deletepay(request, payslipid):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        pay = payslip.objects.get(payslipid=payslipid, cid=cmp1)
        pay.delete()
        return redirect('gopayslip')
    except:
        return redirect('gopayslip')


@login_required(login_url='regcomp')
def viewpay(request, payslipid):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        pays = payslip.objects.get(payslipid=payslipid, cid=cmp1)
        no = pays.employeenumber
        emp = employee.objects.get(employeenumber=no, cid=cmp1)
        context = {'payslip': pays, 'employee': emp, 'cmp1': cmp1}
        return render(request, 'app1/printpayslip.html', context)
    except:
        return redirect('gopayslip')


@login_required(login_url='regcomp')
def payedit(request, payslipid):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        pay = payslip.objects.get(payslipid=payslipid, cid=cmp1)
        context = {'payslip': pay, 'cmp1': cmp1}
        return render(request, 'app1/editpayslip.html', context)
    except:
        return redirect('gopayslip')


@login_required(login_url='regcomp')
def updatepay(request, payslipid):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        payid = payslip.objects.get(payslipid=payslipid, cid=cmp1)
        payid.empname = request.POST['empname']
        payid.employeenumber = request.POST['employeenumber']
        payid.desig = request.POST['desig']
        payid.fper = request.POST['fper']
        payid.tper = request.POST['tper']
        payid.paydate = request.POST['paydate']
        payid.basic = request.POST['basic']
        payid.da = request.POST['da']
        payid.ear1 = request.POST['ear1']
        payid.earr1 = request.POST['earr1']
        payid.ear2 = request.POST['ear2']
        payid.earr2 = request.POST['earr2']
        payid.ear3 = request.POST['ear3']
        payid.earr3 = request.POST['earr3']
        payid.ear4 = request.POST['ear4']
        payid.earr4 = request.POST['earr4']
        payid.ear5 = request.POST['ear5']
        payid.earr5 = request.POST['earr5']
        payid.ear6 = request.POST['ear6']
        payid.earr6 = request.POST['earr6']
        payid.ear7 = request.POST['ear7']
        payid.earr7 = request.POST['earr7']
        payid.provi = request.POST['provi']
        payid.prof = request.POST['prof']
        payid.esi = request.POST['esi']
        payid.ded1 = request.POST['ded1']
        payid.dedu1 = request.POST['dedu1']
        payid.ded2 = request.POST['ded2']
        payid.dedu2 = request.POST['dedu2']
        payid.ded3 = request.POST['ded3']
        payid.dedu3 = request.POST['dedu3']
        payid.ded4 = request.POST['ded4']
        payid.dedu4 = request.POST['dedu4']
        payid.ded5 = request.POST['ded5']
        payid.dedu5 = request.POST['dedu5']
        payid.ded6 = request.POST['ded6']
        payid.dedu6 = request.POST['dedu6']
        payid.gros = request.POST['gros']
        payid.tded = request.POST['tded']
        payid.netsal = request.POST['netsal']
        payid.save()
        return redirect('gopayslip')
    except:
        return redirect('gopayslip')


@login_required(login_url='regcomp')
def goinv(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        suppliers = supplier.objects.filter(cid=cmp1)
        acounts = accounts.objects.filter(cid=cmp1)
        context = {'cmp1': cmp1, 'suppliers': suppliers, 'accoun': acounts}
        return render(request, 'app1/inv.html', context)
    except:
        return redirect('gopands')


@login_required(login_url='regcomp')
def gononinv(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        suppliers = supplier.objects.filter(cid=cmp1)
        acounts = accounts.objects.filter(cid=cmp1)
        acount = accounts1.objects.filter(cid=cmp1)
        context = {'cmp1': cmp1, 'suppliers': suppliers,
                   'accoun': acounts, 'acount': acount}
        return render(request, 'app1/noninv.html', context)
    except:
        return redirect('gopands')


@login_required(login_url='regcomp')
def goser(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        acounts = accounts.objects.filter(cid=cmp1)
        context = {'cmp1': cmp1, 'accoun': acounts}
        return render(request, 'app1/ser.html', context)
    except:
        return redirect('gopands')


@login_required(login_url='regcomp')
def gobun(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        inv = inventory.objects.filter(cid=cmp1)
        noninv = noninventory.objects.filter(cid=cmp1)
        context = {'cmp1': cmp1, 'inv': inv, 'noninv': noninv}
        return render(request, 'app1/bun.html', context)
    except:
        return redirect('gopands')


@login_required(login_url='regcomp')
def goselpan(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        context = {'cmp1': cmp1}
        return render(request, 'app1/selectpands.html', context)
    except:
        return redirect('gopands')


def regcomp(request):
    return render(request, 'app1/login.html')


@login_required(login_url='regcomp')
def cust(request):
    try:
        customer1 = customer(title=request.POST['title'], firstname=request.POST['firstname'],
                             lastname=request.POST['lastname'], company=request.POST['company'],
                             location=request.POST['location'], gsttype=request.POST['gsttype'],
                             gstin=request.POST['gstin'], panno=request.POST['panno'], email=request.POST['email'],
                             website=request.POST['website'], mobile=request.POST['mobile'],
                             street=request.POST['street'],
                             city=request.POST['city'], state=request.POST['state'], pincode=request.POST['pincode'],
                             country=request.POST['country'])
        customer1.save()
        custo = customer.objects.filter(cid=cmp1).all()
        context = {'customer': custo}
        return render(request, 'app1/customers.html', context)
    except:
        return redirect('gocustomers')


@login_required(login_url='regcomp')
def suppliercreate(request):
    try:
        if request.method == 'POST':
            cmp1 = company.objects.get(id=request.session["uid"])
            firstname = request.POST.get('firstname')
            lastname = request.POST.get('lastname')
            if supplier.objects.filter(firstname=firstname, lastname=lastname, cid=cmp1).exists():
                messages.info(request,
                              f'Supplier {firstname} {lastname} already exists. Please provide a different name.')
                return redirect('gosupplies')
            else:
                sup = supplier(title=request.POST.get('title'), firstname=request.POST.get('firstname'),
                               lastname=request.POST.get('lastname'), company=request.POST.get('company'),
                               mobile=request.POST.get('mobile'), email=request.POST.get('email'),
                               website=request.POST.get('website'), billingrate=request.POST.get('billingrate'),
                               terms=request.POST.get('terms'), openingbalance=request.POST.get('openingbalance'),
                               accountno=request.POST.get('accountno'), gsttype=request.POST.get('gsttype'),
                               gstin=request.POST.get('gstin'), taxregistrationno=request.POST.get('taxregistrationno'),
                               effectivedate=request.POST.get('effectivedate'),
                               defaultexpenceaccount=request.POST.get(
                                   'defaultexpenceaccount'),
                               street=request.POST.get('street'),
                               city=request.POST.get('city'), state=request.POST.get('state'),
                               pincode=request.POST.get('pincode'),
                               country=request.POST.get('country'), notes=request.POST.get('notes'), cid=cmp1)
                sup.save()
                suppliers = supplier.objects.filter(cid=cmp1).all()
                context = {'suppliers': suppliers, 'cmp1': cmp1}
                balan = float(request.POST.get('openingbalance'))
                defaultexpenceaccount = request.POST.get(
                    'defaultexpenceaccount')
                account = accounts1.objects.get(
                    name='Accounts Payable(Creditors)', cid=cmp1)
                if balan != 0:
                    account.balance = account.balance + balan
                    account.save()
                    if accounts1.objects.get(name='Ask My Accountant', cid=cmp1):
                        account1 = accounts1.objects.get(
                            name='Ask My Accountant', cid=cmp1)
                        account1.balance = account1.balance + balan
                        account1.save()
                else:
                    pass
                firstname = request.POST.get('firstname')
                lastname = request.POST.get('lastname')
                toda = date.today()
                tod = toda.strftime("%Y-%m-%d")
                bill2 = bills(payee=firstname + ' ' + lastname, paymdate=tod,
                              grandtotal=request.POST['openingbalance'], payornot='openbalance', cid=cmp1)
                bill2.save()
                return redirect('gosupplies')
        else:
            return redirect('gosupplies')
    except:
        return redirect('gosupplies')


@login_required(login_url='regcomp')
def supedit(request, id):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        sup = supplier.objects.get(supplierid=id, cid=cmp1)
        context = {'supplier': sup, 'cmp1': cmp1}
        return render(request, 'app1/editsup.html', context)
    except:
        return redirect('/app1/gosupplies')


@login_required(login_url='regcomp')
def updatesup(request, id):
    try:
        if request.method == 'POST':
            cmp1 = company.objects.get(id=request.session['uid'])
            supplie = supplier.objects.get(supplierid=id, cid=cmp1)
            supplie.title = request.POST['title']
            supplie.firstname = request.POST['firstname']
            supplie.lastname = request.POST['lastname']
            supplie.company = request.POST['company']
            supplie.mobile = request.POST['mobile']
            supplie.email = request.POST['email']
            supplie.website = request.POST['website']
            supplie.billingrate = request.POST['billingrate']
            supplie.terms = request.POST['terms']
            supplie.openingbalance = request.POST['openingbalance']
            supplie.accountno = request.POST['accountno']
            supplie.gsttype = request.POST['gsttype']
            supplie.gstin = request.POST['gstin']
            supplie.taxregistrationno = request.POST['taxregistrationno']
            supplie.effectivedate = request.POST['effectivedate']
            supplie.defaultexpenceaccount = request.POST['defaultexpenceaccount']
            supplie.tds = request.POST['tds']
            supplie.street = request.POST['street']
            supplie.city = request.POST['city']
            supplie.state = request.POST['state']
            supplie.pincode = request.POST['pincode']
            supplie.country = request.POST['country']
            supplie.notes = request.POST['notes']
            supplie.save()
            return redirect('gosupplies')
        else:
            return redirect('gosupplies')
    except:
        return redirect('gosupplies')


@login_required(login_url='regcomp')
def deletesup(request, id):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        sup = supplier.objects.get(supplierid=id, cid=cmp1)
        sup.delete()
        return redirect('gosupplies')
    except:
        return redirect('gosupplies')


@login_required(login_url='regcomp')
def addtimeactivity(request):
    return render(request, 'app1/timeactivity.html')


@login_required(login_url='regcomp')
def addbill(request):
    return render(request, 'app1/bill.html')


@login_required(login_url='regcomp')
def addexpense(request):
    return render(request, 'app1/addexpences.html')


@login_required(login_url='regcomp')
def addcheque(request):
    return render(request, 'app1/cheque.html')


@login_required(login_url='regcomp')
def addsuppliercredit(request):
    return render(request, 'app1/suppliercredit.html')


@login_required(login_url='regcomp')
def addadvancepayment(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        advancepayment1 = advancepayment.objects.filter(cid=cmp1).all()
        customers = customer.objects.filter(cid=cmp1).all()
        suppliers = supplier.objects.filter(cid=cmp1).all()
        toda = date.today()
        tod = toda.strftime("%Y-%m-%d")
        context = {'advancepayment': advancepayment, 'cmp1': cmp1, 'customers': customers, 'suppliers': suppliers,
                   'tod': tod}
        return render(request, 'app1/advancepayment.html', context)
    except:
        return redirect('goexpences')


@login_required(login_url='regcomp')
def advpay(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        if request.method == "POST":
            adv = advancepayment(payee=request.POST['payee'], account=request.POST['account'],
                                 address=request.POST['address'], amount=request.POST['amount'],
                                 paymentdate=request.POST['paymentdate'], refno=request.POST['refno'],
                                 memo=request.POST['memo'], cid=cmp1)
            adv.save()
            adv = advancepayment.objects.filter(cid=cmp1).all()
            context = {'advancepayment': adv}
            return redirect('goexpences')
    except:
        return redirect('goexpences')


@login_required(login_url='regcomp')
def deleteadvpay(request, id):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        adv = advancepayment.objects.get(advancepaymentid=id, cid=cmp1)
        adv.delete()
        return redirect('goexpences')
    except:
        return redirect('goexpences')


@login_required(login_url='regcomp')
def advpayedit(request, id):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        adv = advancepayment.objects.get(advancepaymentid=id, cid=cmp1)
        context = {'advancepayment': adv, 'cmp1': cmp1}
        return render(request, 'app1/editadvpay.html', context)
    except:
        return redirect('goexpences')


@login_required(login_url='regcomp')
def updateadvpay(request, id):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        adv = advancepayment.objects.get(advancepaymentid=id, cid=cmp1)
        adv.payee = request.POST['payee']
        adv.account = request.POST['account']
        adv.address = request.POST['address']
        adv.amount = request.POST['amount']
        adv.paymentdate = request.POST['paymentdate']
        adv.refno = request.POST['refno']
        adv.memo = request.POST['memo']
        adv.save()
        return redirect('goexpences')
    except:
        return redirect('goexpences')


@login_required(login_url='regcomp')
def addpdcc(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        customers = customer.objects.filter(cid=cmp1).all()
        suppliers = supplier.objects.filter(cid=cmp1).all()

        pdcc1 = paydowncreditcard.objects.filter(cid=cmp1).all()
        context = {'pcdd1': pdcc1, 'cmp1': cmp1,
                   'customers': customers, 'suppliers': suppliers}
        return render(request, 'app1/pdcc.html', context)
    except:
        return redirect('goexpences')


@login_required(login_url='regcomp')
def pdcc(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        if paydowncreditcard.objects.filter(
                discription=request.POST['discription']).exists() and paydowncreditcard.objects.filter(cid=cmp1.cid):
            pdc = paydowncreditcard.objects.filter(cid=cmp1).all()
            context = {'paydowncreditcard': pdc, 'cmp1': cmp1}
            return render(request, 'app1/dashbord.html', context)
        else:

            pdc = paydowncreditcard(ccno=request.POST['ccno'], payee=request.POST['payee'],
                                    amount=request.POST['amount'],
                                    dateofpayment=request.POST['dateofpayment'],
                                    discription=request.POST['discription'],
                                    cid=cmp1)
            pdc.save()
            pdc = paydowncreditcard.objects.filter(cid=cmp1).all()
            context = {'paydowncreditcard': pdc, 'cmp1': cmp1}
            return redirect('goexpences')
    except:
        return redirect('goexpences')


@login_required(login_url='regcomp')
def pdccdelete(request, id):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        pdcc = paydowncreditcard.objects.get(paycreditcardid=id, cid=cmp1)
        pdcc.delete()
        return redirect('goexpences')
    except:
        return redirect('goexpences')


@login_required(login_url='regcomp')
def pdccedit(request, id):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        pdcc = paydowncreditcard.objects.get(paycreditcardid=id, cid=cmp1)
        context = {'paydowncreditcard': pdcc, 'cmp1': cmp1}
        return render(request, 'app1/editpdcc.html', context)
    except:
        return redirect('goexpences')


@login_required(login_url='regcomp')
def updatepdcc(request, id):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        pdcc = paydowncreditcard.objects.get(paycreditcardid=id, cid=cmp1)
        pdcc.ccno = request.POST['ccno']
        pdcc.payee = request.POST['payee']
        pdcc.amount = request.POST['amount']
        pdcc.discription = request.POST['discription']
        pdcc.save()
        return redirect('goexpences')
    except:
        return redirect('goexpences')


@login_required(login_url='regcomp')
def addsalesrecipts(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        customers = customer.objects.filter(cid=cmp1)
        toda = date.today()
        tod = toda.strftime("%Y-%m-%d")
        inv = inventory.objects.filter(cid=cmp1)
        bun = bundle.objects.filter(cid=cmp1)
        noninv = noninventory.objects.filter(cid=cmp1)
        ser = service.objects.filter(cid=cmp1)
        acounts = accounts.objects.filter(cid=cmp1)
        context = {'cmp1': cmp1, 'customers': customers, 'inv': inv, 'bun': bun, 'noninv': noninv, 'ser': ser,
                   'tod': tod, 'accoun': acounts}
        return render(request, 'app1/salesrecipt.html', context)
    except:
        return redirect('gosalesrecords')


@login_required(login_url='regcomp')
def salesrecipts(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        salee = salesrecpts(saleno='1000',
                            saledate=request.POST['saledate'],
                            salename=request.POST['salename'],
                            saleaddress=request.POST['saleaddress'],
                            saleemail=request.POST['saleemail'],
                            salepay=request.POST['salepay'],
                            salerefno=request.POST['salerefno'],
                            saledeposit=request.POST['saledeposit'],
                            salepro=request.POST['salepro'],
                            salesplace=request.POST['salesplace'],
                            salehsn=request.POST['salehsn'],
                            saledescription=request.POST['saledescription'],
                            saleqty=request.POST['saleqty'],
                            saleprice=request.POST['saleprice'],
                            saaletotal=request.POST['saaletotal'],
                            salesubtotal=request.POST['salesubtotal'],
                            tax=request.POST['tax'],
                            saletaxamount=request.POST['saletaxamount'],
                            salegrandtotal=request.POST['salegrandtotal'],
                            category2=request.POST['category2'],
                            categoryhsn2=request.POST['categoryhsn2'],
                            descrptin2=request.POST['descrptin2'],
                            catqty2=request.POST['catqty2'],
                            catprice2=request.POST['catprice2'],
                            cattotal2=request.POST['cattotal2'],
                            tax1=request.POST['tax1'],

                            category3=request.POST['category3'],
                            categoryhsn3=request.POST['categoryhsn3'],
                            descrptin3=request.POST['descrptin3'],
                            catqty3=request.POST['catqty3'],
                            catprice3=request.POST['catprice3'],
                            cattotal3=request.POST['cattotal3'],
                            tax2=request.POST['tax2'],
                            category4=request.POST['category4'],
                            categoryhsn4=request.POST['categoryhsn4'],
                            descrptin4=request.POST['descrptin4'],
                            catqty4=request.POST['catqty4'],
                            catprice4=request.POST['catprice4'],
                            cattotal4=request.POST['cattotal4'],
                            tax3=request.POST['tax3'],
                            cid=cmp1)
        salee.save()
        salee.saleno = int(salee.saleno) + salee.salesrecptsid
        salee.save()
        placosupply = request.POST['salesplace']
        salegrandtotal = float(request.POST['salegrandtotal'])
        saledeposit = request.POST['saledeposit']
        try:
            if salegrandtotal != 0:
                accoun = accounts1.objects.get(name=saledeposit, cid=cmp1)
                accoun.balance = accoun.balance + salegrandtotal
                accoun.save()
        except:
            pass
        try:
            if salegrandtotal != 0:
                accoun = accounts.objects.get(name=saledeposit, cid=cmp1)
                accoun.balance = accoun.balance + salegrandtotal
                accoun.save()
        except:
            pass
        taxamnt = [float(request.POST['taxamount']), float(request.POST['taxamount1']),
                   float(request.POST['taxamount2']),
                   float(request.POST['taxamount3'])]
        qty = [float(request.POST['saleqty']), float(request.POST['catqty2']),
               float(request.POST['catqty3']),
               float(request.POST['catqty4'])]
        totals = [float(request.POST['saaletotal']), float(request.POST['cattotal2']),
                  float(request.POST['cattotal3']),
                  float(request.POST['cattotal4'])]
        product = [request.POST['salepro'], request.POST['category2'], request.POST['category3'],
                   request.POST['category4']]
        for (p, q, t, tx) in zip(product, qty, totals, taxamnt):
            try:
                if inventory.objects.get(name=p, cid=cmp1):
                    invent = inventory.objects.get(name=p, cid=cmp1)
                    invent.initialqty = int(invent.initialqty) - int(q)
                    invent.save()
                    cxq = float(invent.cost) * float(q)
                    invenacnt = invent.invacnt
                    if accounts1.objects.get(name=invenacnt, cid=cmp1):
                        accoun = accounts1.objects.get(
                            name=invenacnt, cid=cmp1)
                        accoun.balance = accoun.balance - cxq
                        accoun.save()
                    elif accounts.objects.get(name=invenacnt, cid=cmp1):
                        accoun = accounts.objects.get(name=invenacnt, cid=cmp1)
                        accoun.balance = accoun.balance - cxq
                        accoun.save()
                    else:
                        pass
                    if accounts1.objects.get(name=invent.incomeacnt, cid=cmp1):
                        accoun = accounts1.objects.get(
                            name=invent.incomeacnt, cid=cmp1)
                        accoun.balance = accoun.balance + t
                        accoun.save()
                    elif accounts.objects.get(name=invent.incomeacnt, cid=cmp1):
                        accoun = accounts.objects.get(
                            name=invent.incomeacnt, cid=cmp1)
                        accoun.balance = accoun.balance + t
                        accoun.save()
                    else:
                        pass
                    if accounts1.objects.get(name=invent.expacnt, cid=cmp1):
                        accoun = accounts1.objects.get(
                            name=invent.expacnt, cid=cmp1)
                        accoun.balance = accoun.balance + cxq
                        accoun.save()
                    elif accounts.objects.get(name=invent.expacnt, cid=cmp1):
                        accoun = accounts.objects.get(
                            name=invent.expacnt, cid=cmp1)
                        accoun.balance = accoun.balance + cxq
                        accoun.save()
                    else:
                        pass
                    if placosupply == cmp1.state:
                        tax = tx / 2
                        accocgst = accounts1.objects.get(
                            name='Output CGST', cid=cmp1)
                        accocgst.balance = accocgst.balance + tax
                        accocgst.save()
                        accosgst = accounts1.objects.get(
                            name='Output SGST', cid=cmp1)
                        accosgst.balance = accosgst.balance + tax
                        accosgst.save()
                    else:
                        accoigst = accounts1.objects.get(
                            name='Output IGST', cid=cmp1)
                        accoigst.balance = accoigst.balance + tx
                        accoigst.save()
            except:
                pass
            try:
                if noninventory.objects.get(name=p, cid=cmp1):
                    noninvent = noninventory.objects.get(name=p, cid=cmp1)
                    noninvent.qty = int(noninvent.qty) - int(q)
                    noninvent.save()
                    if accounts1.objects.get(name=noninvent.income, cid=cmp1):
                        accoun = accounts1.objects.get(
                            name=noninvent.income, cid=cmp1)
                        accoun.balance = accoun.balance + t
                        accoun.save()
                    elif accounts.objects.get(name=noninvent.income, cid=cmp1):
                        accoun = accounts.objects.get(
                            name=noninvent.income, cid=cmp1)
                        accoun.balance = accoun.balance + t
                        accoun.save()
                    else:
                        pass
                    try:
                        if placosupply == cmp1.state:
                            tax = tx / 2
                            accocgst = accounts1.objects.get(
                                name='Output CGST', cid=cmp1)
                            accocgst.balance = accocgst.balance + tax
                            accocgst.save()
                            accosgst = accounts1.objects.get(
                                name='Output SGST', cid=cmp1)
                            accosgst.balance = accosgst.balance + tax
                            accosgst.save()
                        else:
                            accoigst = accounts1.objects.get(
                                name='Output IGST', cid=cmp1)
                            accoigst.balance = accoigst.balance + tx
                            accoigst.save()
                    except:
                        pass
            except:
                pass
        btaxamnt = [float(request.POST['taxamount11']), float(request.POST['taxamount12']), float(request.POST['taxamount13']), float(request.POST['taxamount14']), float(request.POST['taxamount21']), float(request.POST['taxamount22']), float(request.POST['taxamount23']), float(request.POST['taxamount24']), float(
            request.POST['taxamount31']), float(request.POST['taxamount32']), float(request.POST['taxamount33']), float(request.POST['taxamount34']), float(request.POST['taxamount41']), float(request.POST['taxamount42']), float(request.POST['taxamount43']), float(request.POST['taxamount44'])]
        bqty = [float(request.POST['qty11']), float(request.POST['qty12']), float(request.POST['qty13']), float(request.POST['qty14']), float(request.POST['qty21']), float(request.POST['qty22']), float(request.POST['qty23']), float(request.POST['qty24']), float(
            request.POST['qty31']), float(request.POST['qty32']), float(request.POST['qty33']), float(request.POST['qty34']), float(request.POST['qty41']), float(request.POST['qty42']), float(request.POST['qty43']), float(request.POST['qty44'])]
        btotals = [float(request.POST['total11']), float(request.POST['total12']), float(request.POST['total13']), float(request.POST['total14']), float(request.POST['total21']), float(request.POST['total22']), float(request.POST['total23']), float(request.POST['total24']), float(
            request.POST['total31']), float(request.POST['total32']), float(request.POST['total33']), float(request.POST['total34']), float(request.POST['total41']), float(request.POST['total42']), float(request.POST['total43']), float(request.POST['total44'])]
        bproduct = [request.POST['product11'], request.POST['product12'], request.POST['product13'], request.POST['product14'], request.POST['product21'], request.POST['product22'], request.POST['product23'], request.POST['product24'],
                    request.POST['product31'], request.POST['product32'], request.POST['product33'], request.POST['product34'], request.POST['product41'], request.POST['product42'], request.POST['product43'], request.POST['product44']]
        for (p, q, t, tx) in zip(bproduct, bqty, btotals, btaxamnt):
            try:
                if inventory.objects.get(name=p, cid=cmp1):
                    invent = inventory.objects.get(name=p, cid=cmp1)
                    invent.initialqty = int(invent.initialqty) - int(q)
                    invent.save()
                    cxq = float(invent.cost) * float(q)
                    invenacnt = invent.invacnt
                    if accounts1.objects.get(name=invenacnt, cid=cmp1):
                        accoun = accounts1.objects.get(
                            name=invenacnt, cid=cmp1)
                        accoun.balance = accoun.balance - cxq
                        accoun.save()
                    elif accounts.objects.get(name=invenacnt, cid=cmp1):
                        accoun = accounts.objects.get(name=invenacnt, cid=cmp1)
                        accoun.balance = accoun.balance - cxq
                        accoun.save()
                    else:
                        pass
                    if accounts1.objects.get(name=invent.incomeacnt, cid=cmp1):
                        accoun = accounts1.objects.get(
                            name=invent.incomeacnt, cid=cmp1)
                        accoun.balance = accoun.balance + t
                        accoun.save()
                    elif accounts.objects.get(name=invent.incomeacnt, cid=cmp1):
                        accoun = accounts.objects.get(
                            name=invent.incomeacnt, cid=cmp1)
                        accoun.balance = accoun.balance + t
                        accoun.save()
                    else:
                        pass
                    if accounts1.objects.get(name=invent.expacnt, cid=cmp1):
                        accoun = accounts1.objects.get(
                            name=invent.expacnt, cid=cmp1)
                        accoun.balance = accoun.balance + cxq
                        accoun.save()
                    elif accounts.objects.get(name=invent.expacnt, cid=cmp1):
                        accoun = accounts.objects.get(
                            name=invent.expacnt, cid=cmp1)
                        accoun.balance = accoun.balance + cxq
                        accoun.save()
                    else:
                        pass
                    if placosupply == cmp1.state:
                        tax = tx / 2
                        accocgst = accounts1.objects.get(
                            name='Output CGST', cid=cmp1)
                        accocgst.balance = accocgst.balance + tax
                        accocgst.save()
                        accosgst = accounts1.objects.get(
                            name='Output SGST', cid=cmp1)
                        accosgst.balance = accosgst.balance + tax
                        accosgst.save()
                    else:
                        accoigst = accounts1.objects.get(
                            name='Output IGST', cid=cmp1)
                        accoigst.balance = accoigst.balance + tx
                        accoigst.save()
            except:
                pass
            try:
                if noninventory.objects.get(name=p, cid=cmp1):
                    noninvent = noninventory.objects.get(name=p, cid=cmp1)
                    noninvent.qty = int(noninvent.qty) - int(q)
                    noninvent.save()
                    if accounts1.objects.get(name=noninvent.income, cid=cmp1):
                        accoun = accounts1.objects.get(
                            name=noninvent.income, cid=cmp1)
                        accoun.balance = accoun.balance + t
                        accoun.save()
                    elif accounts.objects.get(name=noninvent.income, cid=cmp1):
                        accoun = accounts.objects.get(
                            name=noninvent.income, cid=cmp1)
                        accoun.balance = accoun.balance + t
                        accoun.save()
                    else:
                        pass
                    try:
                        if placosupply == cmp1.state:
                            tax = tx / 2
                            accocgst = accounts1.objects.get(
                                name='Output CGST', cid=cmp1)
                            accocgst.balance = accocgst.balance + tax
                            accocgst.save()
                            accosgst = accounts1.objects.get(
                                name='Output SGST', cid=cmp1)
                            accosgst.balance = accosgst.balance + tax
                            accosgst.save()
                        else:
                            accoigst = accounts1.objects.get(
                                name='Output IGST', cid=cmp1)
                            accoigst.balance = accoigst.balance + tx
                            accoigst.save()
                    except:
                        pass
            except:
                pass
        return redirect('gosalesrecords')
    except:
        return redirect('gosalesrecords')


@login_required(login_url='regcomp')
def deletesale(request, id):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        sl = salesrecpts.objects.get(salesrecptsid=id, cid=cmp1)
        sl.delete()
        return redirect('gosalesrecords')
    except:
        return redirect('gosalesrecords')


@login_required(login_url='regcomp')
def editsale(request, id):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        custo = salesrecpts.objects.get(salesrecptsid=id)
        inv = inventory.objects.filter(cid=cmp1)
        bun = bundle.objects.filter(cid=cmp1)
        noninv = noninventory.objects.filter(cid=cmp1)
        ser = service.objects.filter(cid=cmp1)
        acounts = accounts.objects.filter(cid=cmp1)
        context = {'sale': custo, 'cmp1': cmp1, 'inv': inv,
                   'noninv': noninv, 'bun': bun, 'ser': ser, 'accoun': acounts}
        return render(request, 'app1/editsale.html', context)
    except:
        return redirect('gosalesrecords')


@login_required(login_url='regcomp')
def showsales(request, id):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        acounts = accounts.objects.filter(cid=cmp1)
        styles = customize.objects.get(selected='selected', cid=cmp1)
        if styles.template == 'classic':
            custo = salesrecpts.objects.get(salesrecptsid=id)
            context = {'sale': custo, 'cmp1': cmp1, 'accoun': acounts, 'styles': styles}
            return render(request, 'app1/showsales.html', context)
        elif styles.template == 'modern':
            custo = salesrecpts.objects.get(salesrecptsid=id)
            context = {'sale': custo, 'cmp1': cmp1, 'accoun': acounts, 'styles': styles}
            return render(request, 'app1/showsalesmodern.html', context)
        elif styles.template == 'fresh':
            custo = salesrecpts.objects.get(salesrecptsid=id)
            context = {'sale': custo, 'cmp1': cmp1, 'accoun': acounts, 'styles': styles}
            return render(request, 'app1/showsalesfresh.html', context)
        elif styles.template == 'friendly':
            custo = salesrecpts.objects.get(salesrecptsid=id)
            context = {'sale': custo, 'cmp1': cmp1, 'accoun': acounts, 'styles': styles}
            return render(request, 'app1/showsalesfriendly.html', context)
        else:
            return redirect('gosalesrecords')
    except:
        return redirect('gosalesrecords')


@login_required(login_url='regcomp')
def updatesale(request, id):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        salo = salesrecpts.objects.get(salesrecptsid=id, cid=cmp1)
        creqty = [salo.saleqty, salo.catqty2, salo.catqty3, salo.catqty4]
        qty = [request.POST['saleqty'], request.POST['catqty2'],
               request.POST['catqty3'], request.POST['catqty4']]
        taxes = [float(salo.tax) / 100, float(salo.tax1) / 100,
                 float(salo.tax2) / 100, float(salo.tax3) / 100]
        otaxamnt = [float(salo.saaletotal) * taxes[0], float(salo.cattotal2) * taxes[1],
                    float(salo.cattotal3) * taxes[2],
                    float(salo.cattotal4) * taxes[3]]
        taxamnt = [float(request.POST['taxamount']), float(request.POST['taxamount1']),
                   float(request.POST['taxamount2']),
                   float(request.POST['taxamount3'])]
        product = [request.POST['salepro'], request.POST['category2'], request.POST['category3'],
                   request.POST['category4']]
        otot = [float(salo.saaletotal), float(salo.cattotal2),
                float(salo.cattotal3), float(salo.cattotal4)]
        tot = [float(request.POST['saaletotal']), float(request.POST['cattotal2']), float(request.POST['cattotal3']),
               float(request.POST['cattotal4'])]
        saledeposit = request.POST['saledeposit']
        salegrandtotal = float(request.POST['salegrandtotal'])
        try:
            if accounts1.objects.get(name=saledeposit, cid=cmp1):
                acco = accounts1.objects.get(name=saledeposit, cid=cmp1)
                if saledeposit == salo.saledeposit:
                    if salegrandtotal > float(salo.salegrandtotal):
                        newgrand = salegrandtotal - float(salo.salegrandtotal)
                        acco.balance = acco.balance + newgrand
                        acco.save()
                    elif salegrandtotal < float(salo.salegrandtotal):
                        newgrand = float(salo.salegrandtotal) - salegrandtotal
                        acco.balance = acco.balance - newgrand
                        acco.save()
                    else:
                        pass
                else:
                    try:
                        if accounts.objects.get(name=salo.saledeposit, cid=cmp1):
                            acco1 = accounts.objects.get(
                                name=salo.saledeposit, cid=cmp1)
                            acco1.balance = acco1.balance - \
                                float(salo.salegrandtotal)
                            acco1.save()
                    except:
                        pass
                    try:
                        if accounts1.objects.get(name=salo.saledeposit, cid=cmp1):
                            acco1 = accounts1.objects.get(
                                name=salo.saledeposit, cid=cmp1)
                            acco1.balance = acco1.balance - \
                                float(salo.salegrandtotal)
                            acco1.save()
                    except:
                        pass
                    if salegrandtotal > float(salo.salegrandtotal):
                        newgrand = salegrandtotal
                        acco.balance = acco.balance + newgrand
                        acco.save()
                    elif salegrandtotal < float(salo.salegrandtotal):
                        newgrand = float(salo.salegrandtotal) - salegrandtotal
                        acco.balance = acco.balance + newgrand
                        acco.save()
                    else:
                        newgrand = float(salo.salegrandtotal)
                        acco.balance = acco.balance + newgrand
                        acco.save()
        except:
            pass
        try:
            if accounts.objects.get(name=saledeposit, cid=cmp1):
                acco = accounts.objects.get(name=saledeposit, cid=cmp1)
                if saledeposit == salo.saledeposit:
                    if salegrandtotal > float(salo.salegrandtotal):
                        newgrand = salegrandtotal - float(salo.salegrandtotal)
                        acco.balance = acco.balance + newgrand
                        acco.save()
                    elif salegrandtotal < float(salo.salegrandtotal):
                        newgrand = float(salo.salegrandtotal) - salegrandtotal
                        acco.balance = acco.balance - newgrand
                        acco.save()
                    else:
                        pass
                else:
                    try:
                        if accounts.objects.get(name=salo.saledeposit, cid=cmp1):
                            acco1 = accounts.objects.get(
                                name=salo.saledeposit, cid=cmp1)
                            acco1.balance = acco1.balance - \
                                float(salo.salegrandtotal)
                            acco1.save()
                    except:
                        pass
                    try:
                        if accounts1.objects.get(name=salo.saledeposit, cid=cmp1):
                            acco1 = accounts1.objects.get(
                                name=salo.saledeposit, cid=cmp1)
                            acco1.balance = acco1.balance - \
                                float(salo.salegrandtotal)
                            acco1.save()
                    except:
                        pass
                    if salegrandtotal > float(salo.salegrandtotal):
                        newgrand = salegrandtotal
                        acco.balance = acco.balance + newgrand
                        acco.save()
                    elif salegrandtotal < float(salo.salegrandtotal):
                        newgrand = float(salo.salegrandtotal) - salegrandtotal
                        acco.balance = acco.balance + newgrand
                        acco.save()
                    else:
                        newgrand = float(salo.salegrandtotal)
                        acco.balance = acco.balance + newgrand
                        acco.save()
            else:
                pass
        except:
            pass
        placosupply = request.POST['salesplace']
        for (p, q, cq, tt, ot, tx, otx) in zip(product, qty, creqty, tot, otot, taxamnt, otaxamnt):
            try:
                if inventory.objects.get(name=p, cid=cmp1):
                    invent = inventory.objects.get(name=p, cid=cmp1)
                    if int(q) > int(cq):
                        invent.initialqty = int(
                            invent.initialqty) - (int(q) - int(cq))
                        invent.save()
                        cxq = float(invent.cost) * (float(q) - float(cq))
                        invenacnt = invent.invacnt
                        if accounts1.objects.get(name=invenacnt, cid=cmp1):
                            accoun = accounts1.objects.get(
                                name=invenacnt, cid=cmp1)
                            accoun.balance = accoun.balance - cxq
                            accoun.save()
                        elif accounts.objects.get(name=invenacnt, cid=cmp1):
                            accoun = accounts.objects.get(name=invenacnt, cid=cmp1)
                            accoun.balance = accoun.balance - cxq
                            accoun.save()
                        else:
                            pass
                        newtot = tt - ot
                        if accounts1.objects.get(name=invent.incomeacnt, cid=cmp1):
                            accoun = accounts1.objects.get(
                                name=invent.incomeacnt, cid=cmp1)
                            accoun.balance = accoun.balance + newtot
                            accoun.save()
                        elif accounts.objects.get(name=invent.incomeacnt, cid=cmp1):
                            accoun = accounts.objects.get(
                                name=invent.incomeacnt, cid=cmp1)
                            accoun.balance = accoun.balance + newtot
                            accoun.save()
                        else:
                            pass
                        if accounts1.objects.get(name=invent.expacnt, cid=cmp1):
                            accoun = accounts1.objects.get(
                                name=invent.expacnt, cid=cmp1)
                            accoun.balance = accoun.balance + cxq
                            accoun.save()
                        elif accounts.objects.get(name=invent.expacnt, cid=cmp1):
                            accoun = accounts.objects.get(
                                name=invent.expacnt, cid=cmp1)
                            accoun.balance = accoun.balance + cxq
                            accoun.save()
                        else:
                            pass
                        if placosupply == cmp1.state:
                            tax = tx / 2
                            otax = otx / 2
                            accocgst = accounts1.objects.get(
                                name='Output CGST', cid=cmp1)
                            ta = tax - otax
                            accocgst.balance = accocgst.balance + ta
                            accocgst.save()
                            accosgst = accounts1.objects.get(
                                name='Output SGST', cid=cmp1)
                            accosgst.balance = accosgst.balance + ta
                            accosgst.save()
                        else:
                            accoigst = accounts1.objects.get(
                                name='Output IGST', cid=cmp1)
                            ta = tx - otx
                            accoigst.balance = accoigst.balance + ta
                            accoigst.save()
                    elif int(q) < int(cq):
                        invent.initialqty = int(
                            invent.initialqty) + (int(cq) - int(q))
                        invent.save()
                        cxq = float(invent.cost) * (float(cq) - float(q))
                        invenacnt = invent.invacnt
                        if accounts1.objects.get(name=invenacnt, cid=cmp1):
                            accoun = accounts1.objects.get(
                                name=invenacnt, cid=cmp1)
                            accoun.balance = accoun.balance + cxq
                            accoun.save()
                        elif accounts.objects.get(name=invenacnt, cid=cmp1):
                            accoun = accounts.objects.get(name=invenacnt, cid=cmp1)
                            accoun.balance = accoun.balance + cxq
                            accoun.save()
                        else:
                            pass
                        newtot = ot - tt
                        if accounts1.objects.get(name=invent.incomeacnt, cid=cmp1):
                            accoun = accounts1.objects.get(
                                name=invent.incomeacnt, cid=cmp1)
                            accoun.balance = accoun.balance - newtot
                            accoun.save()
                        elif accounts.objects.get(name=invent.incomeacnt, cid=cmp1):
                            accoun = accounts.objects.get(
                                name=invent.incomeacnt, cid=cmp1)
                            accoun.balance = accoun.balance - newtot
                            accoun.save()
                        else:
                            pass
                        if accounts1.objects.get(name=invent.expacnt, cid=cmp1):
                            accoun = accounts1.objects.get(
                                name=invent.expacnt, cid=cmp1)
                            accoun.balance = accoun.balance - cxq
                            accoun.save()
                        elif accounts.objects.get(name=invent.expacnt, cid=cmp1):
                            accoun = accounts.objects.get(
                                name=invent.expacnt, cid=cmp1)
                            accoun.balance = accoun.balance - cxq
                            accoun.save()
                        else:
                            pass
                        if placosupply == cmp1.state:
                            tax = tx / 2
                            otax = otx / 2
                            accocgst = accounts1.objects.get(
                                name='Output CGST', cid=cmp1)
                            ta = otax - tax
                            accocgst.balance = accocgst.balance - ta
                            accocgst.save()
                            accosgst = accounts1.objects.get(
                                name='Output SGST', cid=cmp1)
                            accosgst.balance = accosgst.balance - ta
                            accosgst.save()
                        else:
                            accoigst = accounts1.objects.get(
                                name='Output IGST', cid=cmp1)
                            ta = otx - tx
                            accoigst.balance = accoigst.balance - ta
                            accoigst.save()
            except:
                pass
            try:
                if noninventory.objects.get(name=p, cid=cmp1):
                    noninvent = noninventory.objects.get(name=p, cid=cmp1)
                    if int(q) > int(cq):
                        noninvent.qty = int(noninvent.qty) - (int(q) - int(cq))
                        noninvent.save()
                        newtot = tt - ot
                        if accounts1.objects.get(name=noninvent.income, cid=cmp1):
                            accoun = accounts1.objects.get(
                                name=noninvent.income, cid=cmp1)
                            accoun.balance = accoun.balance + newtot
                            accoun.save()
                        elif accounts.objects.get(name=noninvent.income, cid=cmp1):
                            accoun = accounts.objects.get(
                                name=noninvent.income, cid=cmp1)
                            accoun.balance = accoun.balance + newtot
                            accoun.save()
                        else:
                            pass
                        if placosupply == cmp1.state:
                            tax = tx / 2
                            otax = otx / 2
                            accocgst = accounts1.objects.get(
                                name='Output CGST', cid=cmp1)
                            ta = tax - otax
                            accocgst.balance = accocgst.balance + ta
                            accocgst.save()
                            accosgst = accounts1.objects.get(
                                name='Output SGST', cid=cmp1)
                            accosgst.balance = accosgst.balance + ta
                            accosgst.save()
                        else:
                            accoigst = accounts1.objects.get(
                                name='Output IGST', cid=cmp1)
                            ta = tx - otx
                            accoigst.balance = accoigst.balance + ta
                            accoigst.save()
                    elif int(q) < int(cq):
                        noninvent.qty = int(noninvent.qty) + (int(cq) - int(q))
                        noninvent.save()
                        newtot = ot - tt
                        if accounts1.objects.get(name=noninvent.income, cid=cmp1):
                            accoun = accounts1.objects.get(
                                name=noninvent.income, cid=cmp1)
                            accoun.balance = accoun.balance - newtot
                            accoun.save()
                        elif accounts.objects.get(name=noninvent.income, cid=cmp1):
                            accoun = accounts.objects.get(
                                name=noninvent.income, cid=cmp1)
                            accoun.balance = accoun.balance - newtot
                            accoun.save()
                        else:
                            pass
                        if placosupply == cmp1.state:
                            tax = tx / 2
                            otax = otx / 2
                            accocgst = accounts1.objects.get(
                                name='Output CGST', cid=cmp1)
                            ta = otax - tax
                            accocgst.balance = accocgst.balance - ta
                            accocgst.save()
                            accosgst = accounts1.objects.get(
                                name='Output SGST', cid=cmp1)
                            accosgst.balance = accosgst.balance - ta
                            accosgst.save()
                        else:
                            accoigst = accounts1.objects.get(
                                name='Output IGST', cid=cmp1)
                            ta = otx - tx
                            accoigst.balance = accoigst.balance - ta
                            accoigst.save()
                    else:
                        pass
            except:
                pass
        bproduct = [request.POST['product11'], request.POST['product12'], request.POST['product13'],
                    request.POST['product14'], request.POST['product21'], request.POST['product22'],
                    request.POST['product23'],
                    request.POST['product24'], request.POST['product31'], request.POST['product32'],
                    request.POST['product33'],
                    request.POST['product34'], request.POST['product41'], request.POST['product42'],
                    request.POST['product43'],
                    request.POST['product44']]
        bqty = [request.POST['qty11'], request.POST['qty12'], request.POST['qty13'], request.POST['qty14'],
                request.POST['qty21'], request.POST['qty22'], request.POST['qty23'], request.POST['qty24'],
                request.POST['qty31'], request.POST['qty32'], request.POST['qty33'], request.POST['qty34'],
                request.POST['qty41'], request.POST['qty42'], request.POST['qty43'], request.POST['qty44']]
        bcreqty = [request.POST['creqty11'], request.POST['creqty12'], request.POST['creqty13'],
                   request.POST['creqty14'],
                   request.POST['creqty21'], request.POST['creqty22'], request.POST['creqty23'],
                   request.POST['creqty24'],
                   request.POST['creqty31'], request.POST['creqty32'], request.POST['creqty33'],
                   request.POST['creqty34'],
                   request.POST['creqty41'], request.POST['creqty42'], request.POST['creqty43'],
                   request.POST['creqty44']]
        btot = [float(request.POST['total11']), float(request.POST['total12']), float(request.POST['total13']),
                float(request.POST['total14']), float(
                    request.POST['total21']), float(request.POST['total22']),
                float(request.POST['total23']),
                float(request.POST['total24']), float(
                    request.POST['total31']), float(request.POST['total32']),
                float(request.POST['total33']),
                float(request.POST['total34']), float(
                    request.POST['total41']), float(request.POST['total42']),
                float(request.POST['total43']),
                float(request.POST['total44'])]
        botot = [float(request.POST['ototal11']), float(request.POST['ototal12']), float(request.POST['ototal13']),
                 float(request.POST['ototal14']), float(
                     request.POST['ototal21']), float(request.POST['ototal22']),
                 float(request.POST['ototal23']),
                 float(request.POST['ototal24']), float(
                     request.POST['ototal31']), float(request.POST['ototal32']),
                 float(request.POST['ototal33']),
                 float(request.POST['ototal34']), float(
                     request.POST['ototal41']), float(request.POST['ototal42']),
                 float(request.POST['ototal43']), float(request.POST['ototal44'])]
        btaxes = [float(request.POST['otax11']) / 100, float(request.POST['otax12']) / 100,
                  float(request.POST['otax13']) /
                  100, float(request.POST['otax14']) / 100,
                  float(request.POST['otax21']) /
                  100, float(request.POST['otax22']) / 100,
                  float(request.POST['otax23']) /
                  100, float(request.POST['otax24']) / 100,
                  float(request.POST['otax31']) /
                  100, float(request.POST['otax32']) / 100,
                  float(request.POST['otax33']) /
                  100, float(request.POST['otax34']) / 100,
                  float(request.POST['otax41']) /
                  100, float(request.POST['otax42']) / 100,
                  float(request.POST['otax43']) / 100, float(request.POST['otax44']) / 100]
        botaxamnt = [float(botot[0]) * btaxes[0], float(botot[1]) * btaxes[1], float(botot[2]) * btaxes[2],
                     float(botot[3]) * btaxes[3], float(botot[4]) *
                     btaxes[4], float(botot[5]) * btaxes[5],
                     float(botot[6]) * btaxes[6], float(botot[7]) *
                     btaxes[7], float(botot[8]) * btaxes[8],
                     float(botot[9]) * btaxes[9], float(botot[10]) *
                     btaxes[10], float(botot[11]) * btaxes[11],
                     float(botot[12]) * btaxes[12], float(botot[13]) *
                     btaxes[13], float(botot[14]) * btaxes[14],
                     float(botot[15]) * btaxes[15]]
        btaxamnt = [float(request.POST['taxamount11']), float(request.POST['taxamount12']),
                    float(request.POST['taxamount13']), float(
                        request.POST['taxamount14']),
                    float(request.POST['taxamount21']), float(
                        request.POST['taxamount22']),
                    float(request.POST['taxamount23']), float(
                        request.POST['taxamount24']),
                    float(request.POST['taxamount31']), float(
                        request.POST['taxamount32']),
                    float(request.POST['taxamount33']), float(
                        request.POST['taxamount34']),
                    float(request.POST['taxamount41']), float(
                        request.POST['taxamount42']),
                    float(request.POST['taxamount43']), float(request.POST['taxamount44'])]
        for (p, q, cq, tt, ot, tx, otx) in zip(bproduct, bqty, bcreqty, btot, botot, btaxamnt, botaxamnt):
            try:
                if inventory.objects.get(name=p, cid=cmp1):
                    invent = inventory.objects.get(name=p, cid=cmp1)
                    if int(q) > int(cq):
                        invent.initialqty = int(
                            invent.initialqty) - (int(q) - int(cq))
                        invent.save()
                        cxq = float(invent.cost) * (float(q) - float(cq))
                        invenacnt = invent.invacnt
                        if accounts1.objects.get(name=invenacnt, cid=cmp1):
                            accoun = accounts1.objects.get(
                                name=invenacnt, cid=cmp1)
                            accoun.balance = accoun.balance - cxq
                            accoun.save()
                        elif accounts.objects.get(name=invenacnt, cid=cmp1):
                            accoun = accounts.objects.get(name=invenacnt, cid=cmp1)
                            accoun.balance = accoun.balance - cxq
                            accoun.save()
                        else:
                            pass
                        newtot = tt - ot
                        if accounts1.objects.get(name=invent.incomeacnt, cid=cmp1):
                            accoun = accounts1.objects.get(
                                name=invent.incomeacnt, cid=cmp1)
                            accoun.balance = accoun.balance + newtot
                            accoun.save()
                        elif accounts.objects.get(name=invent.incomeacnt, cid=cmp1):
                            accoun = accounts.objects.get(
                                name=invent.incomeacnt, cid=cmp1)
                            accoun.balance = accoun.balance + newtot
                            accoun.save()
                        else:
                            pass
                        if accounts1.objects.get(name=invent.expacnt, cid=cmp1):
                            accoun = accounts1.objects.get(
                                name=invent.expacnt, cid=cmp1)
                            accoun.balance = accoun.balance + cxq
                            accoun.save()
                        elif accounts.objects.get(name=invent.expacnt, cid=cmp1):
                            accoun = accounts.objects.get(
                                name=invent.expacnt, cid=cmp1)
                            accoun.balance = accoun.balance + cxq
                            accoun.save()
                        else:
                            pass
                        if placosupply == cmp1.state:
                            tax = tx / 2
                            otax = otx / 2
                            accocgst = accounts1.objects.get(
                                name='Output CGST', cid=cmp1)
                            ta = tax - otax
                            accocgst.balance = accocgst.balance + ta
                            accocgst.save()
                            accosgst = accounts1.objects.get(
                                name='Output SGST', cid=cmp1)
                            accosgst.balance = accosgst.balance + ta
                            accosgst.save()
                        else:
                            accoigst = accounts1.objects.get(
                                name='Output IGST', cid=cmp1)
                            ta = tx - otx
                            accoigst.balance = accoigst.balance + ta
                            accoigst.save()
                    elif int(q) < int(cq):
                        invent.initialqty = int(
                            invent.initialqty) + (int(cq) - int(q))
                        invent.save()
                        cxq = float(invent.cost) * (float(cq) - float(q))
                        invenacnt = invent.invacnt
                        if accounts1.objects.get(name=invenacnt, cid=cmp1):
                            accoun = accounts1.objects.get(
                                name=invenacnt, cid=cmp1)
                            accoun.balance = accoun.balance + cxq
                            accoun.save()
                        elif accounts.objects.get(name=invenacnt, cid=cmp1):
                            accoun = accounts.objects.get(name=invenacnt, cid=cmp1)
                            accoun.balance = accoun.balance + cxq
                            accoun.save()
                        else:
                            pass
                        newtot = ot - tt
                        if accounts1.objects.get(name=invent.incomeacnt, cid=cmp1):
                            accoun = accounts1.objects.get(
                                name=invent.incomeacnt, cid=cmp1)
                            accoun.balance = accoun.balance - newtot
                            accoun.save()
                        elif accounts.objects.get(name=invent.incomeacnt, cid=cmp1):
                            accoun = accounts.objects.get(
                                name=invent.incomeacnt, cid=cmp1)
                            accoun.balance = accoun.balance - newtot
                            accoun.save()
                        else:
                            pass
                        if accounts1.objects.get(name=invent.expacnt, cid=cmp1):
                            accoun = accounts1.objects.get(
                                name=invent.expacnt, cid=cmp1)
                            accoun.balance = accoun.balance - cxq
                            accoun.save()
                        elif accounts.objects.get(name=invent.expacnt, cid=cmp1):
                            accoun = accounts.objects.get(
                                name=invent.expacnt, cid=cmp1)
                            accoun.balance = accoun.balance - cxq
                            accoun.save()
                        else:
                            pass
                        if placosupply == cmp1.state:
                            tax = tx / 2
                            otax = otx / 2
                            accocgst = accounts1.objects.get(
                                name='Output CGST', cid=cmp1)
                            ta = otax - tax
                            accocgst.balance = accocgst.balance - ta
                            accocgst.save()
                            accosgst = accounts1.objects.get(
                                name='Output SGST', cid=cmp1)
                            accosgst.balance = accosgst.balance - ta
                            accosgst.save()
                        else:
                            accoigst = accounts1.objects.get(
                                name='Output IGST', cid=cmp1)
                            ta = otx - tx
                            accoigst.balance = accoigst.balance - ta
                            accoigst.save()
            except:
                pass
            try:
                if noninventory.objects.get(name=p, cid=cmp1):
                    noninvent = noninventory.objects.get(name=p, cid=cmp1)
                    if int(q) > int(cq):
                        noninvent.qty = int(noninvent.qty) - (int(q) - int(cq))
                        noninvent.save()
                        newtot = tt - ot
                        if accounts1.objects.get(name=noninvent.income, cid=cmp1):
                            accoun = accounts1.objects.get(
                                name=noninvent.income, cid=cmp1)
                            accoun.balance = accoun.balance + newtot
                            accoun.save()
                        elif accounts.objects.get(name=noninvent.income, cid=cmp1):
                            accoun = accounts.objects.get(
                                name=noninvent.income, cid=cmp1)
                            accoun.balance = accoun.balance + newtot
                            accoun.save()
                        else:
                            pass
                        if placosupply == cmp1.state:
                            tax = tx / 2
                            otax = otx / 2
                            accocgst = accounts1.objects.get(
                                name='Output CGST', cid=cmp1)
                            ta = tax - otax
                            accocgst.balance = accocgst.balance + ta
                            accocgst.save()
                            accosgst = accounts1.objects.get(
                                name='Output SGST', cid=cmp1)
                            accosgst.balance = accosgst.balance + ta
                            accosgst.save()
                        else:
                            accoigst = accounts1.objects.get(
                                name='Output IGST', cid=cmp1)
                            ta = tx - otx
                            accoigst.balance = accoigst.balance + ta
                            accoigst.save()
                    elif int(q) < int(cq):
                        noninvent.qty = int(noninvent.qty) + (int(cq) - int(q))
                        noninvent.save()
                        newtot = ot - tt
                        if accounts1.objects.get(name=noninvent.income, cid=cmp1):
                            accoun = accounts1.objects.get(
                                name=noninvent.income, cid=cmp1)
                            accoun.balance = accoun.balance - newtot
                            accoun.save()
                        elif accounts.objects.get(name=noninvent.income, cid=cmp1):
                            accoun = accounts.objects.get(
                                name=noninvent.income, cid=cmp1)
                            accoun.balance = accoun.balance - newtot
                            accoun.save()
                        else:
                            pass
                        if placosupply == cmp1.state:
                            tax = tx / 2
                            otax = otx / 2
                            accocgst = accounts1.objects.get(
                                name='Output CGST', cid=cmp1)
                            ta = otax - tax
                            accocgst.balance = accocgst.balance - ta
                            accocgst.save()
                            accosgst = accounts1.objects.get(
                                name='Output SGST', cid=cmp1)
                            accosgst.balance = accosgst.balance - ta
                            accosgst.save()
                        else:
                            accoigst = accounts1.objects.get(
                                name='Output IGST', cid=cmp1)
                            ta = otx - tx
                            accoigst.balance = accoigst.balance - ta
                            accoigst.save()
                    else:
                        pass
            except:
                pass
        salo.saledate = request.POST['saledate']
        salo.salename = request.POST['salename']
        salo.saleaddress = request.POST['saleaddress']
        salo.saleemail = request.POST['saleemail']
        salo.salepay = request.POST['salepay']
        salo.salerefno = request.POST['salerefno']
        salo.saledeposit = request.POST['saledeposit']
        salo.salepro = request.POST['salepro']
        salo.salesplace = request.POST['salesplace']
        salo.salehsn = request.POST['salehsn']
        salo.saleqty = request.POST['saleqty']
        salo.saleprice = request.POST['saleprice']
        salo.saaletotal = request.POST['saaletotal']
        salo.saletax = request.POST['tax']
        salo.category2 = request.POST['category2']
        salo.categoryhsn2 = request.POST['categoryhsn2']
        salo.descrptin2 = request.POST['descrptin2']
        salo.catqty2 = request.POST['catqty2']
        salo.catprice2 = request.POST['catprice2']
        salo.cattotal2 = request.POST['cattotal2']
        salo.tax1 = request.POST['tax1']
        salo.category3 = request.POST['category3']
        salo.categoryhsn3 = request.POST['categoryhsn3']
        salo.descrptin3 = request.POST['descrptin3']
        salo.catqty3 = request.POST['catqty3']
        salo.catprice3 = request.POST['catprice3']
        salo.cattotal3 = request.POST['cattotal3']
        salo.tax2 = request.POST['tax2']
        salo.category4 = request.POST['category4']
        salo.categoryhsn4 = request.POST['categoryhsn4']
        salo.descrptin4 = request.POST['descrptin4']
        salo.catqty4 = request.POST['catqty4']
        salo.catprice4 = request.POST['catprice4']
        salo.cattotal4 = request.POST['cattotal4']
        salo.tax3 = request.POST['tax3']
        salo.salesubtotal = request.POST['salesubtotal']
        salo.saletaxamount = request.POST['saletaxamount']
        salo.salegrandtotal = request.POST['salegrandtotal']
        salo.save()
        return redirect('gosalesrecords')
    except:
        return redirect('gosalesrecords')


@login_required(login_url='regcomp')
def gotimeactivity(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        customers = customer.objects.filter(cid=cmp1).all()
        context = {'customers': customers, 'cmp1': cmp1}
        return render(request, 'app1/timeactivity.html', context)
    except:
        return redirect('goexpences')


@login_required(login_url='regcomp')
def timectivity(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        timee = timeact(timdate=request.POST['timdate'],
                        timename=request.POST['timename'],
                        timecust=request.POST['timecust'],
                        timecheck=request.POST['timecheck'],
                        timebill=request.POST['timebill'],
                        timecheckk=request.POST['timecheckk'],
                        timestart=request.POST['timestart'],
                        timeend=request.POST['timeend'],
                        tyme=request.POST['tyme'],
                        timedes=request.POST['timedes'], cid=cmp1)

        timee.save()
        return redirect('goexpences')
    except:
        return redirect('goexpences')


@login_required(login_url='regcomp')
def deletetime(request, id):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        sl = timeact.objects.get(timeactid=id, cid=cmp1)
        sl.delete()
        return redirect('goexpences')
    except:
        return redirect('goexpences')


@login_required(login_url='regcomp')
def edittime(request, id):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        tym = timeact.objects.get(timeactid=id, cid=cmp1)
        tym.save()
        return render(request, 'app1/edittimeact.html', {'time': tym, 'cmp1': cmp1})
    except:
        return redirect('goexpences')


@login_required(login_url='regcomp')
def updattime(request, id):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        tymo = timeact.objects.get(timeactid=id, cid=cmp1)
        tymo.timdate = request.POST['timdate']
        tymo.timename = request.POST['timename']
        tymo.timecust = request.POST['timecust']
        tymo.timecheck = request.POST['timecheck']
        tymo.timebill = request.POST['timebill']
        tymo.timecheckk = request.POST['timecheckk']
        tymo.timestart = request.POST['timestart']
        tymo.timeend = request.POST['timeend']
        tymo.tyme = request.POST['tyme']
        tymo.timedes = request.POST['timedes']
        tymo.save()
        return redirect('goexpences')
    except:
        return redirect('goexpences')


@login_required(login_url='regcomp')
def myacc(request, id):
    try:
        myact = timeact.objects.get(id=id)
        subject = 'welcome to GFG world'
        message = f'Hi {myact.firstname}, thank you for registering in geeksforgeeks.'
        email_from = settings.EMAIL_HOST_USER
        recipient_list = [myact.email, ]
        send_mail(subject, message, email_from, recipient_list)
        return render(request, 'app1/dashbord.html')
    except:
        return redirect('godash')


@login_required(login_url='regcomp')
def gosaletimeactivity(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        customers = customer.objects.filter(cid=cmp1).all()
        suppliers = supplier.objects.filter(cid=cmp1).all()
        context = {'cmp1': cmp1, 'customers': customers,
                   'suppliers': suppliers}
        return render(request, 'app1/salestimeactivity.html', context)
    except:
        return redirect('gosalesrecords')


@login_required(login_url='regcomp')
def saletimectivity(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        timsale = timeactsale(timdatesale=request.POST['timdatesale'],
                              timenamesale=request.POST['timenamesale'],
                              timecustsale=request.POST['timecustsale'],
                              timechecksale=request.POST['timechecksale'],
                              timebillsale=request.POST['timebillsale'],
                              timecheckksale=request.POST['timecheckksale'],
                              timestartsale=request.POST['timestartsale'],
                              timeendsale=request.POST['timeendsale'],
                              tymesale=request.POST['tymesale'],
                              timedessale=request.POST['timedessale'], cid=cmp1)
        timsale.save()
        return redirect('gosalesrecords')
    except:
        return redirect('gosalesrecords')


@login_required(login_url='regcomp')
def edittimesale(request, id):
    try:
        cmp1 = company.objects.get(cid=request.session['uid'])
        tym = timeactsale.objects.get(timeactsaleid=id, cid=cmp1)
        context = {'time': tym, 'cmp1': cmp1}
        return render(request, 'app1/edittimesale.html', context)
    except:
        return redirect('gosalesrecords')


@login_required(login_url='regcomp')
def updattimesale(request, id):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        tymo = timeactsale.objects.get(timeactsaleid=id, cid=cmp1)
        tymo.timdatesale = request.POST['timdatesale']
        tymo.timenamesale = request.POST['timenamesale']
        tymo.timecustsale = request.POST['timecustsale']
        tymo.timechecksale = request.POST['timechecksale']
        tymo.timebillsale = request.POST['timebillsale']
        tymo.timecheckksale = request.POST['timecheckksale']
        tymo.timestartsale = request.POST['timestartsale']
        tymo.timeendsale = request.POST['timeendsale']
        tymo.tymesale = request.POST['tymesale']
        tymo.timedessale = request.POST['timedessale']
        tymo.save()
        return redirect('gosalesrecords')
    except:
        return redirect('gosalesrecords')


@login_required(login_url='regcomp')
def deletetimesale(request, id):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        sl = timeactsale.objects.get(timeactsaleid=id, cid=cmp1)
        sl.delete()
        return redirect('gosalesrecords')
    except:
        return redirect('gosalesrecords')


@login_required(login_url='regcomp')
def gocheque(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        inv = inventory.objects.filter(cid=cmp1).all()
        bun = bundle.objects.filter(cid=cmp1).all()
        noninv = noninventory.filter(cid=cmp1).all()
        ser = service.objects.filter(cid=cmp1).all()
        customers = customer.objects.filter(cid=cmp1).all()
        suppliers = supplier.objects.filter(cid=cmp1).all()

        context = {'cmp1': cmp1, 'customers': customers, 'inv': inv, 'bun': bun, 'noninv': noninv, 'ser': ser,
                   'customers': customers, 'suppliers': suppliers}

        return render(request, 'app1/cheque.html', context)
    except:
        return redirect('goexpences')


@login_required(login_url='regcomp')
def cheque(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        chee = Cheqs(payee=request.POST['payee'],
                     bankacc=request.POST['bankacc'],
                     mailaddr=request.POST['mailaddr'],
                     paydate=request.POST['paydate'],
                     chequeno=request.POST['chequeno'],
                     category1=request.POST['category1'],
                     descrptin1=request.POST['descrptin1'],
                     catqty1=request.POST['catqty1'],
                     catprice1=request.POST['catprice1'],
                     cattotal1=request.POST['cattotal1'],

                     category2=request.POST['category2'],
                     descrptin2=request.POST['descrptin2'],
                     catqty2=request.POST['catqty2'],
                     catprice2=request.POST['catprice2'],
                     cattotal2=request.POST['cattotal2'],

                     category3=request.POST['category3'],
                     descrptin3=request.POST['descrptin3'],
                     catqty3=request.POST['catqty3'],
                     catprice3=request.POST['catprice3'],
                     cattotal3=request.POST['cattotal3'],

                     category4=request.POST['category4'],
                     descrptin4=request.POST['descrptin4'],
                     catqty4=request.POST['catqty4'],
                     catprice4=request.POST['catprice4'],
                     cattotal4=request.POST['cattotal4'],

                     product=request.POST['product'], hsn=request.POST['hsn'],
                     description=request.POST['description'],
                     qty=request.POST['qty'], price=request.POST['price'], total=request.POST['total'],
                     product2=request.POST['product2'], hsn2=request.POST['hsn2'],
                     description2=request.POST['description2'],
                     qty2=request.POST['qty2'], price2=request.POST['price2'], total2=request.POST['total2'],
                     product3=request.POST['product3'], hsn3=request.POST['hsn3'],
                     description3=request.POST['description3'],
                     qty3=request.POST['qty3'], price3=request.POST['price3'], total3=request.POST['total3'],
                     product4=request.POST['product4'], hsn4=request.POST['hsn4'],
                     description4=request.POST['description4'],
                     qty4=request.POST['qty4'], price4=request.POST['price4'], total4=request.POST['total4'],

                     subtotal=request.POST['subtotal'],
                     tax=request.POST['tax'],
                     tax2=request.POST['tax2'], tax3=request.POST['tax3'], tax4=request.POST['tax4'],
                     taxamount=request.POST['taxamount'],
                     grandtotal=request.POST['grandtotal'], cid=cmp1)
        chee.save()
        return redirect('goexpences')
    except:
        return redirect('goexpences')


@login_required(login_url='regcomp')
def editcheque(request, id):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        tym = Cheqs.objects.get(chequeid=id, cid=cmp1)
        inv = inventory.objects.filter(cid=cmp1).all()
        bun = bundle.objects.filter(cid=cmp1).all()
        noninv = noninventory.objects.filter(cid=cmp1).all()
        ser = service.objects.filter(cid=cmp1).all()
        context = {'che': tym, 'inv': inv, 'cmp1': cmp1,
                   'bun': bun, 'noninv': noninv, 'ser': ser}
        return render(request, 'app1/editcheque.html', context)
    except:
        return redirect('goexpences')


@login_required(login_url='regcomp')
def gogst(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        repay = recordpay.objects.filter(cid=cmp1)
        iigst = accounts1.objects.get(name='Input IGST', cid=cmp1)
        oigst = accounts1.objects.get(name='Output IGST', cid=cmp1)
        icgst = accounts1.objects.get(name='Input CGST', cid=cmp1)
        ocgst = accounts1.objects.get(name='Output CGST', cid=cmp1)
        isgst = accounts1.objects.get(name='Input SGST', cid=cmp1)
        osgst = accounts1.objects.get(name='Output SGST', cid=cmp1)
        outigst = round(oigst.balance, 2)
        cgst = round(0 - icgst.balance, 2)
        sgst = round(0 - isgst.balance, 2)
        igst = round(0 - iigst.balance, 2)
        cgstbalance = 0.0
        sgstbalance = 0.0
        igstbalance = 0.0
        try:
            if ocgst.balance != 0:
                if cgst > ocgst.balance:
                    cgst = round(cgst - ocgst.balance, 2)
                    cgstbalance = 0.0
                else:
                    cgstbalance = ocgst.balance - cgst
                    cgst = 0.0
        except:
            pass
        try:
            if osgst.balance != 0:
                if sgst > ocgst.balance:
                    sgst = round(sgst - ocgst.balance, 2)
                    sgstbalance = 0.0
                else:
                    sgstbalance = osgst.balance - sgst
                    sgst = 0.0
        except:
            pass
        try:
            if oigst.balance != 0:
                if cgst > 0.0:
                    if cgst > outigst:
                        cgst = round(cgst - outigst, 2)
                        cgst.save()
                        igstbalance = 0.0
                    elif cgst < outigst:
                        taxbal = round(outigst - cgst, 2)
                        cgst = float(0)
                        if sgst > 0.0:
                            if sgst > taxbal:
                                sgst = round(sgst - taxbal, 2)
                                igstbalance = 0.0
                            elif sgst < taxbal:
                                taxbal1 = round(taxbal - sgst, 2)
                                sgst = float(0)
                                if igst > 0:
                                    if igst > taxbal1:
                                        igst = round(igst - taxbal1, 2)
                                        igstbalance = 0.0
                                    else:
                                        igstbalance = round(taxbal1 - igst, 2)
                                        igst = float(0)
                            else:
                                pass
                        else:
                            pass
                    else:
                        pass
                elif sgst > 0.0:
                    if sgst > outigst:
                        sgst = round(sgst - outigst, 2)
                        igstbalance = 0.0
                    elif sgst < outigst:
                        taxbal = round(outigst - sgst, 2)
                        sgst = 0.0
                        if igst > 0:
                            if igst > taxbal:
                                igst = round(igst - taxbal, 2)
                                igstbalance = 0.0
                            else:
                                igstbalance = round(taxbal - igst, 2)
                                igst = 0.0
                elif cgst == 0.0 and sgst == 0.0:
                    if igst > outigst:
                        igst = round(igst - outigst)
                        igstbalance = 0.0
                    else:
                        igstbalance = round(outigst - igst, 2)
                        igst = 0.0
                else:
                    pass
        except:
            pass
        payable = cgstbalance + sgstbalance + igstbalance
        context = {'repay': repay, 'iigst': iigst, 'oigst': oigst, 'icgst': icgst, 'ocgst': ocgst, 'isgst': isgst,
                   'osgst': osgst, 'cgst': cgst, 'sgst': sgst, 'igst': igst, 'payable': payable}
        return render(request, 'app1/gst.html', context)
    except:
        return redirect('godash')


@login_required(login_url='regcomp')
def govat(request):
    cmp1 = company.objects.get(id=request.session["uid"])
    return render(request, 'app1/vat.html', {'cmp1': cmp1})


@login_required(login_url='regcomp')
def goservicetax(request):
    cmp1 = company.objects.get(id=request.session["uid"])
    return render(request, 'app1/servicetax.html', {'cmp1': cmp1})


@login_required(login_url='regcomp')
def addtax(request):
    cmp1 = company.objects.get(id=request.session["uid"])
    return render(request, 'app1/addtax.html', {'cmp1': cmp1})


@login_required(login_url='regcomp')
def gotaxpaymentgst(request):
    cmp1 = company.objects.get(id=request.session["uid"])
    return render(request, 'app1/taxpaymentgst.html', {'cmp1': cmp1})


@login_required(login_url='regcomp')
def repay(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        repay = recordpay(textname=request.POST['textnam'], paymentdate=request.POST['endingdate'],
                          recordamount=request.POST['amt'], recordmemo=request.POST['memo'], cid=cmp1)
        repay.save()
        return render(request, 'app1/dashboard.html', {'cmp1': cmp1})
    except:
        return redirect('godash')


@login_required(login_url='regcomp')
def bankrecon1(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        reco1 = recon1.objects.filter(cid=cmp1).all()
        reco = recon1(accounttype=request.POST['accounttype'], beginningbalance=request.POST['beginningbalance'],
                      endingbalance=request.POST['endingbalance'],
                      endingdate=request.POST['endingdate'], edat=request.POST['dat'],
                      serchar=request.POST['serchar'],
                      expacc=request.POST['expacc'],
                      idat1=request.POST['dat1'],
                      intear=request.POST['intear'],
                      incacc=request.POST['incacc'], cid=cmp1)
        reco.save()
        re1 = recon1.objects.last()

        context = {'reco1': reco1, 're1': re1, 'cmp1': cmp1}
        return render(request, 'app1/bankrecon1.html', context)
    except:
        return redirect('gobankrecon')


@login_required(login_url='regcomp')
def gobankrecon2(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        return render(request, 'app1/dashboard.html', {'cmp1': cmp1})
    except:
        return redirect('gobankrecon')


@login_required(login_url='regcomp')
def updatecheque(request, id):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        chek = Cheqs.objects.get(chequeid=id, cid=cmp1)
        chek.payee = request.POST['payee']
        chek.bankacc = request.POST['bankacc']
        chek.mailaddr = request.POST['mailaddr']
        chek.paydate = request.POST['paydate']
        chek.chequeno = request.POST['chequeno']

        chek.category1 = request.POST['category1']
        chek.descrptin1 = request.POST['descrptin1']
        chek.catqty1 = request.POST['catqty1']
        chek.catprice1 = request.POST['catprice1']
        chek.cattotal1 = request.POST['cattotal1']

        chek.category2 = request.POST['category2']
        chek.descrptin2 = request.POST['descrptin2']
        chek.catqty2 = request.POST['catqty2']
        chek.catprice2 = request.POST['catprice2']
        chek.cattotal2 = request.POST['cattotal2']

        chek.category3 = request.POST['category3']
        chek.descrptin3 = request.POST['descrptin3']
        chek.catqty3 = request.POST['catqty3']
        chek.catprice3 = request.POST['catprice3']
        chek.cattotal3 = request.POST['cattotal3']

        chek.category4 = request.POST['category4']
        chek.descrptin4 = request.POST['descrptin4']
        chek.catqty4 = request.POST['catqty4']
        chek.catprice4 = request.POST['catprice4']
        chek.cattotal4 = request.POST['cattotal4']

        chek.product = request.POST['product']
        chek.hsn = request.POST['hsn']
        chek.qty = request.POST['qty']
        chek.price = request.POST['price']
        chek.total = request.POST['total']
        chek.product2 = request.POST['product2']
        chek.hsn2 = request.POST['hsn2']
        chek.qty2 = request.POST['qty2']
        chek.price2 = request.POST['price2']
        chek.total2 = request.POST['total2']
        chek.product3 = request.POST['product3']
        chek.hsn3 = request.POST['hsn3']
        chek.qty3 = request.POST['qty3']
        chek.price3 = request.POST['price3']
        chek.total3 = request.POST['total3']
        chek.product4 = request.POST['product4']
        chek.hsn4 = request.POST['hsn4']
        chek.qty4 = request.POST['qty4']
        chek.price4 = request.POST['price4']
        chek.total4 = request.POST['total4']

        chek.subtotal = request.POST['subtotal']
        chek.tax = request.POST['tax']
        chek.tax2 = request.POST['tax2']
        chek.tax3 = request.POST['tax3']
        chek.tax4 = request.POST['tax4']
        chek.taxamount = request.POST['taxamount']
        chek.grandtotal = request.POST['grandtotal']
        chek.save()
        return redirect('goexpences')
    except:
        return redirect('goexpences')


@login_required(login_url='regcomp')
def deletecheque(request, id):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        sl = Cheqs.objects.get(chequeid=id, cid=cmp1)
        sl.delete()
        return redirect('goexpences')
    except:
        return redirect('goexpences')


@login_required(login_url='regcomp')
def invindex(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        inv1 = invoice.objects.filter(cid=cmp1).all()
        customers = customer.objects.filter(cid=cmp1).all()
        # assigning key to a variable(not necessary)
        context = {'inv': inv1, 'cmp1': cmp1, 'customers': customers}
        return render(request, 'app1/addinvoics.html', context)
    except:
        return redirect('goinvoices')


@login_required(login_url='regcomp')
def invcreate(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        inv2 = invoice(customername=request.POST['customername'], email=request.POST['email'],
                       invoiceno='1000',
                       invoicedate=request.POST['invoicedate'],
                       terms=request.POST['terms'], duedate=request.POST['duedate'], bname=request.POST['bname'],
                       placosupply=request.POST['placosupply'],
                       product=request.POST['product'], hsn=request.POST['hsn'],
                       description=request.POST['description'],
                       qty=request.POST['qty'], price=request.POST['price'], total=float(
                           request.POST['total']),
                       tax=request.POST['tax'],
                       product2=request.POST['product2'], hsn2=request.POST['hsn2'],
                       description2=request.POST['description2'],
                       qty2=request.POST['qty2'], price2=request.POST['price2'], total2=float(
                           request.POST['total2']),
                       tax2=request.POST['tax2'],
                       product3=request.POST['product3'], hsn3=request.POST['hsn3'],
                       description3=request.POST['description3'],
                       qty3=request.POST['qty3'], price3=request.POST['price3'], total3=float(
                           request.POST['total3']),
                       tax3=request.POST['tax3'],
                       product4=request.POST['product4'], hsn4=request.POST['hsn4'],
                       description4=request.POST['description4'],
                       qty4=request.POST['qty4'], price4=request.POST['price4'], total4=float(
                           request.POST['total4']),
                       subtotal=float(request.POST['subtotal']),
                       tax4=request.POST['tax4'], grandtotal=float(
                           request.POST['grandtotal']),
                       amtrecvd=request.POST['amtrecvd'], baldue=float(
                           request.POST['baldue']),
                       taxamount=float(request.POST['taxamount']), cid=cmp1)
        inv2.save()
        inv2.invoiceno = int(inv2.invoiceno) + inv2.invoiceid
        inv2.save()
        placosupply = request.POST['placosupply']
        grandtotal = float(request.POST['grandtotal'])
        accoun = accounts1.objects.get(
            name='Account Receivable(Debtors)', cid=cmp1)
        taxamnt = [float(request.POST['taxamount1']), float(request.POST['taxamount2']),
                   float(request.POST['taxamount3']),
                   float(request.POST['taxamount4'])]
        try:
            if grandtotal != 0:
                accoun.balance = round(accoun.balance + grandtotal, 2)
                accoun.save()
        except:
            pass
        product = [request.POST['product'], request.POST['product2'], request.POST['product3'],
                   request.POST['product4']]
        qty = [request.POST['qty'], request.POST['qty2'],
               request.POST['qty3'], request.POST['qty4']]
        totals = [float(request.POST['total']), float(request.POST['total2']), float(request.POST['total3']),
                  float(request.POST['total4'])]
        for (p, q, tl, tx) in zip(product, qty, totals, taxamnt):
            try:
                if inventory.objects.get(name=p, cid=cmp1):
                    invent = inventory.objects.get(name=p, cid=cmp1)
                    invent.initialqty = int(invent.initialqty) - int(q)
                    invent.save()
                    cos = float(invent.cost)
                    invenacnt = invent.invacnt
                    if accounts1.objects.get(name=invenacnt, cid=cmp1):
                        accoun = accounts1.objects.get(
                            name=invenacnt, cid=cmp1)
                        accoun.balance = accoun.balance - (float(q) * cos)
                        accoun.save()
                    elif accounts.objects.get(name=invenacnt, cid=cmp1):
                        accoun = accounts.objects.get(name=invenacnt, cid=cmp1)
                        accoun.balance = accoun.balance - (float(q) * cos)
                        accoun.save()
                    else:
                        pass
                    try:
                        if accounts.objects.get(name=invent.incomeacnt, cid=cmp1):
                            acc = accounts.objects.get(
                                name=invent.incomeacnt, cid=cmp1)
                            acc.balance = acc.balance + tl
                            acc.save()
                    except:
                        pass
                    try:
                        if accounts1.objects.get(name=invent.incomeacnt, cid=cmp1):
                            acc = accounts1.objects.get(
                                name=invent.incomeacnt, cid=cmp1)
                            acc.balance = acc.balance + tl
                            acc.save()
                    except:
                        pass
                    try:
                        if accounts.objects.get(name=invent.expacnt, cid=cmp1):
                            acc = accounts.objects.get(
                                name=invent.expacnt, cid=cmp1)
                            cxq = float(invent.cost) * float(q)
                            acc.balance = acc.balance + cxq
                            acc.save()
                    except:
                        pass
                    try:
                        if accounts1.objects.get(name=invent.expacnt, cid=cmp1):
                            acc = accounts1.objects.get(
                                name=invent.expacnt, cid=cmp1)
                            cxq = float(invent.cost) * float(q)
                            acc.balance = acc.balance + cxq
                            acc.save()
                    except:
                        pass
                    try:
                        if placosupply == cmp1.state:
                            tax = tx / 2
                            accocgst = accounts1.objects.get(
                                name='Output CGST', cid=cmp1)
                            accocgst.balance = accocgst.balance + tax
                            accocgst.save()
                            accosgst = accounts1.objects.get(
                                name='Output SGST', cid=cmp1)
                            accosgst.balance = accosgst.balance + tax
                            accosgst.save()
                        else:
                            accoigst = accounts1.objects.get(
                                name='Output IGST', cid=cmp1)
                            accoigst.balance = accoigst.balance + tx
                            accoigst.save()
                    except:
                        pass
            except:
                pass
            try:
                if noninventory.objects.get(name=p, cid=cmp1):
                    noninvent = noninventory.objects.get(name=p, cid=cmp1)
                    noninvent.qty = int(noninvent.qty) - int(q)
                    noninvent.save()
                    try:
                        if accounts.objects.get(name=noninvent.income, cid=cmp1):
                            acc = accounts.objects.get(
                                name=noninvent.income, cid=cmp1)
                            acc.balance = acc.balance + tl
                            acc.save()
                    except:
                        pass
                    try:
                        if accounts1.objects.get(name=noninvent.income, cid=cmp1):
                            acc = accounts1.objects.get(
                                name=noninvent.income, cid=cmp1)
                            acc.balance = acc.balance + tl
                            acc.save()
                    except:
                        pass
                    try:
                        if placosupply == cmp1.state:
                            tax = tx / 2
                            accocgst = accounts1.objects.get(
                                name='Output CGST', cid=cmp1)
                            accocgst.balance = accocgst.balance + tax
                            accocgst.save()
                            accosgst = accounts1.objects.get(
                                name='Output SGST', cid=cmp1)
                            accosgst.balance = accosgst.balance + tax
                            accosgst.save()
                        else:
                            accoigst = accounts1.objects.get(
                                name='Output IGST', cid=cmp1)
                            accoigst.balance = accoigst.balance + tx
                            accoigst.save()
                    except:
                        pass
            except:
                pass
        buntaxamnt = [float(request.POST['taxamount11']), float(request.POST['taxamount12']),
                      float(request.POST['taxamount13']), float(
                          request.POST['taxamount14']),
                      float(request.POST['taxamount21']), float(
                          request.POST['taxamount22']),
                      float(request.POST['taxamount23']), float(
                          request.POST['taxamount24']),
                      float(request.POST['taxamount31']), float(
                          request.POST['taxamount32']),
                      float(request.POST['taxamount33']), float(
                          request.POST['taxamount34']),
                      float(request.POST['taxamount41']), float(
                          request.POST['taxamount42']),
                      float(request.POST['taxamount43']), float(request.POST['taxamount44'])]
        bunproduct = [request.POST['product11'], request.POST['product12'], request.POST['product13'],
                      request.POST['product14'], request.POST['product21'], request.POST['product22'],
                      request.POST['product23'], request.POST['product24'], request.POST['product31'],
                      request.POST['product32'], request.POST['product33'], request.POST['product34'],
                      request.POST['product41'], request.POST['product42'], request.POST['product43'],
                      request.POST['product44']]
        bunqty = [request.POST['qty11'], request.POST['qty12'], request.POST['qty13'], request.POST['qty14'],
                  request.POST['qty21'], request.POST['qty22'], request.POST['qty23'], request.POST['qty24'],
                  request.POST['qty31'], request.POST['qty32'], request.POST['qty33'], request.POST['qty34'],
                  request.POST['qty41'], request.POST['qty42'], request.POST['qty43'], request.POST['qty44']]
        buntotals = [float(request.POST['total11']), float(request.POST['total12']), float(request.POST['total13']),
                     float(request.POST['total14']), float(
                         request.POST['total21']), float(request.POST['total22']),
                     float(request.POST['total23']),
                     float(request.POST['total24']), float(
                         request.POST['total31']), float(request.POST['total32']),
                     float(request.POST['total33']),
                     float(request.POST['total34']), float(
                         request.POST['total41']), float(request.POST['total42']),
                     float(request.POST['total43']),
                     float(request.POST['total44'])]
        for (p, q, tl, tx) in zip(bunproduct, bunqty, buntotals, buntaxamnt):
            try:
                if inventory.objects.get(name=p, cid=cmp1):
                    invent = inventory.objects.get(name=p, cid=cmp1)
                    invent.initialqty = int(invent.initialqty) - int(q)
                    invent.save()
                    cos = float(invent.cost)
                    invenacnt = invent.invacnt
                    if accounts1.objects.get(name=invenacnt, cid=cmp1):
                        accoun = accounts1.objects.get(
                            name=invenacnt, cid=cmp1)
                        accoun.balance = accoun.balance - (float(q) * cos)
                        accoun.save()
                    elif accounts.objects.get(name=invenacnt, cid=cmp1):
                        accoun = accounts.objects.get(name=invenacnt, cid=cmp1)
                        accoun.balance = accoun.balance - (float(q) * cos)
                        accoun.save()
                    else:
                        pass
                    try:
                        if accounts.objects.get(name=invent.incomeacnt, cid=cmp1):
                            acc = accounts.objects.get(
                                name=invent.incomeacnt, cid=cmp1)
                            acc.balance = acc.balance + tl
                            acc.save()
                    except:
                        pass
                    try:
                        if accounts1.objects.get(name=invent.incomeacnt, cid=cmp1):
                            acc = accounts1.objects.get(
                                name=invent.incomeacnt, cid=cmp1)
                            acc.balance = acc.balance + tl
                            acc.save()
                    except:
                        pass
                    try:
                        if accounts.objects.get(name=invent.expacnt, cid=cmp1):
                            acc = accounts.objects.get(
                                name=invent.expacnt, cid=cmp1)
                            cxq = float(invent.cost) * float(q)
                            acc.balance = acc.balance + cxq
                            acc.save()
                    except:
                        pass
                    try:
                        if accounts1.objects.get(name=invent.expacnt, cid=cmp1):
                            acc = accounts1.objects.get(
                                name=invent.expacnt, cid=cmp1)
                            cxq = float(invent.cost) * float(q)
                            acc.balance = acc.balance + cxq
                            acc.save()
                    except:
                        pass
                    try:
                        if placosupply == cmp1.state:
                            tax = tx / 2
                            accocgst = accounts1.objects.get(
                                name='Output CGST', cid=cmp1)
                            accocgst.balance = accocgst.balance + tax
                            accocgst.save()
                            accosgst = accounts1.objects.get(
                                name='Output SGST', cid=cmp1)
                            accosgst.balance = accosgst.balance + tax
                            accosgst.save()
                        else:
                            accoigst = accounts1.objects.get(
                                name='Output IGST', cid=cmp1)
                            accoigst.balance = accoigst.balance + tx
                            accoigst.save()
                    except:
                        pass
            except:
                pass
            try:
                if noninventory.objects.get(name=p, cid=cmp1):
                    noninvent = noninventory.objects.get(name=p, cid=cmp1)
                    noninvent.qty = int(noninvent.qty) - int(q)
                    noninvent.save()
                    try:
                        if accounts.objects.get(name=noninvent.income, cid=cmp1):
                            acc = accounts.objects.get(
                                name=noninvent.income, cid=cmp1)
                            acc.balance = acc.balance + tl
                            acc.save()
                    except:
                        pass
                    try:
                        if accounts1.objects.get(name=noninvent.income, cid=cmp1):
                            acc = accounts1.objects.get(
                                name=noninvent.income, cid=cmp1)
                            acc.balance = acc.balance + tl
                            acc.save()
                    except:
                        pass
                    try:
                        if placosupply == cmp1.state:
                            tax = tx / 2
                            accocgst = accounts1.objects.get(
                                name='Output CGST', cid=cmp1)
                            accocgst.balance = accocgst.balance + tax
                            accocgst.save()
                            accosgst = accounts1.objects.get(
                                name='Output SGST', cid=cmp1)
                            accosgst.balance = accosgst.balance + tax
                            accosgst.save()
                        else:
                            accoigst = accounts1.objects.get(
                                name='Output IGST', cid=cmp1)
                            accoigst.balance = accoigst.balance + tx
                            accoigst.save()
                    except:
                        pass
            except:
                pass
        return redirect('goinvoices')
    except:
        return redirect('goinvoices')


@login_required(login_url='regcomp')
def viewinvoice(request, id):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        styles = customize.objects.get(selected='selected', cid=cmp1)
        if styles.template == 'classic':
            invto = invoice.objects.get(invoiceid=id, cid=cmp1)
            context = {'invoice': invto, 'cmp1': cmp1, 'styles': styles}
            return render(request, 'app1/show.html', context)
        elif styles.template == 'modern':
            invto = invoice.objects.get(invoiceid=id, cid=cmp1)
            context = {'invoice': invto, 'cmp1': cmp1, 'styles': styles}
            return render(request, 'app1/showmodern.html', context)
        elif styles.template == 'fresh':
            invto = invoice.objects.get(invoiceid=id, cid=cmp1)
            context = {'invoice': invto, 'cmp1': cmp1, 'styles': styles}
            return render(request, 'app1/showfresh.html', context)
        elif styles.template == 'friendly':
            invto = invoice.objects.get(invoiceid=id, cid=cmp1)
            context = {'invoice': invto, 'cmp1': cmp1, 'styles': styles}
            return render(request, 'app1/showfriendly.html', context)
        else:
            return redirect('goinvoices')
    except:
        return redirect('goinvoices')


@login_required(login_url='regcomp')
def editinvoice(request, id):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        invo3 = invoice.objects.get(invoiceid=id, cid=cmp1)
        inv = inventory.objects.filter(cid=cmp1).all()
        bun = bundle.objects.filter(cid=cmp1).all()
        noninv = noninventory.objects.filter(cid=cmp1).all()
        ser = service.objects.filter(cid=cmp1).all()
        context = {'invoice': invo3, 'cmp1': cmp1, 'inv': inv,
                   'noninv': noninv, 'bun': bun, 'ser': ser}
        return render(request, 'app1/editinvoice.html', context)
    except:
        return redirect('goinvoices')


@login_required(login_url='regcomp')
def updateinvoice(request, id):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        invoi = invoice.objects.get(invoiceid=id, cid=cmp1)
        creqty = [invoi.qty, invoi.qty2, invoi.qty3, invoi.qty4]
        qty = [request.POST['qty'], request.POST['qty2'],
               request.POST['qty3'], request.POST['qty4']]
        taxes = [float(invoi.tax) / 100, float(invoi.tax2) / 100,
                 float(invoi.tax3) / 100, float(invoi.tax4) / 100]
        otaxamnt = [float(invoi.total) * taxes[0], float(invoi.total2) * taxes[1],
                    float(invoi.total3) * taxes[2],
                    float(invoi.total4) * taxes[3]]
        taxamnt = [float(request.POST['taxamount0']), float(request.POST['taxamount1']),
                   float(request.POST['taxamount2']),
                   float(request.POST['taxamount3'])]
        otot = [float(invoi.total), float(invoi.total2),
                float(invoi.total3), float(invoi.total4)]
        tot = [float(request.POST['total']), float(request.POST['total2']), float(request.POST['total3']),
               float(request.POST['total4'])]
        product = [request.POST['product'], request.POST['product2'], request.POST['product3'],
                   request.POST['product4']]
        placosupply = request.POST['placosupply']
        for (p, q, cq, tt, ot, tx, otx) in zip(product, qty, creqty, tot, otot, taxamnt, otaxamnt):
            try:
                if inventory.objects.get(name=p, cid=cmp1):
                    invent = inventory.objects.get(name=p, cid=cmp1)
                    if int(q) > int(cq):
                        invent.initialqty = int(
                            invent.initialqty) - (int(q) - int(cq))
                        invent.save()
                        cxq = float(invent.cost) * (float(q) - float(cq))
                        newtot = tt - ot
                        invenacnt = invent.invacnt
                        # invacnt
                        if accounts1.objects.get(name=invenacnt, cid=cmp1):
                            accoun = accounts1.objects.get(
                                name=invenacnt, cid=cmp1)
                            accoun.balance = accoun.balance - cxq
                            accoun.save()
                        elif accounts.objects.get(name=invenacnt, cid=cmp1):
                            accoun = accounts.objects.get(
                                name=invenacnt, cid=cmp1)
                            accoun.balance = accoun.balance - cxq
                            accoun.save()
                        else:
                            pass
                        # incomeacnt
                        try:
                            if accounts.objects.get(name=invent.incomeacnt, cid=cmp1):
                                acc = accounts.objects.get(
                                    name=invent.incomeacnt, cid=cmp1)
                                acc.balance = acc.balance + newtot
                                acc.save()
                        except:
                            pass
                        try:
                            if accounts1.objects.get(name=invent.incomeacnt, cid=cmp1):
                                acc = accounts1.objects.get(
                                    name=invent.incomeacnt, cid=cmp1)
                                acc.balance = acc.balance + newtot
                                acc.save()
                        except:
                            pass
                        # expacnt
                        try:
                            if accounts.objects.get(name=invent.expacnt, cid=cmp1):
                                acc = accounts.objects.get(
                                    name=invent.expacnt, cid=cmp1)
                                acc.balance = acc.balance + cxq
                                acc.save()
                        except:
                            pass
                        try:
                            if accounts1.objects.get(name=invent.expacnt, cid=cmp1):
                                acc = accounts1.objects.get(
                                    name=invent.expacnt, cid=cmp1)
                                acc.balance = acc.balance + cxq
                                acc.save()
                        except:
                            pass
                        if placosupply == cmp1.state:
                            tax = tx / 2
                            otax = otx / 2
                            accocgst = accounts1.objects.get(
                                name='Output CGST', cid=cmp1)
                            ta = tax - otax
                            accocgst.balance = accocgst.balance + ta
                            accocgst.save()
                            accosgst = accounts1.objects.get(
                                name='Output SGST', cid=cmp1)
                            accosgst.balance = accosgst.balance + ta
                            accosgst.save()
                        else:
                            accoigst = accounts1.objects.get(
                                name='Output IGST', cid=cmp1)
                            ta = tx - otx
                            accoigst.balance = accoigst.balance + ta
                            accoigst.save()
                    elif int(q) < int(cq):
                        invent.initialqty = int(
                            invent.initialqty) + (int(cq) - int(q))
                        invent.save()
                        cxq = float(invent.cost) * (float(cq) - float(q))
                        newtot = ot - tt
                        invenacnt = invent.invacnt
                        # invacnt
                        if accounts1.objects.get(name=invenacnt, cid=cmp1):
                            accoun = accounts1.objects.get(
                                name=invenacnt, cid=cmp1)
                            accoun.balance = accoun.balance + cxq
                            accoun.save()
                        elif accounts.objects.get(name=invenacnt, cid=cmp1):
                            accoun = accounts.objects.get(
                                name=invenacnt, cid=cmp1)
                            accoun.balance = accoun.balance + cxq
                            accoun.save()
                        else:
                            pass
                        # incomeacnt
                        try:
                            if accounts.objects.get(name=invent.incomeacnt, cid=cmp1):
                                acc = accounts.objects.get(
                                    name=invent.incomeacnt, cid=cmp1)
                                acc.balance = acc.balance - newtot
                                acc.save()
                        except:
                            pass
                        try:
                            if accounts1.objects.get(name=invent.incomeacnt, cid=cmp1):
                                acc = accounts1.objects.get(
                                    name=invent.incomeacnt, cid=cmp1)
                                acc.balance = acc.balance - newtot
                                acc.save()
                        except:
                            pass
                        # expacnt
                        try:
                            if accounts.objects.get(name=invent.expacnt, cid=cmp1):
                                acc = accounts.objects.get(
                                    name=invent.expacnt, cid=cmp1)
                                acc.balance = acc.balance - cxq
                                acc.save()
                        except:
                            pass
                        try:
                            if accounts1.objects.get(name=invent.expacnt, cid=cmp1):
                                acc = accounts1.objects.get(
                                    name=invent.expacnt, cid=cmp1)
                                acc.balance = acc.balance - cxq
                                acc.save()
                        except:
                            pass
                        if placosupply == cmp1.state:
                            tax = tx / 2
                            otax = otx / 2
                            accocgst = accounts1.objects.get(
                                name='Output CGST', cid=cmp1)
                            ta = otax - tax
                            accocgst.balance = accocgst.balance - ta
                            accocgst.save()
                            accosgst = accounts1.objects.get(
                                name='Output SGST', cid=cmp1)
                            accosgst.balance = accosgst.balance - ta
                            accosgst.save()
                        else:
                            accoigst = accounts1.objects.get(
                                name='Output IGST', cid=cmp1)
                            ta = otx - tx
                            accoigst.balance = accoigst.balance - ta
                            accoigst.save()
            except:
                pass
            try:
                if noninventory.objects.get(name=p, cid=cmp1):
                    noninvent = noninventory.objects.get(name=p, cid=cmp1)
                    if int(q) > int(cq):
                        newtot = tt - ot
                        try:
                            if accounts.objects.get(name=noninvent.income, cid=cmp1):
                                acc = accounts.objects.get(
                                    name=noninvent.income, cid=cmp1)
                                acc.balance = acc.balance + newtot
                                acc.save()
                        except:
                            pass
                        try:
                            if accounts1.objects.get(name=noninvent.income, cid=cmp1):
                                acc = accounts1.objects.get(
                                    name=noninvent.income, cid=cmp1)
                                acc.balance = acc.balance + newtot
                                acc.save()
                        except:
                            pass
                        if placosupply == cmp1.state:
                            tax = tx / 2
                            otax = otx / 2
                            accocgst = accounts1.objects.get(
                                name='Output CGST', cid=cmp1)
                            ta = tax - otax
                            accocgst.balance = accocgst.balance + ta
                            accocgst.save()
                            accosgst = accounts1.objects.get(
                                name='Output SGST', cid=cmp1)
                            accosgst.balance = accosgst.balance + ta
                            accosgst.save()
                        else:
                            accoigst = accounts1.objects.get(
                                name='Output IGST', cid=cmp1)
                            ta = tx - otx
                            accoigst.balance = accoigst.balance + ta
                            accoigst.save()
                    elif int(q) < int(cq):
                        newtot = ot - tt
                        try:
                            if accounts.objects.get(name=noninvent.income, cid=cmp1):
                                acc = accounts.objects.get(
                                    name=noninvent.income, cid=cmp1)
                                acc.balance = acc.balance - newtot
                                acc.save()
                        except:
                            pass
                        try:
                            if accounts1.objects.get(name=noninvent.income, cid=cmp1):
                                acc = accounts1.objects.get(
                                    name=noninvent.income, cid=cmp1)
                                acc.balance = acc.balance - newtot
                                acc.save()
                        except:
                            pass
                        if placosupply == cmp1.state:
                            tax = tx / 2
                            otax = otx / 2
                            accocgst = accounts1.objects.get(
                                name='Output CGST', cid=cmp1)
                            ta = otax - tax
                            accocgst.balance = accocgst.balance - ta
                            accocgst.save()
                            accosgst = accounts1.objects.get(
                                name='Output SGST', cid=cmp1)
                            accosgst.balance = accosgst.balance - ta
                            accosgst.save()
                        else:
                            accoigst = accounts1.objects.get(
                                name='Output IGST', cid=cmp1)
                            ta = otx - tx
                            accoigst.balance = accoigst.balance - ta
                            accoigst.save()
                    else:
                        pass
            except:
                pass
        bproduct = [request.POST['product11'], request.POST['product12'], request.POST['product13'],
                    request.POST['product14'], request.POST['product21'], request.POST['product22'],
                    request.POST['product23'],
                    request.POST['product24'], request.POST['product31'], request.POST['product32'],
                    request.POST['product33'],
                    request.POST['product34'], request.POST['product41'], request.POST['product42'],
                    request.POST['product43'],
                    request.POST['product44']]
        bqty = [request.POST['qty11'], request.POST['qty12'], request.POST['qty13'], request.POST['qty14'],
                request.POST['qty21'], request.POST['qty22'], request.POST['qty23'], request.POST['qty24'],
                request.POST['qty31'], request.POST['qty32'], request.POST['qty33'], request.POST['qty34'],
                request.POST['qty41'], request.POST['qty42'], request.POST['qty43'], request.POST['qty44']]
        bcreqty = [request.POST['creqty11'], request.POST['creqty12'], request.POST['creqty13'],
                   request.POST['creqty14'],
                   request.POST['creqty21'], request.POST['creqty22'], request.POST['creqty23'],
                   request.POST['creqty24'],
                   request.POST['creqty31'], request.POST['creqty32'], request.POST['creqty33'],
                   request.POST['creqty34'],
                   request.POST['creqty41'], request.POST['creqty42'], request.POST['creqty43'],
                   request.POST['creqty44']]
        btot = [float(request.POST['total11']), float(request.POST['total12']), float(request.POST['total13']),
                float(request.POST['total14']), float(
                    request.POST['total21']), float(request.POST['total22']),
                float(request.POST['total23']),
                float(request.POST['total24']), float(
                    request.POST['total31']), float(request.POST['total32']),
                float(request.POST['total33']),
                float(request.POST['total34']), float(
                    request.POST['total41']), float(request.POST['total42']),
                float(request.POST['total43']),
                float(request.POST['total44'])]
        botot = [float(request.POST['ototal11']), float(request.POST['ototal12']), float(request.POST['ototal13']),
                 float(request.POST['ototal14']), float(
                     request.POST['ototal21']), float(request.POST['ototal22']),
                 float(request.POST['ototal23']),
                 float(request.POST['ototal24']), float(
                     request.POST['ototal31']), float(request.POST['ototal32']),
                 float(request.POST['ototal33']),
                 float(request.POST['ototal34']), float(
                     request.POST['ototal41']), float(request.POST['ototal42']),
                 float(request.POST['ototal43']), float(request.POST['ototal44'])]
        btaxes = [float(request.POST['otax11']) / 100, float(request.POST['otax12']) / 100,
                  float(request.POST['otax13']) /
                  100, float(request.POST['otax14']) / 100,
                  float(request.POST['otax21']) /
                  100, float(request.POST['otax22']) / 100,
                  float(request.POST['otax23']) /
                  100, float(request.POST['otax24']) / 100,
                  float(request.POST['otax31']) /
                  100, float(request.POST['otax32']) / 100,
                  float(request.POST['otax33']) /
                  100, float(request.POST['otax34']) / 100,
                  float(request.POST['otax41']) /
                  100, float(request.POST['otax42']) / 100,
                  float(request.POST['otax43']) / 100, float(request.POST['otax44']) / 100]
        botaxamnt = [float(botot[0]) * btaxes[0], float(botot[1]) * btaxes[1], float(botot[2]) * btaxes[2],
                     float(botot[3]) * btaxes[3], float(botot[4]) *
                     btaxes[4], float(botot[5]) * btaxes[5],
                     float(botot[6]) * btaxes[6], float(botot[7]) *
                     btaxes[7], float(botot[8]) * btaxes[8],
                     float(botot[9]) * btaxes[9], float(botot[10]) *
                     btaxes[10], float(botot[11]) * btaxes[11],
                     float(botot[12]) * btaxes[12], float(botot[13]) *
                     btaxes[13], float(botot[14]) * btaxes[14],
                     float(botot[15]) * btaxes[15]]
        btaxamnt = [float(request.POST['taxamount11']), float(request.POST['taxamount12']),
                    float(request.POST['taxamount13']), float(
                        request.POST['taxamount14']),
                    float(request.POST['taxamount21']), float(
                        request.POST['taxamount22']),
                    float(request.POST['taxamount23']), float(
                        request.POST['taxamount24']),
                    float(request.POST['taxamount31']), float(
                        request.POST['taxamount32']),
                    float(request.POST['taxamount33']), float(
                        request.POST['taxamount34']),
                    float(request.POST['taxamount41']), float(
                        request.POST['taxamount42']),
                    float(request.POST['taxamount43']), float(request.POST['taxamount44'])]
        print(bcreqty)
        for (p, q, cq, tt, ot, tx, otx) in itertools.zip_longest(bproduct, bqty, bcreqty, btot, botot, btaxamnt, botaxamnt):
            try:
                if inventory.objects.get(name=p, cid=cmp1):
                    invent = inventory.objects.get(name=p, cid=cmp1)
                    if int(q) > int(cq):
                        invent.initialqty = int(
                            invent.initialqty) - (int(q) - int(cq))
                        invent.save()
                        cxq = float(invent.cost) * (float(q) - float(cq))
                        newtot = tt - ot
                        invenacnt = invent.invacnt
                        # invacnt
                        if accounts1.objects.get(name=invenacnt, cid=cmp1):
                            accoun = accounts1.objects.get(
                                name=invenacnt, cid=cmp1)
                            accoun.balance = accoun.balance - cxq
                            accoun.save()
                        elif accounts.objects.get(name=invenacnt, cid=cmp1):
                            accoun = accounts.objects.get(
                                name=invenacnt, cid=cmp1)
                            accoun.balance = accoun.balance - cxq
                            accoun.save()
                        else:
                            pass
                        # incomeacnt
                        try:
                            if accounts.objects.get(name=invent.incomeacnt, cid=cmp1):
                                acc = accounts.objects.get(
                                    name=invent.incomeacnt, cid=cmp1)
                                acc.balance = acc.balance + newtot
                                acc.save()
                        except:
                            pass
                        try:
                            if accounts1.objects.get(name=invent.incomeacnt, cid=cmp1):
                                acc = accounts1.objects.get(
                                    name=invent.incomeacnt, cid=cmp1)
                                acc.balance = acc.balance + newtot
                                acc.save()
                        except:
                            pass
                        # expacnt
                        try:
                            if accounts.objects.get(name=invent.expacnt, cid=cmp1):
                                acc = accounts.objects.get(
                                    name=invent.expacnt, cid=cmp1)
                                acc.balance = acc.balance + cxq
                                acc.save()
                        except:
                            pass
                        try:
                            if accounts1.objects.get(name=invent.expacnt, cid=cmp1):
                                acc = accounts1.objects.get(
                                    name=invent.expacnt, cid=cmp1)
                                acc.balance = acc.balance + cxq
                                acc.save()
                        except:
                            pass
                        if placosupply == cmp1.state:
                            tax = tx / 2
                            otax = otx / 2
                            accocgst = accounts1.objects.get(
                                name='Output CGST', cid=cmp1)
                            ta = tax - otax
                            accocgst.balance = accocgst.balance + ta
                            accocgst.save()
                            accosgst = accounts1.objects.get(
                                name='Output SGST', cid=cmp1)
                            accosgst.balance = accosgst.balance + ta
                            accosgst.save()
                        else:
                            accoigst = accounts1.objects.get(
                                name='Output IGST', cid=cmp1)
                            ta = tx - otx
                            accoigst.balance = accoigst.balance + ta
                            accoigst.save()
                    elif int(q) < int(cq):
                        invent.initialqty = int(
                            invent.initialqty) + (int(cq) - int(q))
                        invent.save()
                        cxq = float(invent.cost) * (float(cq) - float(q))
                        newtot = ot - tt
                        invenacnt = invent.invacnt
                        # invacnt
                        if accounts1.objects.get(name=invenacnt, cid=cmp1):
                            accoun = accounts1.objects.get(
                                name=invenacnt, cid=cmp1)
                            accoun.balance = accoun.balance + cxq
                            accoun.save()
                        elif accounts.objects.get(name=invenacnt, cid=cmp1):
                            accoun = accounts.objects.get(
                                name=invenacnt, cid=cmp1)
                            accoun.balance = accoun.balance + cxq
                            accoun.save()
                        else:
                            pass
                        # incomeacnt
                        try:
                            if accounts.objects.get(name=invent.incomeacnt, cid=cmp1):
                                acc = accounts.objects.get(
                                    name=invent.incomeacnt, cid=cmp1)
                                acc.balance = acc.balance - newtot
                                acc.save()
                        except:
                            pass
                        try:
                            if accounts1.objects.get(name=invent.incomeacnt, cid=cmp1):
                                acc = accounts1.objects.get(
                                    name=invent.incomeacnt, cid=cmp1)
                                acc.balance = acc.balance - newtot
                                acc.save()
                        except:
                            pass
                        # expacnt
                        try:
                            if accounts.objects.get(name=invent.expacnt, cid=cmp1):
                                acc = accounts.objects.get(
                                    name=invent.expacnt, cid=cmp1)
                                acc.balance = acc.balance - cxq
                                acc.save()
                        except:
                            pass
                        try:
                            if accounts1.objects.get(name=invent.expacnt, cid=cmp1):
                                acc = accounts1.objects.get(
                                    name=invent.expacnt, cid=cmp1)
                                acc.balance = acc.balance - cxq
                                acc.save()
                        except:
                            pass
                        if placosupply == cmp1.state:
                            tax = tx / 2
                            otax = otx / 2
                            accocgst = accounts1.objects.get(
                                name='Output CGST', cid=cmp1)
                            ta = otax - tax
                            accocgst.balance = accocgst.balance - ta
                            accocgst.save()
                            accosgst = accounts1.objects.get(
                                name='Output SGST', cid=cmp1)
                            accosgst.balance = accosgst.balance - ta
                            accosgst.save()
                        else:
                            accoigst = accounts1.objects.get(
                                name='Output IGST', cid=cmp1)
                            ta = otx - tx
                            accoigst.balance = accoigst.balance - ta
                            accoigst.save()
            except:
                pass
            try:
                if noninventory.objects.get(name=p, cid=cmp1):
                    noninvent = noninventory.objects.get(name=p, cid=cmp1)
                    if int(q) > int(cq):
                        newtot = tt - ot
                        try:
                            if accounts.objects.get(name=noninvent.income, cid=cmp1):
                                acc = accounts.objects.get(
                                    name=noninvent.income, cid=cmp1)
                                acc.balance = acc.balance + newtot
                                acc.save()
                        except:
                            pass
                        try:
                            if accounts1.objects.get(name=noninvent.income, cid=cmp1):
                                acc = accounts1.objects.get(
                                    name=noninvent.income, cid=cmp1)
                                acc.balance = acc.balance + newtot
                                acc.save()
                        except:
                            pass
                        if placosupply == cmp1.state:
                            tax = tx / 2
                            otax = otx / 2
                            accocgst = accounts1.objects.get(
                                name='Output CGST', cid=cmp1)
                            ta = tax - otax
                            accocgst.balance = accocgst.balance + ta
                            accocgst.save()
                            accosgst = accounts1.objects.get(
                                name='Output SGST', cid=cmp1)
                            accosgst.balance = accosgst.balance + ta
                            accosgst.save()
                        else:
                            accoigst = accounts1.objects.get(
                                name='Output IGST', cid=cmp1)
                            ta = tx - otx
                            accoigst.balance = accoigst.balance + ta
                            accoigst.save()
                    elif int(q) < int(cq):
                        newtot = ot - tt
                        try:
                            if accounts.objects.get(name=noninvent.income, cid=cmp1):
                                acc = accounts.objects.get(
                                    name=noninvent.income, cid=cmp1)
                                acc.balance = acc.balance - newtot
                                acc.save()
                        except:
                            pass
                        try:
                            if accounts1.objects.get(name=noninvent.income, cid=cmp1):
                                acc = accounts1.objects.get(
                                    name=noninvent.income, cid=cmp1)
                                acc.balance = acc.balance - newtot
                                acc.save()
                        except:
                            pass
                        if placosupply == cmp1.state:
                            tax = tx / 2
                            otax = otx / 2
                            accocgst = accounts1.objects.get(
                                name='Output CGST', cid=cmp1)
                            ta = otax - tax
                            accocgst.balance = accocgst.balance - ta
                            accocgst.save()
                            accosgst = accounts1.objects.get(
                                name='Output SGST', cid=cmp1)
                            accosgst.balance = accosgst.balance - ta
                            accosgst.save()
                        else:
                            accoigst = accounts1.objects.get(
                                name='Output IGST', cid=cmp1)
                            ta = otx - tx
                            accoigst.balance = accoigst.balance - ta
                            accoigst.save()
                    else:
                        pass
            except:
                pass
        grandtotal = float(request.POST['grandtotal'])
        accont = accounts1.objects.get(
            name='Account Receivable(Debtors)', cid=cmp1)
        if grandtotal > invoi.grandtotal:
            accont.balance = accont.balance + (grandtotal - invoi.grandtotal)
            accont.save()
        elif grandtotal < invoi.grandtotal:
            accont.balance = accont.balance - (invoi.grandtotal - grandtotal)
            accont.save()
        else:
            pass
        invoi.customername = request.POST['customername']
        invoi.email = request.POST['email']
        invoi.terms = request.POST['terms']
        invoi.invoicedate = request.POST['invoicedate']
        invoi.duedate = request.POST['duedate']
        invoi.bname = request.POST['bname']
        invoi.placosupply = request.POST['placosupply']
        invoi.product = request.POST['product']
        invoi.hsn = request.POST['hsn']
        invoi.qty = request.POST['qty']
        invoi.price = request.POST['price']
        invoi.total = float(request.POST['total'])
        invoi.tax = request.POST['tax']
        invoi.product2 = request.POST['product2']
        invoi.hsn2 = request.POST['hsn2']
        invoi.qty2 = request.POST['qty2']
        invoi.price2 = request.POST['price2']
        invoi.total2 = request.POST['total2']
        invoi.tax2 = request.POST['tax2']
        invoi.product3 = request.POST['product3']
        invoi.hsn3 = request.POST['hsn3']
        invoi.qty3 = request.POST['qty3']
        invoi.price3 = request.POST['price3']
        invoi.total3 = request.POST['total3']
        invoi.tax3 = request.POST['tax3']
        invoi.product4 = request.POST['product4']
        invoi.hsn4 = request.POST['hsn4']
        invoi.qty4 = request.POST['qty4']
        invoi.price4 = request.POST['price4']
        invoi.total4 = request.POST['total4']
        invoi.tax4 = request.POST['tax4']
        invoi.subtotal = float(request.POST['subtotal'])
        invoi.grandtotal = float(request.POST['grandtotal'])
        invoi.amtrecvd = request.POST['amtrecvd']
        invoi.baldue = float(request.POST['baldue'])
        invoi.taxamount = float(request.POST['taxamount'])
        invoi.save()
        return redirect('goinvoices')
    except:
        return redirect('goinvoices')


@login_required(login_url='regcomp')
def deleteinvoice(request, id):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        inoi = invoice.objects.get(invoiceid=id, cid=cmp1)
        inoi.delete()
        return redirect('goinvoices')
    except:
        return redirect('goinvoices')


@login_required(login_url='regcomp')
def gobills(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        suppliers = supplier.objects.filter(cid=cmp1)
        inv = inventory.objects.filter(cid=cmp1)
        bun = bundle.objects.filter(cid=cmp1)
        noninv = noninventory.objects.filter(cid=cmp1)
        ser = service.objects.filter(cid=cmp1)
        expence = expences.objects.filter(cid=cmp1)
        catlist = viewlist()
        toda = date.today()
        tod = toda.strftime("%d-%m-%y")
        context = {'suppliers': suppliers, 'cmp1': cmp1, 'inv': inv, 'bun': bun, 'noninv': noninv, 'ser': ser,
                   'tod': tod,
                   'expence': expence, 'catlist': catlist}
        try:
            accoun = accounts.objects.filter(cid=cmp1)
            context['accoun'] = accoun
        except:
            pass
        return render(request, 'app1/bill.html', context)
    except:
        return redirect('godash')


@login_required(login_url='regcomp')
def billcreate(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        bill2 = bills(payee=request.POST['payee'], paymacnt=request.POST['paymacnt'], paymdate=request.POST['paymdate'],
                      paymmethod=request.POST['paymmethod'], refno='1000', totamt=request.POST['totamt'],

                      category1=request.POST['category1'],
                      descrptin1=request.POST['descrptin1'],
                      catqty1=request.POST['catqty1'],
                      catprice1=request.POST['catprice1'],
                      cattotal1=request.POST['cattotal1'],

                      category2=request.POST['category2'],
                      descrptin2=request.POST['descrptin2'],
                      catqty2=request.POST['catqty2'],
                      catprice2=request.POST['catprice2'],
                      cattotal2=request.POST['cattotal2'],

                      category3=request.POST['category3'],
                      descrptin3=request.POST['descrptin3'],
                      catqty3=request.POST['catqty3'],
                      catprice3=request.POST['catprice3'],
                      cattotal3=request.POST['cattotal3'],

                      category4=request.POST['category4'],
                      descrptin4=request.POST['descrptin4'],
                      catqty4=request.POST['catqty4'],
                      catprice4=request.POST['catprice4'],
                      cattotal4=request.POST['cattotal4'],

                      product=request.POST['product'], hsn=request.POST['hsn'],
                      description=request.POST['description'],
                      qty=request.POST['qty'], price=request.POST['price'], total=request.POST['total'],
                      product2=request.POST['product2'], hsn2=request.POST['hsn2'],
                      description2=request.POST['description2'],
                      qty2=request.POST['qty2'], price2=request.POST['price2'], total2=request.POST['total2'],
                      product3=request.POST['product3'], hsn3=request.POST['hsn3'],
                      description3=request.POST['description3'],
                      qty3=request.POST['qty3'], price3=request.POST['price3'], total3=request.POST['total3'],
                      product4=request.POST['product4'], hsn4=request.POST['hsn4'],
                      description4=request.POST['description4'],
                      qty4=request.POST['qty4'], price4=request.POST['price4'], total4=request.POST['total4'],

                      subtotal=request.POST['subtotal'],
                      tax=request.POST['tax'], tax2=request.POST['tax2'], tax3=request.POST['tax3'],
                      tax4=request.POST['tax4'], taxamount=request.POST['taxamount'],
                      grandtotal=request.POST['grandtotal'], cid=cmp1)
        bill2.save()
        bill2.refno = int(bill2.refno) + bill2.billid
        bill2.save()
        grandtotal = float(request.POST['grandtotal'])
        acc = accounts1.objects.get(
            name='Accounts Payable(Creditors)', cid=cmp1)
        if grandtotal != 0:
            if accounts1.objects.get(name='Accounts Payable(Creditors)', cid=cmp1):
                acc.balance = acc.balance - grandtotal
                acc.save()
            else:
                pass
        else:
            pass
        paymacnt = request.POST['paymacnt']
        try:
            if accounts1.objects.get(name=paymacnt, cid=cmp1):
                acc = accounts1.objects.get(name=paymacnt, cid=cmp1)
                acc.balance = acc.balance - grandtotal
                acc.save()
        except:
            pass
        try:
            if accounts.objects.get(name=paymacnt, cid=cmp1):
                acc = accounts.objects.get(name=paymacnt, cid=cmp1)
                acc.balance = acc.balance - grandtotal
                acc.save()
        except:
            pass
        return redirect('goexpences')
    except:
        return redirect('goexpences')


@login_required(login_url='regcomp')
def viewbills(request, id):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        bil = bills.objects.get(billid=id, cid=cmp1)
        context = {'bill': bil, 'cmp1': cmp1}
        return render(request, 'app1/viewbills.html', context)
    except:
        return redirect('goexpences')


@login_required(login_url='regcomp')
def editbills(request, id):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        bill3 = bills.objects.get(billid=id, cid=cmp1)
        inv = inventory.objects.filter(cid=cmp1)
        bun = bundle.objects.filter(cid=cmp1)
        noninv = noninventory.objects.filter(cid=cmp1)
        ser = service.objects.filter(cid=cmp1)
        expence = expences.objects.filter(cid=cmp1)
        catlist = viewlist()
        acounts = accounts.objects.filter(cid=cmp1)
        context = {'bills': bill3, 'inv': inv, 'cmp1': cmp1, 'bun': bun, 'noninv': noninv, 'ser': ser,
                   'expence': expence, 'catlist': catlist, 'accoun': acounts}
        return render(request, 'app1/editbill.html', context)
    except:
        return redirect('goexpences')


@login_required(login_url='regcomp')
def updatebills(request, id):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        bil = bills.objects.get(billid=id, cid=cmp1)

        accs = accounts1.objects.get(
            name='Accounts Payable(Creditors)', cid=cmp1)
        try:
            if grandtotal > float(bil.grandtotal):
                newgrand = grandtotal - float(bil.grandtotal)
                accs.balance = accs.balance - newgrand
                accs.save()
            elif grandtotal < float(bil.grandtotal):
                newgrand = float(bil.grandtotal) - grandtotal
                accs.balance = accs.balance + newgrand
                accs.save()
            else:
                pass
        except:
            pass
        paymacnt = request.POST['paymacnt']
        grandtotal = float(request.POST['grandtotal'])
        try:
            if accounts1.objects.get(name=paymacnt, cid=cmp1):
                acco = accounts1.objects.get(name=paymacnt, cid=cmp1)
                if paymacnt == bil.paymacnt:
                    if grandtotal > float(bil.grandtotal):
                        newgrand = grandtotal - float(bil.grandtotal)
                        acco.balance = acco.balance - newgrand
                        acco.save()
                    elif grandtotal < float(bil.grandtotal):
                        newgrand = float(bil.grandtotal) - grandtotal
                        acco.balance = acco.balance + newgrand
                        acco.save()
                    else:
                        pass
                else:
                    try:
                        if accounts.objects.get(name=bil.paymacnt, cid=cmp1):
                            acco1 = accounts.objects.get(
                                name=bil.paymacnt, cid=cmp1)
                            acco1.balance = acco1.balance - \
                                float(bil.grandtotal)
                            acco1.save()
                    except:
                        pass
                    try:
                        if accounts1.objects.get(name=bil.paymacnt, cid=cmp1):
                            acco1 = accounts1.objects.get(
                                name=bil.paymacnt, cid=cmp1)
                            acco1.balance = acco1.balance - \
                                float(bil.grandtotal)
                            acco1.save()
                    except:
                        pass
                    if grandtotal > float(bil.grandtotal):
                        newgrand = grandtotal
                        acco.balance = acco.balance + newgrand
                        acco.save()
                    elif grandtotal < float(bil.grandtotal):
                        newgrand = float(bil.grandtotal) - grandtotal
                        acco.balance = acco.balance + newgrand
                        acco.save()
                    else:
                        newgrand = float(bil.grandtotal)
                        acco.balance = acco.balance + newgrand
                        acco.save()
        except:
            pass
        try:
            if accounts.objects.get(name=paymacnt, cid=cmp1):
                acco = accounts.objects.get(name=paymacnt, cid=cmp1)
                if paymacnt == bil.paymacnt:
                    if grandtotal > float(bil.grandtotal):
                        newgrand = grandtotal - float(bil.grandtotal)
                        acco.balance = acco.balance - newgrand
                        acco.save()
                    elif grandtotal < float(bil.grandtotal):
                        newgrand = float(bil.grandtotal) - grandtotal
                        acco.balance = acco.balance + newgrand
                        acco.save()
                    else:
                        pass
                else:
                    try:
                        if accounts.objects.get(name=bil.paymacnt, cid=cmp1):
                            acco1 = accounts.objects.get(
                                name=bil.paymacnt, cid=cmp1)
                            acco1.balance = acco1.balance - \
                                float(bil.grandtotal)
                            acco1.save()
                    except:
                        pass
                    try:
                        if accounts1.objects.get(name=bil.paymacnt, cid=cmp1):
                            acco1 = accounts1.objects.get(
                                name=bil.paymacnt, cid=cmp1)
                            acco1.balance = acco1.balance - \
                                float(bil.grandtotal)
                            acco1.save()
                    except:
                        pass
                    if grandtotal > float(bil.grandtotal):
                        newgrand = grandtotal
                        acco.balance = acco.balance + newgrand
                        acco.save()
                    elif grandtotal < float(bil.grandtotal):
                        newgrand = float(bil.grandtotal) - grandtotal
                        acco.balance = acco.balance + newgrand
                        acco.save()
                    else:
                        newgrand = float(bil.grandtotal)
                        acco.balance = acco.balance + newgrand
                        acco.save()
        except:
            pass

        bil.paymacnt = request.POST['paymacnt']
        bil.paymdate = request.POST['paymdate']

        bil.paymmethod = request.POST['paymmethod']
        bil.totamt = request.POST['totamt']

        bil.category1 = request.POST['category1']
        bil.descrptin1 = request.POST['descrptin1']
        bil.catqty1 = request.POST['catqty1']
        bil.catprice1 = request.POST['catprice1']
        bil.cattotal1 = request.POST['cattotal1']

        bil.category2 = request.POST['category2']
        bil.descrptin2 = request.POST['descrptin2']
        bil.catqty2 = request.POST['catqty2']
        bil.catprice2 = request.POST['catprice2']
        bil.cattotal2 = request.POST['cattotal2']

        bil.category3 = request.POST['category3']
        bil.descrptin3 = request.POST['descrptin3']
        bil.catqty3 = request.POST['catqty3']
        bil.catprice3 = request.POST['catprice3']
        bil.cattotal3 = request.POST['cattotal3']

        bil.category4 = request.POST['category4']
        bil.descrptin4 = request.POST['descrptin4']
        bil.catqty4 = request.POST['catqty4']
        bil.catprice4 = request.POST['catprice4']
        bil.cattotal4 = request.POST['cattotal4']

        bil.product = request.POST['product']
        bil.hsn = request.POST['hsn']
        bil.description = request.POST['description']
        bil.qty = request.POST['qty']
        bil.price = request.POST['price']
        bil.total = request.POST['total']
        bil.product2 = request.POST['product2']
        bil.hsn2 = request.POST['hsn2']
        bil.description2 = request.POST['description2']
        bil.qty2 = request.POST['qty2']
        bil.price2 = request.POST['price2']
        bil.total2 = request.POST['total2']
        bil.product3 = request.POST['product3']
        bil.hsn3 = request.POST['hsn3']
        bil.description3 = request.POST['description3']
        bil.qty3 = request.POST['qty3']
        bil.price3 = request.POST['price3']
        bil.total3 = request.POST['total3']
        bil.product4 = request.POST['product4']
        bil.hsn4 = request.POST['hsn4']
        bil.description4 = request.POST['description4']
        bil.qty4 = request.POST['qty4']
        bil.price4 = request.POST['price4']
        bil.total4 = request.POST['total4']

        bil.subtotal = request.POST['subtotal']
        bil.tax = request.POST['tax']
        bil.tax2 = request.POST['tax2']
        bil.tax3 = request.POST['tax3']
        bil.tax4 = request.POST['tax4']
        bil.taxamount = request.POST['taxamount']
        bil.grandtotal = request.POST['grandtotal']
        bil.save()
        return redirect('goexpences')
    except:
        return redirect('goexpences')


@login_required(login_url='regcomp')
def deletebills(request, id):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        bill = bills.objects.get(billid=id, cid=cmp1)
        bill.delete()
        return redirect('goexpences')
    except:
        return redirect('goexpences')


@login_required(login_url='regcomp')
def gopay(request):
    return render(request, 'app1/payslip.html')


@login_required(login_url='regcomp')
def goacc(request):
    try:
        adg = addac.objects.filter(cid=cmp1)
        context = {'addac': adg}
        return render(request, 'app1/accsig.html', context)
    except:
        return redirect('godash')


@login_required(login_url='regcomp')
def myac(request):
    try:
        if request.method == "POST":
            accn = addac(acname=request.POST['acname'], email=request.POST['email'], usertype=request.POST['usertype'],
                         dateadded=datetime.now(), username=request.POST['username'], password=request.POST['password'])
            accn.save()

            username = request.POST.get('username')
            password = request.POST.get('password')
            subject = 'Finsys'
            message = f' Username: {accn.username}, thanks for registering'
            message2 = f' Password: {accn.password}, thanks for registering'

            email_from = settings.EMAIL_HOST_USER
            recipient_list = [accn.email, ]

            send_mail(subject, message, email_from, recipient_list)
            send_mail(subject, message2, email_from, recipient_list)

            return render(
                request,
                'app1/dashbord.html',
                {
                    'title': 'send an email'
                }
            )
        else:
            return render(
                request,
                'app1/dashbord.html',
                {
                    'title': 'send an email'
                }
            )
    except:
        return redirect('godash')


@login_required(login_url='regcomp')
def editmyac(request, id):
    try:
        accn1 = addac.objects.get(id=id)
        context = {'addac': accn1}
        return render(request, 'app1/editaccsig.html', context)
    except:
        return redirect('gogodash')


@login_required(login_url='regcomp')
def updatemyac(request, id):
    try:
        acn = addac.objects.get(id=id)
        acn.acname = request.POST['acname']
        acn.email = request.POST['email']
        acn.usertype = request.POST['usertype']
        acn.dateadded = request.POST['dateadded']
        acn.username = request.POST['username']
        acn.password = request.POST['password']
        acn.save()
        return render(request, 'app1/dashbord.html')
    except:
        return redirect('godash')


@login_required(login_url='regcomp')
def deletemyac(request, id):
    try:
        acn1 = addac.objects.get(id=id)
        acn1.delete()
        return render(request, 'app1/dashbord.html')
    except:
        return redirect('godash')


@login_required(login_url='regcomp')
def gosupcredit(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        suppliers = supplier.objects.all()
        supcredit = suplrcredit.objects.all()
        inv = inventory.objects.all()
        bun = bundle.objects.all()
        noninv = noninventory.objects.all()
        ser = service.objects.all()
        catlist = viewlist()
        toda = date.today()
        tod = toda.strftime("%Y-%m-%d")
        context = {'suppliers': suppliers, 'supcredit': supcredit, 'inv': inv, 'cmp1': cmp1, 'bun': bun,
                   'noninv': noninv, 'tod': tod,
                   'ser': ser, 'catlist': catlist}

        return render(request, 'app1/suppliercredit.html', context)
    except:
        return redirect('goexpences')


@login_required(login_url='regcomp')
def suplcreditcreate(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        p = request.POST['product']
        p2 = request.POST['product2']
        p3 = request.POST['product3']
        p4 = request.POST['product4']
        qty = [float(request.POST['qty']), float(request.POST['qty2']), float(request.POST['qty3']),
               float(request.POST['qty4'])]
        grandtotal = float(request.POST['grandtotal'])
        if grandtotal != 0:
            if accounts1.objects.get(name='Accounts Payable(Creditors)', cid=cmp1):
                acc = accounts1.objects.get(
                    name='Accounts Payable(Creditors)', cid=cmp1)
                acc.balance = round(acc.balance - grandtotal, 2)
                acc.save()
            else:
                pass
        else:
            pass
        tot = float(request.POST['total'])
        tot2 = float(request.POST['total2'])
        tot3 = float(request.POST['total3'])
        tot4 = float(request.POST['total4'])
        taxamnt1 = float(request.POST['taxamount1'])
        taxamnt2 = float(request.POST['taxamount2'])
        taxamnt3 = float(request.POST['taxamount3'])
        taxamnt4 = float(request.POST['taxamount4'])
        accou = accounts1.objects.get(name='Inventory Asset', cid=cmp1)
        payee = request.POST['supplier'].split()
        firstname = payee[0]
        lastname = payee[1]
        if len(payee) == 3:
            lastname = payee[1] + " " + payee[2]
            try:
                if supplier.objects.get(firstname=firstname, lastname=lastname):
                    supp = supplier.objects.get(
                        firstname=firstname, lastname=lastname)
                    placosupply = supp.state
            except:
                pass
            try:
                if customer.objects.get(firstname=firstname, lastname=lastname):
                    cust = customer.objects.get(
                        firstname=firstname, lastname=lastname)
                    placosupply = cust.state
            except:
                pass
        else:
            try:
                if supplier.objects.get(firstname=firstname, lastname=lastname):
                    supp = supplier.objects.get(
                        firstname=firstname, lastname=lastname)
                    placosupply = supp.state
            except:
                pass
            try:
                if customer.objects.get(firstname=firstname, lastname=lastname):
                    cust = customer.objects.get(
                        firstname=firstname, lastname=lastname)
                    placosupply = cust.state
            except:
                pass
        try:
            if inventory.objects.get(name=p, cid=cmp1):
                inv1 = inventory.objects.get(name=p, cid=cmp1)
                cxq = float(inv1.cost) * float(qty[0])
                if accounts1.objects.get(name=inv1.invacnt, cid=cmp1):
                    accou = accounts1.objects.get(name=inv1.invacnt, cid=cmp1)
                    accou.balance = accou.balance - cxq
                    accou.save()
                elif accounts.objects.get(name=inv1.invacnt, cid=cmp1):
                    accou = accounts.objects.get(name=inv1.invacnt, cid=cmp1)
                    accou.balance = accou.balance - cxq
                    accou.save()
                else:
                    pass
                inv1.initialqty = int(inv1.initialqty) - int(qty[0])
                inv1.save()
                if placosupply == cmp1.state:
                    tax = taxamnt1 / 2
                    accocgst = accounts1.objects.get(
                        name='Input CGST', cid=cmp1)
                    accocgst.balance = accocgst.balance + tax
                    accocgst.save()
                    accosgst = accounts1.objects.get(
                        name='Input SGST', cid=cmp1)
                    accosgst.balance = accosgst.balance + tax
                    accosgst.save()
                else:
                    accoigst = accounts1.objects.get(
                        name='Input IGST', cid=cmp1)
                    accoigst.balance = accoigst.balance + taxamnt1
                    accoigst.save()
                request.session["invcol"] = "red"
        except:
            pass
        try:
            if inventory.objects.get(name=p2, cid=cmp1):
                inv1 = inventory.objects.get(name=p2, cid=cmp1)
                cxq = float(inv1.cost) * float(qty[1])
                if accounts1.objects.get(name=inv1.invacnt, cid=cmp1):
                    accou = accounts1.objects.get(name=inv1.invacnt, cid=cmp1)
                    accou.balance = accou.balance - cxq
                    accou.save()
                elif accounts.objects.get(name=inv1.invacnt, cid=cmp1):
                    accou = accounts.objects.get(name=inv1.invacnt, cid=cmp1)
                    accou.balance = accou.balance - cxq
                    accou.save()
                else:
                    pass
                inv1.initialqty = int(inv1.initialqty) - int(qty[1])
                inv1.save()
                if placosupply == cmp1.state:
                    tax = taxamnt2 / 2
                    accocgst = accounts1.objects.get(
                        name='Input CGST', cid=cmp1)
                    accocgst.balance = accocgst.balance + tax
                    accocgst.save()
                    accosgst = accounts1.objects.get(
                        name='Input SGST', cid=cmp1)
                    accosgst.balance = accosgst.balance + tax
                    accosgst.save()
                else:
                    accoigst = accounts1.objects.get(
                        name='Input IGST', cid=cmp1)
                    accoigst.balance = accoigst.balance + taxamnt2
                    accoigst.save()
                request.session["invcol"] = "red"
        except:
            pass
        try:
            if inventory.objects.get(name=p3, cid=cmp1):
                inv1 = inventory.objects.get(name=p3, cid=cmp1)
                cxq = float(inv1.cost) * float(qty[2])
                if accounts1.objects.get(name=inv1.invacnt, cid=cmp1):
                    accou = accounts1.objects.get(name=inv1.invacnt, cid=cmp1)
                    accou.balance = accou.balance - cxq
                    accou.save()
                elif accounts.objects.get(name=inv1.invacnt, cid=cmp1):
                    accou = accounts.objects.get(name=inv1.invacnt, cid=cmp1)
                    accou.balance = accou.balance - cxq
                    accou.save()
                else:
                    pass
                inv1.initialqty = int(inv1.initialqty) - int(qty[2])
                inv1.save()
                if placosupply == cmp1.state:
                    tax = taxamnt3 / 2
                    accocgst = accounts1.objects.get(
                        name='Input CGST', cid=cmp1)
                    accocgst.balance = accocgst.balance + tax
                    accocgst.save()
                    accosgst = accounts1.objects.get(
                        name='Input SGST', cid=cmp1)
                    accosgst.balance = accosgst.balance + tax
                    accosgst.save()
                else:
                    accoigst = accounts1.objects.get(
                        name='Input IGST', cid=cmp1)
                    accoigst.balance = accoigst.balance + taxamnt3
                    accoigst.save()
                request.session["invcol"] = "red"
        except:
            pass
        try:
            if inventory.objects.get(name=p4, cid=cmp1):
                inv1 = inventory.objects.get(name=p4, cid=cmp1)
                cxq = float(inv1.cost) * float(qty[3])
                if accounts1.objects.get(name=inv1.invacnt, cid=cmp1):
                    accou = accounts1.objects.get(name=inv1.invacnt, cid=cmp1)
                    accou.balance = accou.balance - cxq
                    accou.save()
                elif accounts.objects.get(name=inv1.invacnt, cid=cmp1):
                    accou = accounts.objects.get(name=inv1.invacnt, cid=cmp1)
                    accou.balance = accou.balance - cxq
                    accou.save()
                else:
                    pass
                inv1.initialqty = int(inv1.initialqty) - int(qty[3])
                inv1.save()
                if placosupply == cmp1.state:
                    tax = taxamnt4 / 2
                    accocgst = accounts1.objects.get(
                        name='Input CGST', cid=cmp1)
                    accocgst.balance = accocgst.balance + tax
                    accocgst.save()
                    accosgst = accounts1.objects.get(
                        name='Input SGST', cid=cmp1)
                    accosgst.balance = accosgst.balance + tax
                    accosgst.save()
                else:
                    accoigst = accounts1.objects.get(
                        name='Input IGST', cid=cmp1)
                    accoigst.balance = accoigst.balance + taxamnt4
                    accoigst.save()
                request.session["invcol"] = "red"
        except:
            pass

        try:
            if noninventory.objects.get(name=p, cid=cmp1):
                noninv1 = noninventory.objects.get(name=p, cid=cmp1)
                noninv1.qty = int(noninv1.qty) - int(qty[0])
                noninv1.save()
                try:
                    if accounts.objects.get(name=noninv1.expenseaccount, cid=cmp1):
                        acc = accounts.objects.get(
                            name=noninv1.expenseaccount, cid=cmp1)
                        acc.balance = acc.balance - tot
                        acc.save()
                except:
                    pass
                try:
                    if accounts1.objects.get(name=noninv1.expenseaccount, cid=cmp1):
                        acc = accounts1.objects.get(
                            name=noninv1.expenseaccount, cid=cmp1)
                        acc.balance = acc.balance - tot
                        acc.save()
                except:
                    pass
                if placosupply == cmp1.state:
                    tax = taxamnt1 / 2
                    accocgst = accounts1.objects.get(
                        name='Input CGST', cid=cmp1)
                    accocgst.balance = accocgst.balance + tax
                    accocgst.save()
                    accosgst = accounts1.objects.get(
                        name='Input SGST', cid=cmp1)
                    accosgst.balance = accosgst.balance + tax
                    accosgst.save()
                else:
                    accoigst = accounts1.objects.get(
                        name='Input IGST', cid=cmp1)
                    accoigst.balance = accoigst.balance + taxamnt1
                    accoigst.save()
                request.session["noninvcol"] = "red"
        except:
            pass
        try:
            if noninventory.objects.get(name=p2, cid=cmp1):
                noninv1 = noninventory.objects.get(name=p2, cid=cmp1)
                noninv1.qty = int(noninv1.qty) - int(qty[1])
                noninv1.save()
                try:
                    if accounts.objects.get(name=noninv1.expenseaccount, cid=cmp1):
                        acc = accounts.objects.get(
                            name=noninv1.expenseaccount, cid=cmp1)
                        acc.balance = acc.balance - tot2
                        acc.save()
                except:
                    pass
                try:
                    if accounts1.objects.get(name=noninv1.expenseaccount, cid=cmp1):
                        acc = accounts1.objects.get(
                            name=noninv1.expenseaccount, cid=cmp1)
                        acc.balance = acc.balance - tot2
                        acc.save()
                except:
                    pass
                if placosupply == cmp1.state:
                    tax = taxamnt2 / 2
                    accocgst = accounts1.objects.get(
                        name='Input CGST', cid=cmp1)
                    accocgst.balance = accocgst.balance + tax
                    accocgst.save()
                    accosgst = accounts1.objects.get(
                        name='Input SGST', cid=cmp1)
                    accosgst.balance = accosgst.balance + tax
                    accosgst.save()
                else:
                    accoigst = accounts1.objects.get(
                        name='Input IGST', cid=cmp1)
                    accoigst.balance = accoigst.balance + taxamnt2
                    accoigst.save()
                request.session["noninvcol"] = "red"
        except:
            pass
        try:
            if noninventory.objects.get(name=p3, cid=cmp1):
                noninv1 = noninventory.objects.get(name=p3, cid=cmp1)
                noninv1.qty = int(noninv1.qty) - int(qty[2])
                noninv1.save()
                try:
                    if accounts.objects.get(name=noninv1.expenseaccount, cid=cmp1):
                        acc = accounts.objects.get(
                            name=noninv1.expenseaccount, cid=cmp1)
                        acc.balance = acc.balance - tot3
                        acc.save()
                except:
                    pass
                try:
                    if accounts1.objects.get(name=noninv1.expenseaccount, cid=cmp1):
                        acc = accounts1.objects.get(
                            name=noninv1.expenseaccount, cid=cmp1)
                        acc.balance = acc.balance - tot3
                        acc.save()
                except:
                    pass
                if placosupply == cmp1.state:
                    tax = taxamnt3 / 2
                    accocgst = accounts1.objects.get(
                        name='Input CGST', cid=cmp1)
                    accocgst.balance = accocgst.balance + tax
                    accocgst.save()
                    accosgst = accounts1.objects.get(
                        name='Input SGST', cid=cmp1)
                    accosgst.balance = accosgst.balance + tax
                    accosgst.save()
                else:
                    accoigst = accounts1.objects.get(
                        name='Input IGST', cid=cmp1)
                    accoigst.balance = accoigst.balance + taxamnt3
                    accoigst.save()
                request.session["noninvcol"] = "red"
        except:
            pass
        try:
            if noninventory.objects.get(name=p4, cid=cmp1):
                noninv1 = noninventory.objects.get(name=p4, cid=cmp1)
                noninv1.qty = int(noninv1.qty) - int(qty[3])
                noninv1.save()
                try:
                    if accounts.objects.get(name=noninv1.expenseaccount, cid=cmp1):
                        acc = accounts.objects.get(
                            name=noninv1.expenseaccount, cid=cmp1)
                        acc.balance = acc.balance - tot4
                        acc.save()
                except:
                    pass
                try:
                    if accounts1.objects.get(name=noninv1.expenseaccount, cid=cmp1):
                        acc = accounts1.objects.get(
                            name=noninv1.expenseaccount, cid=cmp1)
                        acc.balance = acc.balance - tot4
                        acc.save()
                except:
                    pass
                if placosupply == cmp1.state:
                    tax = taxamnt4 / 2
                    accocgst = accounts1.objects.get(
                        name='Input CGST', cid=cmp1)
                    accocgst.balance = accocgst.balance + tax
                    accocgst.save()
                    accosgst = accounts1.objects.get(
                        name='Input SGST', cid=cmp1)
                    accosgst.balance = accosgst.balance + tax
                    accosgst.save()
                else:
                    accoigst = accounts1.objects.get(
                        name='Input IGST', cid=cmp1)
                    accoigst.balance = accoigst.balance + taxamnt4
                    accoigst.save()
                request.session["noninvcol"] = "red"
        except:
            pass

        try:
            if bundle.objects.get(name=p, cid=cmp1):
                bun1 = bundle.objects.get(name=p, cid=cmp1)
                bun1.qty = int(bun1.qty) - int(qty[0])
                bun1.save()
                if placosupply == cmp1.state:
                    tax = taxamnt1 / 2
                    accocgst = accounts1.objects.get(
                        name='Input CGST', cid=cmp1)
                    accocgst.balance = accocgst.balance + tax
                    accocgst.save()
                    accosgst = accounts1.objects.get(
                        name='Input SGST', cid=cmp1)
                    accosgst.balance = accosgst.balance + tax
                    accosgst.save()
                else:
                    accoigst = accounts1.objects.get(
                        name='Input IGST', cid=cmp1)
                    accoigst.balance = accoigst.balance + taxamnt1
                    accoigst.save()
                request.session["buncol"] = "red"
        except:
            pass
        try:
            if bundle.objects.get(name=p2, cid=cmp1):
                bun1 = bundle.objects.get(name=p2, cid=cmp1)
                bun1.qty = int(bun1.qty) - int(qty[1])
                bun1.save()
                if placosupply == cmp1.state:
                    tax = taxamnt2 / 2
                    accocgst = accounts1.objects.get(
                        name='Input CGST', cid=cmp1)
                    accocgst.balance = accocgst.balance + tax
                    accocgst.save()
                    accosgst = accounts1.objects.get(
                        name='Input SGST', cid=cmp1)
                    accosgst.balance = accosgst.balance + tax
                    accosgst.save()
                else:
                    accoigst = accounts1.objects.get(
                        name='Input IGST', cid=cmp1)
                    accoigst.balance = accoigst.balance + taxamnt2
                    accoigst.save()
                request.session["buncol"] = "red"
        except:
            pass
        try:
            if bundle.objects.get(name=p3, cid=cmp1):
                bun1 = bundle.objects.get(name=p3, cid=cmp1)
                bun1.qty = int(bun1.qty) - int(qty[2])
                bun1.save()
                if placosupply == cmp1.state:
                    tax = taxamnt3 / 2
                    accocgst = accounts1.objects.get(
                        name='Input CGST', cid=cmp1)
                    accocgst.balance = accocgst.balance + tax
                    accocgst.save()
                    accosgst = accounts1.objects.get(
                        name='Input SGST', cid=cmp1)
                    accosgst.balance = accosgst.balance + tax
                    accosgst.save()
                else:
                    accoigst = accounts1.objects.get(
                        name='Input IGST', cid=cmp1)
                    accoigst.balance = accoigst.balance + taxamnt3
                    accoigst.save()
                request.session["buncol"] = "red"
        except:
            pass
        try:
            if bundle.objects.get(name=p4, cid=cmp1):
                bun1 = bundle.objects.get(name=p4, cid=cmp1)
                bun1.qty = int(bun1.qty) - int(qty[3])
                bun1.save()
                if placosupply == cmp1.state:
                    tax = taxamnt4 / 2
                    accocgst = accounts1.objects.get(
                        name='Input CGST', cid=cmp1)
                    accocgst.balance = accocgst.balance + tax
                    accocgst.save()
                    accosgst = accounts1.objects.get(
                        name='Input SGST', cid=cmp1)
                    accosgst.balance = accosgst.balance + tax
                    accosgst.save()
                else:
                    accoigst = accounts1.objects.get(
                        name='Input IGST', cid=cmp1)
                    accoigst.balance = accoigst.balance + taxamnt4
                    accoigst.save()
                request.session["buncol"] = "red"
        except:
            pass
        sucr = suplrcredit(supplier=request.POST['supplier'], mailaddr=request.POST['mailaddr'],
                           paymdate=request.POST['paymdate'], refno='1000',
                           ccatego=request.POST['ccatego'], cdescrip=request.POST['cdescrip'],
                           cqty=request.POST['cqty'],
                           cprice=request.POST['cprice'],
                           ctotal=request.POST['ctotal'], ccatego2=request.POST['ccatego2'],
                           cdescrip2=request.POST['cdescrip2'], cqty2=request.POST['cqty2'],
                           cprice2=request.POST['cprice2'],
                           ctotal2=request.POST['ctotal2'], ccatego3=request.POST['ccatego3'],
                           cdescrip3=request.POST['cdescrip3'], cqty3=request.POST['cqty3'],
                           cprice3=request.POST['cprice3'],
                           ctotal3=request.POST['ctotal3'], ccatego4=request.POST['ccatego4'],
                           cdescrip4=request.POST['cdescrip4'], cqty4=request.POST['cqty4'],
                           cprice4=request.POST['cprice4'],
                           ctotal4=request.POST['ctotal4'],
                           product=request.POST['product'], hsn=request.POST['hsn'],
                           description=request.POST['description'],
                           qty=request.POST['qty'], price=request.POST['price'], total=request.POST['total'],
                           product2=request.POST['product2'], hsn2=request.POST['hsn2'],
                           description2=request.POST['description2'],
                           qty2=request.POST['qty2'], price2=request.POST['price2'], total2=request.POST['total2'],
                           product3=request.POST['product3'], hsn3=request.POST['hsn3'],
                           description3=request.POST['description3'],
                           qty3=request.POST['qty3'], price3=request.POST['price3'], total3=request.POST['total3'],
                           product4=request.POST['product4'], hsn4=request.POST['hsn4'],
                           description4=request.POST['description4'],
                           qty4=request.POST['qty4'], price4=request.POST['price4'], total4=request.POST['total4'],
                           subtotal=request.POST['subtotal'], tax=request.POST['tax'], tax2=request.POST['tax2'],
                           tax3=request.POST['tax3'], tax4=request.POST['tax4'],
                           taxamount=request.POST['taxamount'], grandtotal=request.POST['grandtotal'],
                           creditamount=request.POST['creditamount'], cid=cmp1)
        sucr.save()
        sucr.refno = int(sucr.refno) + sucr.suppliercreditid
        sucr.save()
        return redirect('goexpences')
    except:
        return redirect('goexpences')


@login_required(login_url='regcomp')
def editsuplcredit(request, id):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        supr = suplrcredit.objects.get(suppliercreditid=id)
        suppliers = supplier.objects.all()
        inv = inventory.objects.all()
        bun = bundle.objects.all()
        noninv = noninventory.objects.all()
        ser = service.objects.all()
        catlist = viewlist()
        context = {'suplrcredit': supr, 'suppliers': suppliers, 'inv': inv, 'cmp1': cmp1, 'bun': bun, 'noninv': noninv,
                   'ser': ser, 'catlist': catlist}
        return render(request, 'app1/editsuppliercredit.html', context)
    except:
        return redirect('goexpences')


@login_required(login_url='regcomp')
def updatesuplcredit(request, id):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        suprr = suplrcredit.objects.get(suppliercreditid=id, cid=cmp1)
        product = [request.POST['product'], request.POST['product2'], request.POST['product3'],
                   request.POST['product4']]
        creqty = [suprr.qty, suprr.qty2, suprr.qty3, suprr.qty4]
        qty = [request.POST['qty'], request.POST['qty2'],
               request.POST['qty3'], request.POST['qty4']]
        otot = [float(suprr.total), float(suprr.total2),
                float(suprr.total3), float(suprr.total4)]
        tot = [float(request.POST['total']), float(request.POST['total2']), float(request.POST['total3']),
               float(request.POST['total4'])]
        taxes = [float(suprr.tax) / 100, float(suprr.tax2) / 100,
                 float(suprr.tax3) / 100, float(suprr.tax4) / 100]
        otaxamnt = [float(suprr.total) * taxes[0], float(suprr.total2) * taxes[1],
                    float(suprr.total3) * taxes[2],
                    float(suprr.total4) * taxes[3]]
        taxamnt = [float(request.POST['taxamount1']), float(request.POST['taxamount2']),
                   float(request.POST['taxamount3']),
                   float(request.POST['taxamount4'])]
        grandtotal = float(request.POST['grandtotal'])
        accs = accounts1.objects.get(
            name='Accounts Payable(Creditors)', cid=cmp1)
        try:
            if grandtotal > float(suprr.grandtotal):
                newgrand = grandtotal - float(suprr.grandtotal)
                accs.balance = accs.balance - newgrand
                accs.save()
            elif grandtotal < float(suprr.grandtotal):
                newgrand = float(suprr.grandtotal) - grandtotal
                accs.balance = accs.balance + newgrand
                accs.save()
            else:
                pass
        except:
            pass
        payee = suprr.supplier.split()
        firstname = payee[0]
        lastname = payee[1]
        if len(payee) == 3:
            lastname = payee[1] + " " + payee[2]
            try:
                if supplier.objects.get(firstname=firstname, lastname=lastname):
                    supp = supplier.objects.get(
                        firstname=firstname, lastname=lastname)
                    placosupply = supp.state
            except:
                pass
            try:
                if customer.objects.get(firstname=firstname, lastname=lastname):
                    cust = customer.objects.get(
                        firstname=firstname, lastname=lastname)
                    placosupply = cust.state
            except:
                pass
        else:
            try:
                if supplier.objects.get(firstname=firstname, lastname=lastname):
                    supp = supplier.objects.get(
                        firstname=firstname, lastname=lastname)
                    placosupply = supp.state
            except:
                pass
            try:
                if customer.objects.get(firstname=firstname, lastname=lastname):
                    cust = customer.objects.get(
                        firstname=firstname, lastname=lastname)
                    placosupply = cust.state
            except:
                pass

        try:
            if inventory.objects.get(name=product[0], cid=cmp1):
                invent = inventory.objects.get(name=product[0], cid=cmp1)
                if int(qty[0]) > int(creqty[0]):
                    invent.initialqty = int(
                        invent.initialqty) - (int(qty[0]) - int(creqty[0]))
                    invent.save()
                    cxq = float(invent.cost) * \
                        (float(qty[0]) - float(creqty[0]))
                    if accounts1.objects.get(name=invent.invacnt, cid=cmp1):
                        accnt = accounts1.objects.get(
                            name=invent.invacnt, cid=cmp1)
                        accnt.balance = accnt.balance - cxq
                        accnt.save()
                    elif accounts.objects.get(name=invent.invacnt, cid=cmp1):
                        accnt = accounts.objects.get(
                            name=invent.invacnt, cid=cmp1)
                        accnt.balance = accnt.balance - cxq
                        accnt.save()
                    else:
                        pass
                    newtot = tot[0] - otot[0]
                    if placosupply == cmp1.state:
                        tax = taxamnt[0] / 2
                        otax = otaxamnt[0] / 2
                        accocgst = accounts1.objects.get(
                            name='Input CGST', cid=cmp1)
                        ta = tax - otax
                        accocgst.balance = accocgst.balance + ta
                        accocgst.save()
                        accosgst = accounts1.objects.get(
                            name='Input SGST', cid=cmp1)
                        accosgst.balance = accosgst.balance + ta
                        accosgst.save()
                    else:
                        accoigst = accounts1.objects.get(
                            name='Input IGST', cid=cmp1)
                        ta = taxamnt[0] - otaxamnt[0]
                        accoigst.balance = accoigst.balance + ta
                        accoigst.save()
                elif int(qty[0]) < int(creqty[0]):
                    invent.initialqty = int(
                        invent.initialqty) + (int(creqty[0]) - int(qty[0]))
                    invent.save()
                    cxq = float(invent.cost) * \
                        (float(creqty[0]) - float(qty[0]))
                    if accounts1.objects.get(name=invent.invacnt, cid=cmp1):
                        accnt = accounts1.objects.get(
                            name=invent.invacnt, cid=cmp1)
                        accnt.balance = accnt.balance + cxq
                        accnt.save()
                    elif accounts.objects.get(name=invent.invacnt, cid=cmp1):
                        accnt = accounts.objects.get(
                            name=invent.invacnt, cid=cmp1)
                        accnt.balance = accnt.balance + cxq
                        accnt.save()
                    else:
                        pass
                    newtot = otot[0] - tot[0]
                    if placosupply == cmp1.state:
                        tax = taxamnt[0] / 2
                        otax = otaxamnt[0] / 2
                        accocgst = accounts1.objects.get(
                            name='Input CGST', cid=cmp1)
                        ta = otax - tax
                        accocgst.balance = accocgst.balance - ta
                        accocgst.save()
                        accosgst = accounts1.objects.get(
                            name='Input SGST', cid=cmp1)
                        accosgst.balance = accosgst.balance - ta
                        accosgst.save()
                    else:
                        accoigst = accounts1.objects.get(
                            name='Input IGST', cid=cmp1)
                        ta = otaxamnt[0] - taxamnt[0]
                        accoigst.balance = accoigst.balance - ta
                        accoigst.save()
        except:
            pass
        try:
            if noninventory.objects.get(name=product[0], cid=cmp1):
                noninvent = noninventory.objects.get(name=product[0], cid=cmp1)
                if int(qty[0]) > int(creqty[0]):
                    noninvent.qty = int(noninvent.qty) - \
                        (int(qty[0]) - int(creqty[0]))
                    noninvent.save()
                    newtot = tot[0] - otot[0]
                    try:
                        if accounts.objects.get(name=noninvent.expenseaccount, cid=cmp1):
                            acc = accounts.objects.get(
                                name=noninvent.expenseaccount, cid=cmp1)
                            acc.balance = acc.balance - newtot
                            acc.save()
                    except:
                        pass
                    try:
                        if accounts1.objects.get(name=noninvent.expenseaccount, cid=cmp1):
                            acc = accounts1.objects.get(
                                name=noninvent.expenseaccount, cid=cmp1)
                            acc.balance = acc.balance - newtot
                            acc.save()
                    except:
                        pass
                    if placosupply == cmp1.state:
                        tax = taxamnt[0] / 2
                        otax = otaxamnt[0] / 2
                        accocgst = accounts1.objects.get(
                            name='Input CGST', cid=cmp1)
                        ta = tax - otax
                        accocgst.balance = accocgst.balance + ta
                        accocgst.save()
                        accosgst = accounts1.objects.get(
                            name='Input SGST', cid=cmp1)
                        accosgst.balance = accosgst.balance + ta
                        accosgst.save()
                    else:
                        accoigst = accounts1.objects.get(
                            name='Input IGST', cid=cmp1)
                        ta = taxamnt[0] - otaxamnt[0]
                        accoigst.balance = accoigst.balance + ta
                        accoigst.save()
                elif int(qty[0]) < int(creqty[0]):
                    noninvent.qty = int(noninvent.qty) - \
                        (int(creqty[0]) - int(qty[0]))
                    noninvent.save()
                    newtot = otot[0] - tot[0]
                    try:
                        if accounts.objects.get(name=noninvent.expenseaccount, cid=cmp1):
                            acc = accounts.objects.get(
                                name=noninvent.expenseaccount, cid=cmp1)
                            acc.balance = acc.balance + newtot
                            acc.save()
                    except:
                        pass
                    try:
                        if accounts1.objects.get(name=noninvent.expenseaccount, cid=cmp1):
                            acc = accounts1.objects.get(
                                name=noninvent.expenseaccount, cid=cmp1)
                            acc.balance = acc.balance + newtot
                            acc.save()
                    except:
                        pass
                    if placosupply == cmp1.state:
                        tax = taxamnt[0] / 2
                        otax = otaxamnt[0] / 2
                        accocgst = accounts1.objects.get(
                            name='Input CGST', cid=cmp1)
                        ta = otax - tax
                        accocgst.balance = accocgst.balance - ta
                        accocgst.save()
                        accosgst = accounts1.objects.get(
                            name='Input SGST', cid=cmp1)
                        accosgst.balance = accosgst.balance - ta
                        accosgst.save()
                    else:
                        accoigst = accounts1.objects.get(
                            name='Input IGST', cid=cmp1)
                        ta = otaxamnt[0] - taxamnt[0]
                        accoigst.balance = accoigst.balance - ta
                        accoigst.save()
                else:
                    pass
        except:
            pass
        try:
            if bundle.objects.get(name=product[0], cid=cmp1):
                bundl = bundle.objects.get(name=product[0], cid=cmp1)
                if int(qty[0]) > int(creqty[0]):
                    bundl.qty = int(bundl.qty) + (int(qty[0]) - int(creqty[0]))
                    bundl.save()
                    if placosupply == cmp1.state:
                        tax = taxamnt[0] / 2
                        otax = otaxamnt[0] / 2
                        accocgst = accounts1.objects.get(
                            name='Input CGST', cid=cmp1)
                        ta = tax - otax
                        accocgst.balance = accocgst.balance + ta
                        accocgst.save()
                        accosgst = accounts1.objects.get(
                            name='Input SGST', cid=cmp1)
                        accosgst.balance = accosgst.balance + ta
                        accosgst.save()
                    else:
                        accoigst = accounts1.objects.get(
                            name='Input IGST', cid=cmp1)
                        ta = taxamnt[0] - otaxamnt[0]
                        accoigst.balance = accoigst.balance + ta
                        accoigst.save()
                elif int(qty[0]) < int(creqty[0]):
                    bundl.qty = int(bundl.qty) - (int(creqty[0]) - int(qty[0]))
                    bundl.save()
                    if placosupply == cmp1.state:
                        tax = taxamnt[0] / 2
                        otax = otaxamnt[0] / 2
                        accocgst = accounts1.objects.get(
                            name='Input CGST', cid=cmp1)
                        ta = otax - tax
                        accocgst.balance = accocgst.balance - ta
                        accocgst.save()
                        accosgst = accounts1.objects.get(
                            name='Input SGST', cid=cmp1)
                        accosgst.balance = accosgst.balance - ta
                        accosgst.save()
                    else:
                        accoigst = accounts1.objects.get(
                            name='Input IGST', cid=cmp1)
                        ta = otaxamnt[0] - taxamnt[0]
                        accoigst.balance = accoigst.balance - ta
                        accoigst.save()
                else:
                    pass
        except:
            pass
        try:
            if inventory.objects.get(name=product[1], cid=cmp1):
                invent = inventory.objects.get(name=product[1], cid=cmp1)
                if int(qty[1]) > int(creqty[1]):
                    invent.initialqty = int(
                        invent.initialqty) - (int(qty[1]) - int(creqty[1]))
                    invent.save()
                    cxq = float(invent.cost) * \
                        (float(qty[1]) - float(creqty[1]))
                    if accounts1.objects.get(name=invent.invacnt, cid=cmp1):
                        accnt = accounts1.objects.get(
                            name=invent.invacnt, cid=cmp1)
                        accnt.balance = accnt.balance - cxq
                        accnt.save()
                    elif accounts.objects.get(name=invent.invacnt, cid=cmp1):
                        accnt = accounts.objects.get(
                            name=invent.invacnt, cid=cmp1)
                        accnt.balance = accnt.balance - cxq
                        accnt.save()
                    else:
                        pass
                    newtot = tot[1] - otot[1]
                    if placosupply == cmp1.state:
                        tax = taxamnt[1] / 2
                        otax = otaxamnt[1] / 2
                        accocgst = accounts1.objects.get(
                            name='Input CGST', cid=cmp1)
                        ta = tax - otax
                        accocgst.balance = accocgst.balance + ta
                        accocgst.save()
                        accosgst = accounts1.objects.get(
                            name='Input SGST', cid=cmp1)
                        accosgst.balance = accosgst.balance + ta
                        accosgst.save()
                    else:
                        accoigst = accounts1.objects.get(
                            name='Input IGST', cid=cmp1)
                        ta = taxamnt[1] - otaxamnt[1]
                        accoigst.balance = accoigst.balance + ta
                        accoigst.save()
                elif int(qty[1]) < int(creqty[1]):
                    invent.initialqty = int(
                        invent.initialqty) + (int(creqty[1]) - int(qty[1]))
                    invent.save()
                    cxq = float(invent.cost) * \
                        (float(creqty[1]) - float(qty[1]))
                    if accounts1.objects.get(name=invent.invacnt, cid=cmp1):
                        accnt = accounts1.objects.get(
                            name=invent.invacnt, cid=cmp1)
                        accnt.balance = accnt.balance + cxq
                        accnt.save()
                    elif accounts.objects.get(name=invent.invacnt, cid=cmp1):
                        accnt = accounts.objects.get(
                            name=invent.invacnt, cid=cmp1)
                        accnt.balance = accnt.balance + cxq
                        accnt.save()
                    else:
                        pass
                    newtot = otot[1] - tot[1]
                    if placosupply == cmp1.state:
                        tax = taxamnt[1] / 2
                        otax = otaxamnt[1] / 2
                        accocgst = accounts1.objects.get(
                            name='Input CGST', cid=cmp1)
                        ta = otax - tax
                        accocgst.balance = accocgst.balance - ta
                        accocgst.save()
                        accosgst = accounts1.objects.get(
                            name='Input SGST', cid=cmp1)
                        accosgst.balance = accosgst.balance - ta
                        accosgst.save()
                    else:
                        accoigst = accounts1.objects.get(
                            name='Input IGST', cid=cmp1)
                        ta = otaxamnt[1] - taxamnt[1]
                        accoigst.balance = accoigst.balance - ta
                        accoigst.save()
        except:
            pass
        try:
            if noninventory.objects.get(name=product[1], cid=cmp1):
                noninvent = noninventory.objects.get(name=product[1], cid=cmp1)
                if int(qty[1]) > int(creqty[1]):
                    noninvent.qty = int(noninvent.qty) - \
                        (int(qty[1]) - int(creqty[1]))
                    noninvent.save()
                    newtot = tot[1] - otot[1]
                    try:
                        if accounts.objects.get(name=noninvent.expenseaccount, cid=cmp1):
                            acc = accounts.objects.get(
                                name=noninvent.expenseaccount, cid=cmp1)
                            acc.balance = acc.balance - newtot
                            acc.save()
                    except:
                        pass
                    try:
                        if accounts1.objects.get(name=noninvent.expenseaccount, cid=cmp1):
                            acc = accounts1.objects.get(
                                name=noninvent.expenseaccount, cid=cmp1)
                            acc.balance = acc.balance - newtot
                            acc.save()
                    except:
                        pass
                    if placosupply == cmp1.state:
                        tax = taxamnt[1] / 2
                        otax = otaxamnt[1] / 2
                        accocgst = accounts1.objects.get(
                            name='Input CGST', cid=cmp1)
                        ta = tax - otax
                        accocgst.balance = accocgst.balance + ta
                        accocgst.save()
                        accosgst = accounts1.objects.get(
                            name='Input SGST', cid=cmp1)
                        accosgst.balance = accosgst.balance + ta
                        accosgst.save()
                    else:
                        accoigst = accounts1.objects.get(
                            name='Input IGST', cid=cmp1)
                        ta = taxamnt[1] - otaxamnt[1]
                        accoigst.balance = accoigst.balance + ta
                        accoigst.save()
                elif int(qty[1]) < int(creqty[1]):
                    noninvent.qty = int(noninvent.qty) - \
                        (int(creqty[1]) - int(qty[1]))
                    noninvent.save()
                    newtot = otot[1] - tot[1]
                    try:
                        if accounts.objects.get(name=noninvent.expenseaccount, cid=cmp1):
                            acc = accounts.objects.get(
                                name=noninvent.expenseaccount, cid=cmp1)
                            acc.balance = acc.balance + newtot
                            acc.save()
                    except:
                        pass
                    try:
                        if accounts1.objects.get(name=noninvent.expenseaccount, cid=cmp1):
                            acc = accounts1.objects.get(
                                name=noninvent.expenseaccount, cid=cmp1)
                            acc.balance = acc.balance + newtot
                            acc.save()
                    except:
                        pass
                    if placosupply == cmp1.state:
                        tax = taxamnt[1] / 2
                        otax = otaxamnt[1] / 2
                        accocgst = accounts1.objects.get(
                            name='Input CGST', cid=cmp1)
                        ta = otax - tax
                        accocgst.balance = accocgst.balance - ta
                        accocgst.save()
                        accosgst = accounts1.objects.get(
                            name='Input SGST', cid=cmp1)
                        accosgst.balance = accosgst.balance - ta
                        accosgst.save()
                    else:
                        accoigst = accounts1.objects.get(
                            name='Input IGST', cid=cmp1)
                        ta = otaxamnt[1] - taxamnt[1]
                        accoigst.balance = accoigst.balance - ta
                        accoigst.save()
                else:
                    pass
        except:
            pass
        try:
            if bundle.objects.get(name=product[1], cid=cmp1):
                bundl = bundle.objects.get(name=product[1], cid=cmp1)
                if int(qty[1]) > int(creqty[1]):
                    bundl.qty = int(bundl.qty) + (int(qty[1]) - int(creqty[1]))
                    bundl.save()
                    if placosupply == cmp1.state:
                        tax = taxamnt[1] / 2
                        otax = otaxamnt[1] / 2
                        accocgst = accounts1.objects.get(
                            name='Input CGST', cid=cmp1)
                        ta = tax - otax
                        accocgst.balance = accocgst.balance + ta
                        accocgst.save()
                        accosgst = accounts1.objects.get(
                            name='Input SGST', cid=cmp1)
                        accosgst.balance = accosgst.balance + ta
                        accosgst.save()
                    else:
                        accoigst = accounts1.objects.get(
                            name='Input IGST', cid=cmp1)
                        ta = taxamnt[1] - otaxamnt[1]
                        accoigst.balance = accoigst.balance + ta
                        accoigst.save()
                elif int(qty[1]) < int(creqty[1]):
                    bundl.qty = int(bundl.qty) - (int(creqty[1]) - int(qty[1]))
                    bundl.save()
                    if placosupply == cmp1.state:
                        tax = taxamnt[1] / 2
                        otax = otaxamnt[1] / 2
                        accocgst = accounts1.objects.get(
                            name='Input CGST', cid=cmp1)
                        ta = otax - tax
                        accocgst.balance = accocgst.balance - ta
                        accocgst.save()
                        accosgst = accounts1.objects.get(
                            name='Input SGST', cid=cmp1)
                        accosgst.balance = accosgst.balance - ta
                        accosgst.save()
                    else:
                        accoigst = accounts1.objects.get(
                            name='Input IGST', cid=cmp1)
                        ta = otaxamnt[1] - taxamnt[1]
                        accoigst.balance = accoigst.balance - ta
                        accoigst.save()
                else:
                    pass
        except:
            pass
        try:
            if inventory.objects.get(name=product[2], cid=cmp1):
                invent = inventory.objects.get(name=product[2], cid=cmp1)
                if int(qty[2]) > int(creqty[2]):
                    invent.initialqty = int(
                        invent.initialqty) - (int(qty[2]) - int(creqty[2]))
                    invent.save()
                    cxq = float(invent.cost) * \
                        (float(qty[2]) - float(creqty[2]))
                    if accounts1.objects.get(name=invent.invacnt, cid=cmp1):
                        accnt = accounts1.objects.get(
                            name=invent.invacnt, cid=cmp1)
                        accnt.balance = accnt.balance - cxq
                        accnt.save()
                    elif accounts.objects.get(name=invent.invacnt, cid=cmp1):
                        accnt = accounts.objects.get(
                            name=invent.invacnt, cid=cmp1)
                        accnt.balance = accnt.balance - cxq
                        accnt.save()
                    else:
                        pass
                    newtot = tot[2] - otot[2]
                    if placosupply == cmp1.state:
                        tax = taxamnt[2] / 2
                        otax = otaxamnt[2] / 2
                        accocgst = accounts1.objects.get(
                            name='Input CGST', cid=cmp1)
                        ta = tax - otax
                        accocgst.balance = accocgst.balance + ta
                        accocgst.save()
                        accosgst = accounts1.objects.get(
                            name='Input SGST', cid=cmp1)
                        accosgst.balance = accosgst.balance + ta
                        accosgst.save()
                    else:
                        accoigst = accounts1.objects.get(
                            name='Input IGST', cid=cmp1)
                        ta = taxamnt[2] - otaxamnt[2]
                        accoigst.balance = accoigst.balance + ta
                        accoigst.save()
                elif int(qty[2]) < int(creqty[2]):
                    invent.initialqty = int(
                        invent.initialqty) + (int(creqty[2]) - int(qty[2]))
                    invent.save()
                    cxq = float(invent.cost) * \
                        (float(creqty[2]) - float(qty[2]))
                    if accounts1.objects.get(name=invent.invacnt, cid=cmp1):
                        accnt = accounts1.objects.get(
                            name=invent.invacnt, cid=cmp1)
                        accnt.balance = accnt.balance + cxq
                        accnt.save()
                    elif accounts.objects.get(name=invent.invacnt, cid=cmp1):
                        accnt = accounts.objects.get(
                            name=invent.invacnt, cid=cmp1)
                        accnt.balance = accnt.balance + cxq
                        accnt.save()
                    else:
                        pass
                    newtot = otot[2] - tot[2]
                    if placosupply == cmp1.state:
                        tax = taxamnt[2] / 2
                        otax = otaxamnt[2] / 2
                        accocgst = accounts1.objects.get(
                            name='Input CGST', cid=cmp1)
                        ta = otax - tax
                        accocgst.balance = accocgst.balance - ta
                        accocgst.save()
                        accosgst = accounts1.objects.get(
                            name='Input SGST', cid=cmp1)
                        accosgst.balance = accosgst.balance - ta
                        accosgst.save()
                    else:
                        accoigst = accounts1.objects.get(
                            name='Input IGST', cid=cmp1)
                        ta = otaxamnt[2] - taxamnt[2]
                        accoigst.balance = accoigst.balance - ta
                        accoigst.save()
        except:
            pass
        try:
            if noninventory.objects.get(name=product[2], cid=cmp1):
                noninvent = noninventory.objects.get(name=product[2], cid=cmp1)
                if int(qty[2]) > int(creqty[2]):
                    noninvent.qty = int(noninvent.qty) - \
                        (int(qty[2]) - int(creqty[2]))
                    noninvent.save()
                    newtot = tot[2] - otot[2]
                    try:
                        if accounts.objects.get(name=noninvent.expenseaccount, cid=cmp1):
                            acc = accounts.objects.get(
                                name=noninvent.expenseaccount, cid=cmp1)
                            acc.balance = acc.balance - newtot
                            acc.save()
                    except:
                        pass
                    try:
                        if accounts1.objects.get(name=noninvent.expenseaccount, cid=cmp1):
                            acc = accounts1.objects.get(
                                name=noninvent.expenseaccount, cid=cmp1)
                            acc.balance = acc.balance - newtot
                            acc.save()
                    except:
                        pass
                    if placosupply == cmp1.state:
                        tax = taxamnt[2] / 2
                        otax = otaxamnt[2] / 2
                        accocgst = accounts1.objects.get(
                            name='Input CGST', cid=cmp1)
                        ta = tax - otax
                        accocgst.balance = accocgst.balance + ta
                        accocgst.save()
                        accosgst = accounts1.objects.get(
                            name='Input SGST', cid=cmp1)
                        accosgst.balance = accosgst.balance + ta
                        accosgst.save()
                    else:
                        accoigst = accounts1.objects.get(
                            name='Input IGST', cid=cmp1)
                        ta = taxamnt[2] - otaxamnt[2]
                        accoigst.balance = accoigst.balance + ta
                        accoigst.save()
                elif int(qty[2]) < int(creqty[2]):
                    noninvent.qty = int(noninvent.qty) - \
                        (int(creqty[2]) - int(qty[2]))
                    noninvent.save()
                    newtot = otot[2] - tot[2]
                    try:
                        if accounts.objects.get(name=noninvent.expenseaccount, cid=cmp1):
                            acc = accounts.objects.get(
                                name=noninvent.expenseaccount, cid=cmp1)
                            acc.balance = acc.balance + newtot
                            acc.save()
                    except:
                        pass
                    try:
                        if accounts1.objects.get(name=noninvent.expenseaccount, cid=cmp1):
                            acc = accounts1.objects.get(
                                name=noninvent.expenseaccount, cid=cmp1)
                            acc.balance = acc.balance + newtot
                            acc.save()
                    except:
                        pass
                    if placosupply == cmp1.state:
                        tax = taxamnt[2] / 2
                        otax = otaxamnt[2] / 2
                        accocgst = accounts1.objects.get(
                            name='Input CGST', cid=cmp1)
                        ta = otax - tax
                        accocgst.balance = accocgst.balance - ta
                        accocgst.save()
                        accosgst = accounts1.objects.get(
                            name='Input SGST', cid=cmp1)
                        accosgst.balance = accosgst.balance - ta
                        accosgst.save()
                    else:
                        accoigst = accounts1.objects.get(
                            name='Input IGST', cid=cmp1)
                        ta = otaxamnt[2] - taxamnt[2]
                        accoigst.balance = accoigst.balance - ta
                        accoigst.save()
                else:
                    pass
        except:
            pass
        try:
            if bundle.objects.get(name=product[2], cid=cmp1):
                bundl = bundle.objects.get(name=product[2], cid=cmp1)
                if int(qty[2]) > int(creqty[2]):
                    bundl.qty = int(bundl.qty) + (int(qty[2]) - int(creqty[2]))
                    bundl.save()
                    if placosupply == cmp1.state:
                        tax = taxamnt[2] / 2
                        otax = otaxamnt[2] / 2
                        accocgst = accounts1.objects.get(
                            name='Input CGST', cid=cmp1)
                        ta = tax - otax
                        accocgst.balance = accocgst.balance + ta
                        accocgst.save()
                        accosgst = accounts1.objects.get(
                            name='Input SGST', cid=cmp1)
                        accosgst.balance = accosgst.balance + ta
                        accosgst.save()
                    else:
                        accoigst = accounts1.objects.get(
                            name='Input IGST', cid=cmp1)
                        ta = taxamnt[2] - otaxamnt[2]
                        accoigst.balance = accoigst.balance + ta
                        accoigst.save()
                elif int(qty[2]) < int(creqty[2]):
                    bundl.qty = int(bundl.qty) - (int(creqty[2]) - int(qty[2]))
                    bundl.save()
                    if placosupply == cmp1.state:
                        tax = taxamnt[2] / 2
                        otax = otaxamnt[2] / 2
                        accocgst = accounts1.objects.get(
                            name='Input CGST', cid=cmp1)
                        ta = otax - tax
                        accocgst.balance = accocgst.balance - ta
                        accocgst.save()
                        accosgst = accounts1.objects.get(
                            name='Input SGST', cid=cmp1)
                        accosgst.balance = accosgst.balance - ta
                        accosgst.save()
                    else:
                        accoigst = accounts1.objects.get(
                            name='Input IGST', cid=cmp1)
                        ta = otaxamnt[2] - taxamnt[2]
                        accoigst.balance = accoigst.balance - ta
                        accoigst.save()
                else:
                    pass
        except:
            pass
        try:
            if inventory.objects.get(name=product[3], cid=cmp1):
                invent = inventory.objects.get(name=product[3], cid=cmp1)
                if int(qty[3]) > int(creqty[3]):
                    invent.initialqty = int(
                        invent.initialqty) - (int(qty[3]) - int(creqty[3]))
                    invent.save()
                    cxq = float(invent.cost) * \
                        (float(qty[3]) - float(creqty[3]))
                    if accounts1.objects.get(name=invent.invacnt, cid=cmp1):
                        accnt = accounts1.objects.get(
                            name=invent.invacnt, cid=cmp1)
                        accnt.balance = accnt.balance - cxq
                        accnt.save()
                    elif accounts.objects.get(name=invent.invacnt, cid=cmp1):
                        accnt = accounts.objects.get(
                            name=invent.invacnt, cid=cmp1)
                        accnt.balance = accnt.balance - cxq
                        accnt.save()
                    else:
                        pass
                    newtot = tot[3] - otot[3]
                    if placosupply == cmp1.state:
                        tax = taxamnt[3] / 2
                        otax = otaxamnt[3] / 2
                        accocgst = accounts1.objects.get(
                            name='Input CGST', cid=cmp1)
                        ta = tax - otax
                        accocgst.balance = accocgst.balance + ta
                        accocgst.save()
                        accosgst = accounts1.objects.get(
                            name='Input SGST', cid=cmp1)
                        accosgst.balance = accosgst.balance + ta
                        accosgst.save()
                    else:
                        accoigst = accounts1.objects.get(
                            name='Input IGST', cid=cmp1)
                        ta = taxamnt[3] - otaxamnt[3]
                        accoigst.balance = accoigst.balance + ta
                        accoigst.save()
                elif int(qty[3]) < int(creqty[3]):
                    invent.initialqty = int(
                        invent.initialqty) + (int(creqty[3]) - int(qty[3]))
                    invent.save()
                    cxq = float(invent.cost) * \
                        (float(creqty[3]) - float(qty[3]))
                    if accounts1.objects.get(name=invent.invacnt, cid=cmp1):
                        accnt = accounts1.objects.get(
                            name=invent.invacnt, cid=cmp1)
                        accnt.balance = accnt.balance + cxq
                        accnt.save()
                    elif accounts.objects.get(name=invent.invacnt, cid=cmp1):
                        accnt = accounts.objects.get(
                            name=invent.invacnt, cid=cmp1)
                        accnt.balance = accnt.balance + cxq
                        accnt.save()
                    else:
                        pass
                    newtot = otot[3] - tot[3]
                    if placosupply == cmp1.state:
                        tax = taxamnt[3] / 2
                        otax = otaxamnt[3] / 2
                        accocgst = accounts1.objects.get(
                            name='Input CGST', cid=cmp1)
                        ta = otax - tax
                        accocgst.balance = accocgst.balance - ta
                        accocgst.save()
                        accosgst = accounts1.objects.get(
                            name='Input SGST', cid=cmp1)
                        accosgst.balance = accosgst.balance - ta
                        accosgst.save()
                    else:
                        accoigst = accounts1.objects.get(
                            name='Input IGST', cid=cmp1)
                        ta = otaxamnt[3] - taxamnt[3]
                        accoigst.balance = accoigst.balance - ta
                        accoigst.save()
        except:
            pass
        try:
            if noninventory.objects.get(name=product[3], cid=cmp1):
                noninvent = noninventory.objects.get(name=product[3], cid=cmp1)
                if int(qty[3]) > int(creqty[3]):
                    noninvent.qty = int(noninvent.qty) - \
                        (int(qty[3]) - int(creqty[3]))
                    noninvent.save()
                    newtot = tot[3] - otot[3]
                    try:
                        if accounts.objects.get(name=noninvent.expenseaccount, cid=cmp1):
                            acc = accounts.objects.get(
                                name=noninvent.expenseaccount, cid=cmp1)
                            acc.balance = acc.balance - newtot
                            acc.save()
                    except:
                        pass
                    try:
                        if accounts1.objects.get(name=noninvent.expenseaccount, cid=cmp1):
                            acc = accounts1.objects.get(
                                name=noninvent.expenseaccount, cid=cmp1)
                            acc.balance = acc.balance - newtot
                            acc.save()
                    except:
                        pass
                    if placosupply == cmp1.state:
                        tax = taxamnt[3] / 2
                        otax = otaxamnt[3] / 2
                        accocgst = accounts1.objects.get(
                            name='Input CGST', cid=cmp1)
                        ta = tax - otax
                        accocgst.balance = accocgst.balance + ta
                        accocgst.save()
                        accosgst = accounts1.objects.get(
                            name='Input SGST', cid=cmp1)
                        accosgst.balance = accosgst.balance + ta
                        accosgst.save()
                    else:
                        accoigst = accounts1.objects.get(
                            name='Input IGST', cid=cmp1)
                        ta = taxamnt[3] - otaxamnt[3]
                        accoigst.balance = accoigst.balance + ta
                        accoigst.save()
                elif int(qty[3]) < int(creqty[3]):
                    noninvent.qty = int(noninvent.qty) - \
                        (int(creqty[3]) - int(qty[3]))
                    noninvent.save()
                    newtot = otot[3] - tot[3]
                    try:
                        if accounts.objects.get(name=noninvent.expenseaccount, cid=cmp1):
                            acc = accounts.objects.get(
                                name=noninvent.expenseaccount, cid=cmp1)
                            acc.balance = acc.balance + newtot
                            acc.save()
                    except:
                        pass
                    try:
                        if accounts1.objects.get(name=noninvent.expenseaccount, cid=cmp1):
                            acc = accounts1.objects.get(
                                name=noninvent.expenseaccount, cid=cmp1)
                            acc.balance = acc.balance + newtot
                            acc.save()
                    except:
                        pass
                    if placosupply == cmp1.state:
                        tax = taxamnt[3] / 2
                        otax = otaxamnt[3] / 2
                        accocgst = accounts1.objects.get(
                            name='Input CGST', cid=cmp1)
                        ta = otax - tax
                        accocgst.balance = accocgst.balance - ta
                        accocgst.save()
                        accosgst = accounts1.objects.get(
                            name='Input SGST', cid=cmp1)
                        accosgst.balance = accosgst.balance - ta
                        accosgst.save()
                    else:
                        accoigst = accounts1.objects.get(
                            name='Input IGST', cid=cmp1)
                        ta = otaxamnt[3] - taxamnt[3]
                        accoigst.balance = accoigst.balance - ta
                        accoigst.save()
                else:
                    pass
        except:
            pass
        try:
            if bundle.objects.get(name=product[3], cid=cmp1):
                bundl = bundle.objects.get(name=product[3], cid=cmp1)
                if int(qty[3]) > int(creqty[3]):
                    bundl.qty = int(bundl.qty) + (int(qty[3]) - int(creqty[3]))
                    bundl.save()
                    if placosupply == cmp1.state:
                        tax = taxamnt[3] / 2
                        otax = otaxamnt[3] / 2
                        accocgst = accounts1.objects.get(
                            name='Input CGST', cid=cmp1)
                        ta = tax - otax
                        accocgst.balance = accocgst.balance + ta
                        accocgst.save()
                        accosgst = accounts1.objects.get(
                            name='Input SGST', cid=cmp1)
                        accosgst.balance = accosgst.balance + ta
                        accosgst.save()
                    else:
                        accoigst = accounts1.objects.get(
                            name='Input IGST', cid=cmp1)
                        ta = taxamnt[3] - otaxamnt[3]
                        accoigst.balance = accoigst.balance + ta
                        accoigst.save()
                elif int(qty[3]) < int(creqty[3]):
                    bundl.qty = int(bundl.qty) - (int(creqty[3]) - int(qty[3]))
                    bundl.save()
                    if placosupply == cmp1.state:
                        tax = taxamnt[3] / 2
                        otax = otaxamnt[3] / 2
                        accocgst = accounts1.objects.get(
                            name='Input CGST', cid=cmp1)
                        ta = otax - tax
                        accocgst.balance = accocgst.balance - ta
                        accocgst.save()
                        accosgst = accounts1.objects.get(
                            name='Input SGST', cid=cmp1)
                        accosgst.balance = accosgst.balance - ta
                        accosgst.save()
                    else:
                        accoigst = accounts1.objects.get(
                            name='Input IGST', cid=cmp1)
                        ta = otaxamnt[3] - taxamnt[3]
                        accoigst.balance = accoigst.balance - ta
                        accoigst.save()

                else:
                    pass
        except:
            pass
        suprr.mailaddr = request.POST['mailaddr']
        suprr.paymdate = request.POST['paymdate']
        suprr.ccatego = request.POST['ccatego']
        suprr.cdescrip = request.POST['cdescrip']
        suprr.cqty = request.POST['cqty']
        suprr.cprice = request.POST['cprice']
        suprr.ctotal = request.POST['ctotal']
        suprr.ccatego2 = request.POST['ccatego2']
        suprr.cdescrip2 = request.POST['cdescrip2']
        suprr.cqty2 = request.POST['cqty2']
        suprr.cprice2 = request.POST['cprice2']
        suprr.ctotal2 = request.POST['ctotal2']
        suprr.ccatego3 = request.POST['ccatego3']
        suprr.cdescrip3 = request.POST['cdescrip3']
        suprr.cqty3 = request.POST['cqty3']
        suprr.cprice3 = request.POST['cprice3']
        suprr.ctotal3 = request.POST['ctotal3']
        suprr.ccatego4 = request.POST['ccatego4']
        suprr.cdescrip4 = request.POST['cdescrip4']
        suprr.cqty4 = request.POST['cqty4']
        suprr.cprice4 = request.POST['cprice4']
        suprr.ctotal4 = request.POST['ctotal4']
        suprr.product = request.POST['product']
        suprr.hsn = request.POST['hsn']
        suprr.qty = request.POST['qty']
        suprr.price = request.POST['price']
        suprr.total = request.POST['total']
        suprr.product2 = request.POST['product2']
        suprr.hsn2 = request.POST['hsn2']
        suprr.qty2 = request.POST['qty2']
        suprr.price2 = request.POST['price2']
        suprr.total2 = request.POST['total2']
        suprr.product3 = request.POST['product3']
        suprr.hsn3 = request.POST['hsn3']
        suprr.qty3 = request.POST['qty3']
        suprr.price3 = request.POST['price3']
        suprr.total3 = request.POST['total3']
        suprr.product4 = request.POST['product4']
        suprr.hsn4 = request.POST['hsn4']
        suprr.qty4 = request.POST['qty4']
        suprr.price4 = request.POST['price4']
        suprr.total4 = request.POST['total4']
        suprr.subtotal = request.POST['subtotal']
        suprr.tax = request.POST['tax']
        suprr.tax2 = request.POST['tax2']
        suprr.tax3 = request.POST['tax3']
        suprr.tax4 = request.POST['tax4']
        suprr.taxamount = request.POST['taxamount']
        suprr.grandtotal = request.POST['grandtotal']
        suprr.creditamount = request.POST['creditamount']
        suprr.save()
        return redirect('goexpences')
    except:
        return redirect('goexpences')


@login_required(login_url='regcomp')
def deletesuplcredit(request, id):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        supl = suplrcredit.objects.get(suppliercreditid=id, cid=cmp1)
        supl.delete()
        return redirect('goexpences')
    except:
        return redirect('goexpences')


@login_required(login_url='regcomp')
def creditindex(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        toda = date.today()
        tod = toda.strftime("%Y")
        todae = toda.strftime("%Y-%m-%d")
        preyear = int(tod) - 1
        crd1 = credit.objects.filter(cid=cmp1).all()
        customers = customer.objects.filter(cid=cmp1).all()
        inv = inventory.objects.filter(cid=cmp1).all()
        bun = bundle.objects.filter(cid=cmp1).all()
        noninv = noninventory.objects.filter(cid=cmp1).all()
        ser = service.objects.filter(cid=cmp1).all()
        invoi = invoice.objects.filter(cid=cmp1).all()
        context = {'crd': crd1, 'customers': customers, 'cmp1': cmp1, 'inv': inv, 'bun': bun, 'noninv': noninv,
                   'ser': ser, 'tod': tod, 'preyear': preyear, 'invoi': invoi, 'todae': todae}
        return render(request, 'app1/credit.html', context)
    except:
        return redirect('gosalesrecords')


@login_required(login_url='regcomp')
def creditcreate(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        grndtot = float(request.POST['grndtot'])
        accon = accounts1.objects.get(
            name='Account Receivable(Debtors)', cid=cmp1)
        if grndtot != 0:
            accon.balance = accon.balance - grndtot
            accon.save()
        else:
            pass
        placosupply = request.POST['place']
        qty = [request.POST['qty'], request.POST['qty1'],
               request.POST['qty2'], request.POST['qty3']]
        totals = [float(request.POST['total']), float(request.POST['total1']), float(request.POST['total2']),
                  float(request.POST['total3'])]
        taxo = [float(request.POST['tax']) / 100, float(request.POST['tax1']) / 100,
                float(request.POST['tax2']) / 100,
                float(request.POST['tax3']) / 100]
        taxamnt = [totals[0] * taxo[0], totals[1] * taxo[1],
                   totals[2] * taxo[2], totals[3] * taxo[3]]
        product = [request.POST['product'], request.POST['product1'], request.POST['product2'],
                   request.POST['product3']]
        for (p, q, t, tx) in zip(product, qty, totals, taxamnt):
            try:
                if inventory.objects.get(name=p, cid=cmp1):
                    invent = inventory.objects.get(name=p, cid=cmp1)
                    invent.initialqty = int(invent.initialqty) + int(q)
                    invent.save()
                    newcost = float(invent.cost) * float(q)
                    invenacnt = invent.invacnt
                    if accounts1.objects.get(name=invenacnt, cid=cmp1):
                        accoun = accounts1.objects.get(
                            name=invenacnt, cid=cmp1)
                        accoun.balance = accoun.balance + newcost
                        accoun.save()
                    elif accounts.objects.get(name=invenacnt, cid=cmp1):
                        accoun = accounts.objects.get(name=invenacnt, cid=cmp1)
                        accoun.balance = accoun.balance + newcost
                        accoun.save()
                    else:
                        pass
                    try:
                        if accounts.objects.get(name=invent.incomeacnt, cid=cmp1):
                            acc = accounts.objects.get(
                                name=invent.incomeacnt, cid=cmp1)
                            acc.balance = acc.balance - t
                            acc.save()
                    except:
                        pass
                    try:
                        if accounts1.objects.get(name=invent.incomeacnt, cid=cmp1):
                            acc = accounts1.objects.get(
                                name=invent.incomeacnt, cid=cmp1)
                            acc.balance = acc.balance - t
                            acc.save()
                    except:
                        pass
                    if accounts1.objects.get(name=invent.expacnt, cid=cmp1):
                        accoun = accounts1.objects.get(
                            name=invent.expacnt, cid=cmp1)
                        accoun.balance = accoun.balance - newcost
                        accoun.save()
                    elif accounts.objects.get(name=invent.expacnt, cid=cmp1):
                        accoun = accounts.objects.get(
                            name=invent.expacnt, cid=cmp1)
                        accoun.balance = accoun.balance - newcost
                        accoun.save()
                    else:
                        pass
                    if placosupply == cmp1.state:
                        tax = tx / 2
                        accocgst = accounts1.objects.get(
                            name='Output CGST', cid=cmp1)
                        accocgst.balance = accocgst.balance - tax
                        accocgst.save()
                        accosgst = accounts1.objects.get(
                            name='Output SGST', cid=cmp1)
                        accosgst.balance = accosgst.balance - tax
                        accosgst.save()
                    else:
                        accoigst = accounts1.objects.get(
                            name='Output IGST', cid=cmp1)
                        accoigst.balance = accoigst.balance - tx
                        accoigst.save()
            except:
                pass
            try:
                if noninventory.objects.get(name=p, cid=cmp1):
                    noninvent = noninventory.objects.get(name=p, cid=cmp1)
                    noninvent.qty = int(noninvent.qty) + int(q)
                    noninvent.save()
                    try:
                        if accounts.objects.get(name=noninvent.income, cid=cmp1):
                            acc = accounts.objects.get(
                                name=noninvent.income, cid=cmp1)
                            acc.balance = acc.balance - t
                            acc.save()
                    except:
                        pass
                    try:
                        if accounts1.objects.get(name=noninvent.income, cid=cmp1):
                            acc = accounts1.objects.get(
                                name=noninvent.income, cid=cmp1)
                            acc.balance = acc.balance - t
                            acc.save()
                    except:
                        pass
                    if placosupply == cmp1.state:
                        tax = tx / 2
                        accocgst = accounts1.objects.get(
                            name='Output CGST', cid=cmp1)
                        accocgst.balance = accocgst.balance - tax
                        accocgst.save()
                        accosgst = accounts1.objects.get(
                            name='Output SGST', cid=cmp1)
                        accosgst.balance = accosgst.balance - tax
                        accosgst.save()
                    else:
                        accoigst = accounts1.objects.get(
                            name='Output IGST', cid=cmp1)
                        accoigst.balance = accoigst.balance - tx
                        accoigst.save()
            except:
                pass
        buntaxamnt = [float(request.POST['taxamount11']), float(request.POST['taxamount12']),
                      float(request.POST['taxamount13']), float(
                          request.POST['taxamount14']),
                      float(request.POST['taxamount21']), float(
                          request.POST['taxamount22']),
                      float(request.POST['taxamount23']), float(
                          request.POST['taxamount24']),
                      float(request.POST['taxamount31']), float(
                          request.POST['taxamount32']),
                      float(request.POST['taxamount33']), float(
                          request.POST['taxamount34']),
                      float(request.POST['taxamount41']), float(
                          request.POST['taxamount42']),
                      float(request.POST['taxamount43']), float(request.POST['taxamount44'])]
        bunproduct = [request.POST['product11'], request.POST['product12'], request.POST['product13'],
                      request.POST['product14'], request.POST['product21'], request.POST['product22'],
                      request.POST['product23'], request.POST['product24'], request.POST['product31'],
                      request.POST['product32'], request.POST['product33'], request.POST['product34'],
                      request.POST['product41'], request.POST['product42'], request.POST['product43'],
                      request.POST['product44']]
        bunqty = [request.POST['qty11'], request.POST['qty12'], request.POST['qty13'], request.POST['qty14'],
                  request.POST['qty21'], request.POST['qty22'], request.POST['qty23'], request.POST['qty24'],
                  request.POST['qty31'], request.POST['qty32'], request.POST['qty33'], request.POST['qty34'],
                  request.POST['qty41'], request.POST['qty42'], request.POST['qty43'], request.POST['qty44']]
        buntotals = [float(request.POST['total11']), float(request.POST['total12']), float(request.POST['total13']),
                     float(request.POST['total14']), float(
                         request.POST['total21']), float(request.POST['total22']),
                     float(request.POST['total23']),
                     float(request.POST['total24']), float(
                         request.POST['total31']), float(request.POST['total32']),
                     float(request.POST['total33']),
                     float(request.POST['total34']), float(
                         request.POST['total41']), float(request.POST['total42']),
                     float(request.POST['total43']),
                     float(request.POST['total44'])]
        for (p, q, t, tx) in zip(bunproduct, bunqty, buntotals, buntaxamnt):
            try:
                if inventory.objects.get(name=p, cid=cmp1):
                    invent = inventory.objects.get(name=p, cid=cmp1)
                    invent.initialqty = int(invent.initialqty) + int(q)
                    invent.save()
                    newcost = float(invent.cost) * float(q)
                    invenacnt = invent.invacnt
                    if accounts1.objects.get(name=invenacnt, cid=cmp1):
                        accoun = accounts1.objects.get(
                            name=invenacnt, cid=cmp1)
                        accoun.balance = accoun.balance + newcost
                        accoun.save()
                    elif accounts.objects.get(name=invenacnt, cid=cmp1):
                        accoun = accounts.objects.get(name=invenacnt, cid=cmp1)
                        accoun.balance = accoun.balance + newcost
                        accoun.save()
                    else:
                        pass
                    try:
                        if accounts.objects.get(name=invent.incomeacnt, cid=cmp1):
                            acc = accounts.objects.get(
                                name=invent.incomeacnt, cid=cmp1)
                            acc.balance = acc.balance - t
                            acc.save()
                    except:
                        pass
                    try:
                        if accounts1.objects.get(name=invent.incomeacnt, cid=cmp1):
                            acc = accounts1.objects.get(
                                name=invent.incomeacnt, cid=cmp1)
                            acc.balance = acc.balance - t
                            acc.save()
                    except:
                        pass
                    if accounts1.objects.get(name=invent.expacnt, cid=cmp1):
                        accoun = accounts1.objects.get(
                            name=invent.expacnt, cid=cmp1)
                        accoun.balance = accoun.balance - newcost
                        accoun.save()
                    elif accounts.objects.get(name=invent.expacnt, cid=cmp1):
                        accoun = accounts.objects.get(
                            name=invent.expacnt, cid=cmp1)
                        accoun.balance = accoun.balance - newcost
                        accoun.save()
                    else:
                        pass
                    if placosupply == cmp1.state:
                        tax = tx / 2
                        accocgst = accounts1.objects.get(
                            name='Output CGST', cid=cmp1)
                        accocgst.balance = accocgst.balance - tax
                        accocgst.save()
                        accosgst = accounts1.objects.get(
                            name='Output SGST', cid=cmp1)
                        accosgst.balance = accosgst.balance - tax
                        accosgst.save()
                    else:
                        accoigst = accounts1.objects.get(
                            name='Output IGST', cid=cmp1)
                        accoigst.balance = accoigst.balance - tx
                        accoigst.save()
            except:
                pass
            try:
                if noninventory.objects.get(name=p, cid=cmp1):
                    noninvent = noninventory.objects.get(name=p, cid=cmp1)
                    noninvent.qty = int(noninvent.qty) + int(q)
                    noninvent.save()
                    try:
                        if accounts.objects.get(name=noninvent.income, cid=cmp1):
                            acc = accounts.objects.get(
                                name=noninvent.income, cid=cmp1)
                            acc.balance = acc.balance - t
                            acc.save()
                    except:
                        pass
                    try:
                        if accounts1.objects.get(name=noninvent.income, cid=cmp1):
                            acc = accounts1.objects.get(
                                name=noninvent.income, cid=cmp1)
                            acc.balance = acc.balance - t
                            acc.save()
                    except:
                        pass
                    if placosupply == cmp1.state:
                        tax = tx / 2
                        accocgst = accounts1.objects.get(
                            name='Output CGST', cid=cmp1)
                        accocgst.balance = accocgst.balance - tax
                        accocgst.save()
                        accosgst = accounts1.objects.get(
                            name='Output SGST', cid=cmp1)
                        accosgst.balance = accosgst.balance - tax
                        accosgst.save()
                    else:
                        accoigst = accounts1.objects.get(
                            name='Output IGST', cid=cmp1)
                        accoigst.balance = accoigst.balance - tx
                        accoigst.save()
            except:
                pass
        crd2 = credit(customer=request.POST['customer'], mail=request.POST['mail'], biladdr=request.POST['biladdr'],
                      creditdate=request.POST['creditdate'], place=request.POST['place'],
                      creditno='1000',
                      invnum=request.POST['invnum'], invperiod=request.POST['invperiod'], subtot=request.POST['subtot'],
                      tax=request.POST['tax'], taxamnt=request.POST['taxamnt'], grndtot=request.POST['grndtot'],
                      product=request.POST['product'], descrip=request.POST['descrip'], qty=request.POST['qty'],
                      price=request.POST['price'], total=request.POST['total'], product1=request.POST['product1'],
                      descrip1=request.POST['descrip1'], qty1=request.POST['qty1'], price1=request.POST['price1'],
                      total1=request.POST['total1'], tax1=request.POST['tax1'], product2=request.POST['product2'],
                      descrip2=request.POST['descrip2'],
                      qty2=request.POST['qty2'], price2=request.POST['price2'], total2=request.POST['total2'],
                      tax2=request.POST['tax2'],
                      product3=request.POST['product3'], descrip3=request.POST['descrip3'], qty3=request.POST['qty3'],
                      price3=request.POST['price3'], total3=request.POST['total3'], tax3=request.POST['tax3'], cid=cmp1)
        crd2.save()
        crd2.creditno = int(crd2.creditno) + crd2.creditnoteid
        crd2.save()
        return redirect('gosalesrecords')
    except:
        return redirect('gosalesrecords')


@login_required(login_url='regcomp')
def paymentindex(request):
    try:
        toda = date.today()
        tod = toda.strftime("%Y-%m-%d")
        cmp1 = company.objects.get(id=request.session["uid"])
        customers = customer.objects.filter(cid=cmp1).all()
        acounts = accounts.objects.filter(cid=cmp1)
        context = {'cmp1': cmp1, 'customers': customers,
                   'tod': tod, 'accoun': acounts}
        return render(request, 'app1/payment.html', context)
    except:
        return redirect('gosalesrecords')


@login_required(login_url='regcomp')
def paymentcreate(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        pay2 = payment(customer=request.POST['customer'], email=request.POST['email'],
                       findinvoice=request.POST['findinvoice'], paymdate=request.POST['paymdate'],
                       pmethod=request.POST['pmethod'], refno='1000', depto=request.POST['depto'],
                       amtreceived=request.POST['amtreceived'],
                       descrip=request.POST['descrip'], duedate=request.POST['duedate'], orgamt=request.POST['orgamt'],
                       openbal=request.POST['openbal'], payment=request.POST['payment'],
                       amtapply=request.POST['amtapply'],
                       amtcredit=request.POST['amtcredit'], descrip1=request.POST['descrip1'],
                       duedate1=request.POST['duedate1'], orgamt1=request.POST['orgamt1'],
                       openbal1=request.POST['openbal1'], payment1=request.POST['payment1'],
                       descrip2=request.POST['descrip2'],
                       duedate2=request.POST['duedate2'], orgamt2=request.POST['orgamt2'],
                       openbal2=request.POST['openbal2'],
                       payment2=request.POST['payment2'], descrip3=request.POST['descrip3'],
                       duedate3=request.POST['duedate3'],
                       orgamt3=request.POST['orgamt3'], openbal3=request.POST['openbal3'],
                       payment3=request.POST['payment3'], descrip4=request.POST['descrip4'],
                       duedate4=request.POST['duedate4'],
                       orgamt4=request.POST['orgamt4'], openbal4=request.POST['openbal4'],
                       payment4=request.POST['payment4'], descrip5=request.POST['descrip5'],
                       duedate5=request.POST['duedate5'],
                       orgamt5=request.POST['orgamt5'], openbal5=request.POST['openbal5'],
                       payment5=request.POST['payment5'], descrip6=request.POST['descrip6'],
                       duedate6=request.POST['duedate6'],
                       orgamt6=request.POST['orgamt6'], openbal6=request.POST['openbal6'],
                       payment6=request.POST['payment6'], descrip7=request.POST['descrip7'],
                       duedate7=request.POST['duedate7'],
                       orgamt7=request.POST['orgamt7'], openbal7=request.POST['openbal7'],
                       payment7=request.POST['payment7'], descrip8=request.POST['descrip8'],
                       duedate8=request.POST['duedate8'],
                       orgamt8=request.POST['orgamt8'], openbal8=request.POST['openbal8'],
                       payment8=request.POST['payment8'], descrip9=request.POST['descrip9'],
                       duedate9=request.POST['duedate9'],
                       orgamt9=request.POST['orgamt9'], openbal9=request.POST['openbal9'],
                       payment9=request.POST['payment9'], cid=cmp1)
        pay2.save()
        pay2.refno = int(pay2.refno) + pay2.paymentid
        pay2.save()
        amtreceived = float(request.POST['amtreceived'])
        accont = accounts1.objects.get(
            name='Account Receivable(Debtors)', cid=cmp1)
        accont.balance = accont.balance - amtreceived
        accont.save()
        deposito = request.POST['depto']
        try:
            if accounts1.objects.get(name=deposito, cid=cmp1):
                print(deposito)
                acconut = accounts1.objects.get(name=deposito, cid=cmp1)
                acconut.balance = acconut.balance + amtreceived
                acconut.save()
        except:
            pass
        try:
            if accounts.objects.get(name=deposito, cid=cmp1):
                acconut = accounts.objects.get(name=deposito, cid=cmp1)
                acconut.balance = acconut.balance + amtreceived
                acconut.save()
        except:
            pass
        description = [request.POST['descrip'].split()[0], request.POST['descrip1'].split()[0],
                       request.POST['descrip2'].split(
        )[0], request.POST['descrip3'].split()[0],
            request.POST['descrip4'].split(
        )[0], request.POST['descrip5'].split()[0],
            request.POST['descrip6'].split(
        )[0], request.POST['descrip7'].split()[0],
            request.POST['descrip8'].split()[0], request.POST['descrip9'].split()[0]]
        payments = [request.POST['payment'], request.POST['payment1'], request.POST['payment2'],
                    request.POST['payment3'],
                    request.POST['payment4'], request.POST['payment5'], request.POST['payment6'],
                    request.POST['payment7'],
                    request.POST['payment8'], request.POST['payment9']]
        openbalance = [request.POST['openbal'], request.POST['openbal1'], request.POST['openbal2'],
                       request.POST['openbal3'], request.POST['openbal4'], request.POST['openbal5'],
                       request.POST['openbal6'], request.POST['openbal7'], request.POST['openbal8'],
                       request.POST['openbal9']]
        try:
            if invoice.objects.get(invoiceno=description[0], cid=cmp1) and description[0] != 'undefined':
                print(deposito)
                invo = invoice.objects.get(invoiceno=description[0], cid=cmp1)
                invo.amtrecvd = int(invo.amtrecvd) + int(payments[0])
                invo.baldue = float(openbalance[0]) - float(payments[0])
                invo.save()
        except:
            pass
        try:
            if invoice.objects.get(invoiceno=description[1], cid=cmp1) and description[1] != 'undefined':
                invo = invoice.objects.get(invoiceno=description[1], cid=cmp1)
                invo.amtrecvd = int(invo.amtrecvd) + int(payments[1])
                invo.baldue = float(openbalance[1]) - float(payments[1])
                invo.save()
        except:
            pass
        try:
            if invoice.objects.get(invoiceno=description[2], cid=cmp1) and description[2] != 'undefined':
                invo = invoice.objects.get(invoiceno=description[2], cid=cmp1)
                invo.amtrecvd = int(invo.amtrecvd) + int(payments[2])
                invo.baldue = float(openbalance[2]) - float(payments[2])
                invo.save()
        except:
            pass
        try:
            if invoice.objects.get(invoiceno=description[3], cid=cmp1) and description[3] != 'undefined':
                invo = invoice.objects.get(invoiceno=description[3], cid=cmp1)
                invo.amtrecvd = int(invo.amtrecvd) + int(payments[3])
                invo.baldue = float(openbalance[3]) - float(payments[3])
                invo.save()
        except:
            pass
        try:
            if invoice.objects.get(invoiceno=description[4], cid=cmp1) and description[4] != 'undefined':
                invo = invoice.objects.get(invoiceno=description[4], cid=cmp1)
                invo.amtrecvd = int(invo.amtrecvd) + int(payments[4])
                invo.baldue = float(openbalance[4]) - float(payments[4])
                invo.save()
        except:
            pass
        try:
            if invoice.objects.get(invoiceno=description[5], cid=cmp1) and description[5] != 'undefined':
                invo = invoice.objects.get(invoiceno=description[5], cid=cmp1)
                invo.amtrecvd = int(invo.amtrecvd) + int(payments[5])
                invo.baldue = float(openbalance[5]) - float(payments[5])
                invo.save()
        except:
            pass
        try:
            if invoice.objects.get(invoiceno=description[6], cid=cmp1) and description[6] != 'undefined':
                invo = invoice.objects.get(invoiceno=description[6], cid=cmp1)
                invo.amtrecvd = int(invo.amtrecvd) + int(payments[6])
                invo.baldue = float(openbalance[6]) - float(payments[6])
                invo.save()
        except:
            pass
        try:
            if invoice.objects.get(invoiceno=description[7], cid=cmp1) and description[7] != 'undefined':
                invo = invoice.objects.get(invoiceno=description[7], cid=cmp1)
                invo.amtrecvd = int(invo.amtrecvd) + int(payments[7])
                invo.baldue = float(openbalance[7]) - float(payments[7])
                invo.save()
        except:
            pass
        try:
            if invoice.objects.get(invoiceno=description[8], cid=cmp1) and description[8] != 'undefined':
                invo = invoice.objects.get(invoiceno=description[8], cid=cmp1)
                invo.amtrecvd = int(invo.amtrecvd) + int(payments[8])
                invo.baldue = float(openbalance[8]) - float(payments[8])
                invo.save()
        except:
            pass
        try:
            if invoice.objects.get(invoiceno=description[9]) and description[9] != 'undefined':
                invo = invoice.objects.get(invoiceno=description[9], cid=cmp1)
                invo.amtrecvd = int(invo.amtrecvd) + int(payments[9])
                invo.baldue = float(openbalance[9]) - float(payments[9])
                invo.save()
        except:
            pass
        return redirect('gosalesrecords')
    except:
        return redirect('gosalesrecords')


@login_required(login_url='regcomp')
def deletepayment(request, id):
    try:
        pay = payment.objects.get(paymentid=id)
        pay.delete()
        return redirect('gosalesrecords')
    except:
        return redirect('gosalesrecords')


@login_required(login_url='regcomp')
def deletecredit(request, id):
    try:
        crd = credit.objects.get(creditnoteid=id)
        crd.delete()
        return redirect('gosalesrecords')
    except:
        return redirect('gosalesrecords')


@login_required(login_url='regcomp')
def editcredit(request, id):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        inv = inventory.objects.filter(cid=cmp1).all()
        bun = bundle.objects.filter(cid=cmp1).all()
        noninv = noninventory.objects.filter(cid=cmp1).all()
        ser = service.objects.filter(cid=cmp1).all()
        credi = credit.objects.get(creditnoteid=id)
        invo = invoice.objects.get(invoiceno=credi.invnum, cid=cmp1)
        context = {'credit': credi, 'cmp1': cmp1, 'inv': inv,
                   'noninv': noninv, 'bun': bun, 'ser': ser, 'invo': invo}
        return render(request, 'app1/editcredit.html', context)
    except:
        return redirect('gosalesrecords')


@login_required(login_url='regcomp')
def showcredit(request, id):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        credi = credit.objects.get(creditnoteid=id)
        acounts = accounts.objects.filter(cid=cmp1)
        styles = customize.objects.get(selected='selected', cid=cmp1)
        if styles.template == 'classic':
            custo = salesrecpts.objects.get(salesrecptsid=id)
            context = {'credit': credi, 'cmp1': cmp1, 'accoun': acounts, 'styles': styles}
            return render(request, 'app1/showcredit.html', context)
        elif styles.template == 'modern':
            custo = salesrecpts.objects.get(salesrecptsid=id)
            context = {'credit': credi, 'cmp1': cmp1, 'accoun': acounts, 'styles': styles}
            return render(request, 'app1/showcreditmodern.html', context)
        elif styles.template == 'fresh':
            custo = salesrecpts.objects.get(salesrecptsid=id)
            context = {'credit': credi, 'cmp1': cmp1, 'accoun': acounts, 'styles': styles}
            return render(request, 'app1/showcreditfresh.html', context)
        elif styles.template == 'friendly':
            custo = salesrecpts.objects.get(salesrecptsid=id)
            context = {'credit': credi, 'cmp1': cmp1, 'accoun': acounts, 'styles': styles}
            return render(request, 'app1/showcreditfriendly.html', context)
        else:
            return redirect('gosalesrecords')
    except:
        return redirect('gosalesrecords')


@login_required(login_url='regcomp')
def updatecredit(request, id):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        credi = credit.objects.get(creditnoteid=id, cid=cmp1)
        product = [request.POST['product'], request.POST['product1'], request.POST['product2'],
                   request.POST['product3']]
        creqty = [credi.qty, credi.qty1, credi.qty2, credi.qty3]
        qty = [request.POST['qty'], request.POST['qty1'],
               request.POST['qty2'], request.POST['qty3']]
        taxes = [float(credi.tax) / 100, float(credi.tax1) / 100,
                 float(credi.tax2) / 100, float(credi.tax3) / 100]
        otaxamnt = [float(credi.total) * taxes[0], float(credi.total1) * taxes[1], float(credi.total2) * taxes[2],
                    float(credi.total3) * taxes[3]]
        taxamnt = [float(request.POST['taxamount']), float(request.POST['taxamount1']),
                   float(request.POST['taxamount2']),
                   float(request.POST['taxamount3'])]
        otot = [float(credi.total), float(credi.total1),
                float(credi.total2), float(credi.total3)]
        tot = [float(request.POST['total']), float(request.POST['total1']), float(request.POST['total2']),
               float(request.POST['total3'])]
        placosupply = request.POST['place']
        for (p, q, cq, tt, ot, tx, otx) in zip(product, qty, creqty, tot, otot, taxamnt, otaxamnt):
            try:
                if inventory.objects.get(name=p, cid=cmp1):
                    invent = inventory.objects.get(name=p, cid=cmp1)
                    if int(q) > int(cq):
                        invent.initialqty = int(
                            invent.initialqty) + (int(q) - int(cq))
                        invent.save()
                        cxq = float(invent.cost) * (float(q) - float(cq))
                        invenacnt = invent.invacnt
                        if accounts1.objects.get(name=invenacnt, cid=cmp1):
                            accoun = accounts1.objects.get(
                                name=invenacnt, cid=cmp1)
                            accoun.balance = accoun.balance + cxq
                            accoun.save()
                        elif accounts.objects.get(name=invenacnt, cid=cmp1):
                            accoun = accounts.objects.get(
                                name=invenacnt, cid=cmp1)
                            accoun.balance = accoun.balance + cxq
                            accoun.save()
                        else:
                            pass
                        newtot = tt - ot
                        try:
                            if accounts.objects.get(name=invent.incomeacnt, cid=cmp1):
                                acc = accounts.objects.get(
                                    name=invent.incomeacnt, cid=cmp1)
                                acc.balance = acc.balance - newtot
                                acc.save()
                        except:
                            pass
                        try:
                            if accounts1.objects.get(name=invent.incomeacnt, cid=cmp1):
                                acc = accounts1.objects.get(
                                    name=invent.incomeacnt, cid=cmp1)
                                acc.balance = acc.balance - newtot
                                acc.save()
                        except:
                            pass
                        if accounts1.objects.get(name=invent.expacnt, cid=cmp1):
                            accoun = accounts1.objects.get(
                                name=invent.expacnt, cid=cmp1)
                            accoun.balance = accoun.balance - cxq
                            accoun.save()
                        elif accounts.objects.get(name=invent.expacnt, cid=cmp1):
                            accoun = accounts.objects.get(
                                name=invent.expacnt, cid=cmp1)
                            accoun.balance = accoun.balance - cxq
                            accoun.save()
                        else:
                            pass
                        if placosupply == cmp1.state:
                            tax = tx / 2
                            otax = otx / 2
                            accocgst = accounts1.objects.get(
                                name='Output CGST', cid=cmp1)
                            ta = tax - otax
                            accocgst.balance = accocgst.balance - ta
                            accocgst.save()
                            accosgst = accounts1.objects.get(
                                name='Output SGST', cid=cmp1)
                            accosgst.balance = accosgst.balance - ta
                            accosgst.save()
                        else:
                            accoigst = accounts1.objects.get(
                                name='Output IGST', cid=cmp1)
                            ta = tx - otx
                            accoigst.balance = accoigst.balance - ta
                            accoigst.save()
                    elif int(q) < int(cq):
                        invent.initialqty = int(
                            invent.initialqty) - (int(cq) - int(q))
                        invent.save()
                        cxq = float(invent.cost) * (float(cq) - float(q))
                        invenacnt = invent.invacnt
                        if accounts1.objects.get(name=invenacnt, cid=cmp1):
                            accoun = accounts1.objects.get(
                                name=invenacnt, cid=cmp1)
                            accoun.balance = accoun.balance - cxq
                            accoun.save()
                        elif accounts.objects.get(name=invenacnt, cid=cmp1):
                            accoun = accounts.objects.get(
                                name=invenacnt, cid=cmp1)
                            accoun.balance = accoun.balance - cxq
                            accoun.save()
                        else:
                            pass
                        newtot = ot - tt
                        try:
                            if accounts.objects.get(name=invent.incomeacnt, cid=cmp1):
                                acc = accounts.objects.get(
                                    name=invent.incomeacnt, cid=cmp1)
                                acc.balance = acc.balance + newtot
                                acc.save()
                        except:
                            pass
                        try:
                            if accounts1.objects.get(name=invent.incomeacnt, cid=cmp1):
                                acc = accounts1.objects.get(
                                    name=invent.incomeacnt, cid=cmp1)
                                acc.balance = acc.balance + newtot
                                acc.save()
                        except:
                            pass
                        if accounts1.objects.get(name=invent.expacnt, cid=cmp1):
                            accoun = accounts1.objects.get(
                                name=invent.expacnt, cid=cmp1)
                            accoun.balance = accoun.balance + cxq
                            accoun.save()
                        elif accounts.objects.get(name=invent.expacnt, cid=cmp1):
                            accoun = accounts.objects.get(
                                name=invent.expacnt, cid=cmp1)
                            accoun.balance = accoun.balance + cxq
                            accoun.save()
                        else:
                            pass
                        if placosupply == cmp1.state:
                            tax = tx / 2
                            otax = otx / 2
                            accocgst = accounts1.objects.get(
                                name='Output CGST', cid=cmp1)
                            ta = otax - tax
                            accocgst.balance = accocgst.balance + ta
                            accocgst.save()
                            accosgst = accounts1.objects.get(
                                name='Output SGST', cid=cmp1)
                            accosgst.balance = accosgst.balance + ta
                            accosgst.save()
                        else:
                            accoigst = accounts1.objects.get(
                                name='Output IGST', cid=cmp1)
                            ta = otx - tx
                            accoigst.balance = accoigst.balance + ta
                            accoigst.save()
                    else:
                        pass
                else:
                    pass
            except:
                pass
            try:
                if noninventory.objects.get(name=p, cid=cmp1):
                    noninvent = noninventory.objects.get(name=p, cid=cmp1)
                    if int(q) > int(cq):
                        noninvent.qty = int(noninvent.qty) + \
                            (int(q) - int(cq))
                        noninvent.save()
                        newtot = tt - ot
                        try:
                            if accounts.objects.get(name=noninvent.income, cid=cmp1):
                                acc = accounts.objects.get(
                                    name=noninvent.income, cid=cmp1)
                                acc.balance = acc.balance - newtot
                                acc.save()
                        except:
                            pass
                        try:
                            if accounts1.objects.get(name=noninvent.income, cid=cmp1):
                                acc = accounts1.objects.get(
                                    name=noninvent.income, cid=cmp1)
                                acc.balance = acc.balance - newtot
                                acc.save()
                        except:
                            pass
                        if placosupply == cmp1.state:
                            tax = tx / 2
                            otax = otx / 2
                            accocgst = accounts1.objects.get(
                                name='Output CGST', cid=cmp1)
                            ta = tax - otax
                            accocgst.balance = accocgst.balance - ta
                            accocgst.save()
                            accosgst = accounts1.objects.get(
                                name='Output SGST', cid=cmp1)
                            accosgst.balance = accosgst.balance - ta
                            accosgst.save()
                        else:
                            accoigst = accounts1.objects.get(
                                name='Output IGST', cid=cmp1)
                            ta = tx - otx
                            accoigst.balance = accoigst.balance - ta
                            accoigst.save()
                    elif int(q) < int(cq):
                        noninvent.qty = int(noninvent.qty) - \
                            (int(cq) - int(q))
                        noninvent.save()
                        newtot = ot - tt
                        try:
                            if accounts.objects.get(name=noninvent.income, cid=cmp1):
                                acc = accounts.objects.get(
                                    name=noninvent.income, cid=cmp1)
                                acc.balance = acc.balance + newtot
                                acc.save()
                        except:
                            pass
                        try:
                            if accounts1.objects.get(name=noninvent.income, cid=cmp1):
                                acc = accounts1.objects.get(
                                    name=noninvent.income, cid=cmp1)
                                acc.balance = acc.balance + newtot
                                acc.save()
                        except:
                            pass
                        if placosupply == cmp1.state:
                            tax = tx / 2
                            otax = otx / 2
                            accocgst = accounts1.objects.get(
                                name='Output CGST', cid=cmp1)
                            ta = otax - tax
                            print(ta, type(ta))
                            accocgst.balance = accocgst.balance + ta
                            accocgst.save()
                            accosgst = accounts1.objects.get(
                                name='Output SGST', cid=cmp1)
                            accosgst.balance = accosgst.balance + ta
                            accosgst.save()
                        else:
                            accoigst = accounts1.objects.get(
                                name='Output IGST', cid=cmp1)
                            ta = otx - tx
                            accoigst.balance = accoigst.balance + ta
                            accoigst.save()
                    else:
                        pass
            except:
                pass
        bproduct = [request.POST['product11'], request.POST['product12'], request.POST['product13'],
                    request.POST['product14'], request.POST['product21'], request.POST['product22'],
                    request.POST['product23'],
                    request.POST['product24'], request.POST['product31'], request.POST['product32'],
                    request.POST['product33'],
                    request.POST['product34'], request.POST['product41'], request.POST['product42'],
                    request.POST['product43'],
                    request.POST['product44']]
        bqty = [request.POST['qty11'], request.POST['qty12'], request.POST['qty13'], request.POST['qty14'],
                request.POST['qty21'], request.POST['qty22'], request.POST['qty23'], request.POST['qty24'],
                request.POST['qty31'], request.POST['qty32'], request.POST['qty33'], request.POST['qty34'],
                request.POST['qty41'], request.POST['qty42'], request.POST['qty43'], request.POST['qty44']]
        bcreqty = [request.POST['creqty11'], request.POST['creqty12'], request.POST['creqty13'],
                   request.POST['creqty14'],
                   request.POST['creqty21'], request.POST['creqty22'], request.POST['creqty23'],
                   request.POST['creqty24'],
                   request.POST['creqty31'], request.POST['creqty32'], request.POST['creqty33'],
                   request.POST['creqty34'],
                   request.POST['creqty41'], request.POST['creqty42'], request.POST['creqty43'],
                   request.POST['creqty44']]
        btot = [float(request.POST['total11']), float(request.POST['total12']), float(request.POST['total13']),
                float(request.POST['total14']), float(
                    request.POST['total21']), float(request.POST['total22']),
                float(request.POST['total23']),
                float(request.POST['total24']), float(
                    request.POST['total31']), float(request.POST['total32']),
                float(request.POST['total33']),
                float(request.POST['total34']), float(
                    request.POST['total41']), float(request.POST['total42']),
                float(request.POST['total43']),
                float(request.POST['total44'])]
        botot = [float(request.POST['ototal11']), float(request.POST['ototal12']), float(request.POST['ototal13']),
                 float(request.POST['ototal14']), float(
                     request.POST['ototal21']), float(request.POST['ototal22']),
                 float(request.POST['ototal23']),
                 float(request.POST['ototal24']), float(
                     request.POST['ototal31']), float(request.POST['ototal32']),
                 float(request.POST['ototal33']),
                 float(request.POST['ototal34']), float(
                     request.POST['ototal41']), float(request.POST['ototal42']),
                 float(request.POST['ototal43']), float(request.POST['ototal44'])]
        btaxes = [float(request.POST['otax11']) / 100, float(request.POST['otax12']) / 100,
                  float(request.POST['otax13']) /
                  100, float(request.POST['otax14']) / 100,
                  float(request.POST['otax21']) /
                  100, float(request.POST['otax22']) / 100,
                  float(request.POST['otax23']) /
                  100, float(request.POST['otax24']) / 100,
                  float(request.POST['otax31']) /
                  100, float(request.POST['otax32']) / 100,
                  float(request.POST['otax33']) /
                  100, float(request.POST['otax34']) / 100,
                  float(request.POST['otax41']) /
                  100, float(request.POST['otax42']) / 100,
                  float(request.POST['otax43']) / 100, float(request.POST['otax44']) / 100]
        botaxamnt = [float(botot[0]) * btaxes[0], float(botot[1]) * btaxes[1], float(botot[2]) * btaxes[2],
                     float(botot[3]) * btaxes[3], float(botot[4]) *
                     btaxes[4], float(botot[5]) * btaxes[5],
                     float(botot[6]) * btaxes[6], float(botot[7]) *
                     btaxes[7], float(botot[8]) * btaxes[8],
                     float(botot[9]) * btaxes[9], float(botot[10]) *
                     btaxes[10], float(botot[11]) * btaxes[11],
                     float(botot[12]) * btaxes[12], float(botot[13]) *
                     btaxes[13], float(botot[14]) * btaxes[14],
                     float(botot[15]) * btaxes[15]]
        btaxamnt = [float(request.POST['taxamount11']), float(request.POST['taxamount12']),
                    float(request.POST['taxamount13']), float(
                        request.POST['taxamount14']),
                    float(request.POST['taxamount21']), float(
                        request.POST['taxamount22']),
                    float(request.POST['taxamount23']), float(
                        request.POST['taxamount24']),
                    float(request.POST['taxamount31']), float(
                        request.POST['taxamount32']),
                    float(request.POST['taxamount33']), float(
                        request.POST['taxamount34']),
                    float(request.POST['taxamount41']), float(
                        request.POST['taxamount42']),
                    float(request.POST['taxamount43']), float(request.POST['taxamount44'])]
        for (p, q, cq, tt, ot, tx, otx) in zip(bproduct, bqty, bcreqty, btot, botot, btaxamnt, botaxamnt):
            try:
                if inventory.objects.get(name=p, cid=cmp1):
                    invent = inventory.objects.get(name=p, cid=cmp1)
                    if int(q) > int(cq):
                        invent.initialqty = int(
                            invent.initialqty) + (int(q) - int(cq))
                        invent.save()
                        cxq = float(invent.cost) * (float(q) - float(cq))
                        invenacnt = invent.invacnt
                        if accounts1.objects.get(name=invenacnt, cid=cmp1):
                            accoun = accounts1.objects.get(
                                name=invenacnt, cid=cmp1)
                            accoun.balance = accoun.balance + cxq
                            accoun.save()
                        elif accounts.objects.get(name=invenacnt, cid=cmp1):
                            accoun = accounts.objects.get(
                                name=invenacnt, cid=cmp1)
                            accoun.balance = accoun.balance + cxq
                            accoun.save()
                        else:
                            pass
                        newtot = tt - ot
                        try:
                            if accounts.objects.get(name=invent.incomeacnt, cid=cmp1):
                                acc = accounts.objects.get(
                                    name=invent.incomeacnt, cid=cmp1)
                                acc.balance = acc.balance - newtot
                                acc.save()
                        except:
                            pass
                        try:
                            if accounts1.objects.get(name=invent.incomeacnt, cid=cmp1):
                                acc = accounts1.objects.get(
                                    name=invent.incomeacnt, cid=cmp1)
                                acc.balance = acc.balance - newtot
                                acc.save()
                        except:
                            pass
                        if accounts1.objects.get(name=invent.expacnt, cid=cmp1):
                            accoun = accounts1.objects.get(
                                name=invent.expacnt, cid=cmp1)
                            accoun.balance = accoun.balance - cxq
                            accoun.save()
                        elif accounts.objects.get(name=invent.expacnt, cid=cmp1):
                            accoun = accounts.objects.get(
                                name=invent.expacnt, cid=cmp1)
                            accoun.balance = accoun.balance - cxq
                            accoun.save()
                        else:
                            pass
                        if placosupply == cmp1.state:
                            tax = tx / 2
                            otax = otx / 2
                            accocgst = accounts1.objects.get(
                                name='Output CGST', cid=cmp1)
                            ta = tax - otax
                            accocgst.balance = accocgst.balance - ta
                            accocgst.save()
                            accosgst = accounts1.objects.get(
                                name='Output SGST', cid=cmp1)
                            accosgst.balance = accosgst.balance - ta
                            accosgst.save()
                        else:
                            accoigst = accounts1.objects.get(
                                name='Output IGST', cid=cmp1)
                            ta = tx - otx
                            accoigst.balance = accoigst.balance - ta
                            accoigst.save()
                    elif int(q) < int(cq):
                        invent.initialqty = int(
                            invent.initialqty) - (int(cq) - int(q))
                        invent.save()
                        cxq = float(invent.cost) * (float(cq) - float(q))
                        invenacnt = invent.invacnt
                        if accounts1.objects.get(name=invenacnt, cid=cmp1):
                            accoun = accounts1.objects.get(
                                name=invenacnt, cid=cmp1)
                            accoun.balance = accoun.balance - cxq
                            accoun.save()
                        elif accounts.objects.get(name=invenacnt, cid=cmp1):
                            accoun = accounts.objects.get(
                                name=invenacnt, cid=cmp1)
                            accoun.balance = accoun.balance - cxq
                            accoun.save()
                        else:
                            pass
                        newtot = ot - tt
                        try:
                            if accounts.objects.get(name=invent.incomeacnt, cid=cmp1):
                                acc = accounts.objects.get(
                                    name=invent.incomeacnt, cid=cmp1)
                                acc.balance = acc.balance + newtot
                                acc.save()
                        except:
                            pass
                        try:
                            if accounts1.objects.get(name=invent.incomeacnt, cid=cmp1):
                                acc = accounts1.objects.get(
                                    name=invent.incomeacnt, cid=cmp1)
                                acc.balance = acc.balance + newtot
                                acc.save()
                        except:
                            pass
                        if accounts1.objects.get(name=invent.expacnt, cid=cmp1):
                            accoun = accounts1.objects.get(
                                name=invent.expacnt, cid=cmp1)
                            accoun.balance = accoun.balance + cxq
                            accoun.save()
                        elif accounts.objects.get(name=invent.expacnt, cid=cmp1):
                            accoun = accounts.objects.get(
                                name=invent.expacnt, cid=cmp1)
                            accoun.balance = accoun.balance + cxq
                            accoun.save()
                        else:
                            pass
                        if placosupply == cmp1.state:
                            tax = tx / 2
                            otax = otx / 2
                            accocgst = accounts1.objects.get(
                                name='Output CGST', cid=cmp1)
                            ta = otax - tax
                            print(ta, type(ta))
                            accocgst.balance = accocgst.balance + ta
                            accocgst.save()
                            accosgst = accounts1.objects.get(
                                name='Output SGST', cid=cmp1)
                            accosgst.balance = accosgst.balance + ta
                            accosgst.save()
                        else:
                            accoigst = accounts1.objects.get(
                                name='Output IGST', cid=cmp1)
                            ta = otx - tx
                            accoigst.balance = accoigst.balance + ta
                            accoigst.save()
                    else:
                        pass
                else:
                    pass
            except:
                pass
            try:
                if noninventory.objects.get(name=p, cid=cmp1):
                    noninvent = noninventory.objects.get(name=p, cid=cmp1)
                    if int(q) > int(cq):
                        noninvent.qty = int(noninvent.qty) + \
                            (int(q) - int(cq))
                        noninvent.save()
                        newtot = tt - ot
                        try:
                            if accounts.objects.get(name=noninvent.income, cid=cmp1):
                                acc = accounts.objects.get(
                                    name=noninvent.income, cid=cmp1)
                                acc.balance = acc.balance - newtot
                                acc.save()
                        except:
                            pass
                        try:
                            if accounts1.objects.get(name=noninvent.income, cid=cmp1):
                                acc = accounts1.objects.get(
                                    name=noninvent.income, cid=cmp1)
                                acc.balance = acc.balance - newtot
                                acc.save()
                        except:
                            pass
                        if placosupply == cmp1.state:
                            tax = tx / 2
                            otax = otx / 2
                            accocgst = accounts1.objects.get(
                                name='Output CGST', cid=cmp1)
                            ta = tax - otax
                            accocgst.balance = accocgst.balance - ta
                            accocgst.save()
                            accosgst = accounts1.objects.get(
                                name='Output SGST', cid=cmp1)
                            accosgst.balance = accosgst.balance - ta
                            accosgst.save()
                        else:
                            accoigst = accounts1.objects.get(
                                name='Output IGST', cid=cmp1)
                            ta = tx - otx
                            accoigst.balance = accoigst.balance - ta
                            accoigst.save()
                    elif int(q) < int(cq):
                        noninvent.qty = int(noninvent.qty) - \
                            (int(cq) - int(q))
                        noninvent.save()
                        newtot = ot - tt
                        try:
                            if accounts.objects.get(name=noninvent.income, cid=cmp1):
                                acc = accounts.objects.get(
                                    name=noninvent.income, cid=cmp1)
                                acc.balance = acc.balance + newtot
                                acc.save()
                        except:
                            pass
                        try:
                            if accounts1.objects.get(name=noninvent.income, cid=cmp1):
                                acc = accounts1.objects.get(
                                    name=noninvent.income, cid=cmp1)
                                acc.balance = acc.balance + newtot
                                acc.save()
                        except:
                            pass
                        if placosupply == cmp1.state:
                            tax = tx / 2
                            otax = otx / 2
                            accocgst = accounts1.objects.get(
                                name='Output CGST', cid=cmp1)
                            ta = otax - tax
                            print(ta, type(ta))
                            accocgst.balance = accocgst.balance + ta
                            accocgst.save()
                            accosgst = accounts1.objects.get(
                                name='Output SGST', cid=cmp1)
                            accosgst.balance = accosgst.balance + ta
                            accosgst.save()
                        else:
                            accoigst = accounts1.objects.get(
                                name='Output IGST', cid=cmp1)
                            ta = otx - tx
                            accoigst.balance = accoigst.balance + ta
                            accoigst.save()
                    else:
                        pass
            except:
                pass

        grndtot = float(request.POST['grndtot'])
        accont = accounts1.objects.get(
            name='Account Receivable(Debtors)', cid=cmp1)
        if grndtot > credi.grndtot:
            accont.balance = accont.balance - (grndtot - credi.grndtot)
            accont.save()
        elif grndtot < credi.grndtot:
            accont.balance = accont.balance + (credi.grndtot - grndtot)
            accont.save()
        else:
            pass

        credi.customer = request.POST['customer']
        credi.mail = request.POST['mail']
        credi.biladdr = request.POST['biladdr']
        credi.creditdate = request.POST['creditdate']
        credi.place = request.POST['place']
        credi.invnum = request.POST['invnum']
        credi.invperiod = request.POST['invperiod']
        credi.product = request.POST['product']
        credi.descrip = request.POST['descrip']
        credi.qty = request.POST['qty']
        credi.price = request.POST['price']
        credi.tax = request.POST['tax']
        credi.subtot = request.POST['subtot']
        credi.total = request.POST['total']
        credi.grndtot = request.POST['grndtot']
        credi.taxamnt = request.POST['taxamnt']
        credi.product1 = request.POST['product1']
        credi.descrip1 = request.POST['descrip1']
        credi.qty1 = request.POST['qty1']
        credi.price1 = request.POST['price1']
        credi.tax1 = request.POST['tax1']
        credi.total1 = request.POST['total1']
        credi.product2 = request.POST['product2']
        credi.descrip2 = request.POST['descrip2']
        credi.qty2 = request.POST['qty2']
        credi.price2 = request.POST['price2']
        credi.total2 = request.POST['total2']
        credi.tax2 = request.POST['tax2']
        credi.product3 = request.POST['product3']
        credi.descrip3 = request.POST['descrip3']
        credi.qty3 = request.POST['qty3']
        credi.price3 = request.POST['price3']
        credi.total3 = request.POST['total3']
        credi.tax3 = request.POST['tax3']
        credi.save()
        return redirect('gosalesrecords')
    except:
        return redirect('gosalesrecords')


@login_required(login_url='regcomp')
def expencesindex(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        toda = date.today()
        tod = toda.strftime("%Y-%m-%d")
        customers = customer.objects.all()
        suppliers = supplier.objects.all()
        exp1 = expences.objects.all()
        inv = inventory.objects.all()
        bun = bundle.objects.all()
        noninv = noninventory.objects.all()
        ser = service.objects.all()
        acounts = accounts.objects.filter(cid=cmp1)
        catlist = viewlist()
        context = {'exp': exp1, 'inv': inv, 'cmp1': cmp1, 'bun': bun, 'noninv': noninv, 'ser': ser,
                   'customers': customers,
                   'suppliers': suppliers, 'tod': tod, 'catlist': catlist, 'accoun': acounts}
        return render(request, 'app1/addexpences.html', context)
    except:
        return redirect('goexpences')


@login_required(login_url='regcomp')
def expencescreate(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        inv = inventory.objects.filter(cid=cmp1)
        bun = bundle.objects.filter(cid=cmp1)
        noninv = noninventory.objects.filter(cid=cmp1)
        ser = service.objects.filter(cid=cmp1)
        p = request.POST['product']
        qty = request.POST['qty']
        tot = float(request.POST['total'])
        p2 = request.POST['product2']
        qty2 = request.POST['qty2']
        tot2 = float(request.POST['total2'])
        p3 = request.POST['product3']
        qty3 = request.POST['qty3']
        tot3 = float(request.POST['total3'])
        p4 = request.POST['product4']
        qty4 = request.POST['qty4']
        tot4 = float(request.POST['total4'])
        taxamnt1 = float(request.POST['taxamount1'])
        taxamnt2 = float(request.POST['taxamount2'])
        taxamnt3 = float(request.POST['taxamount3'])
        taxamnt4 = float(request.POST['taxamount4'])
        payee = request.POST['payee'].split()
        firstname = payee[0]
        lastname = payee[1]
        if len(payee) == 3:
            lastname = payee[1] + " " + payee[2]
            try:
                if supplier.objects.get(firstname=firstname, lastname=lastname, cid=cmp1):
                    supp = supplier.objects.get(
                        firstname=firstname, lastname=lastname, cid=cmp1)
                    placosupply = supp.state
            except:
                pass
            try:
                if customer.objects.get(firstname=firstname, lastname=lastname, cid=cmp1):
                    cust = customer.objects.get(
                        firstname=firstname, lastname=lastname, cid=cmp1)
                    placosupply = cust.state
            except:
                pass
        else:
            try:
                if supplier.objects.get(firstname=firstname, lastname=lastname, cid=cmp1):
                    supp = supplier.objects.get(
                        firstname=firstname, lastname=lastname, cid=cmp1)
                    placosupply = supp.state
            except:
                pass
            try:
                if customer.objects.get(firstname=firstname, lastname=lastname, cid=cmp1):
                    cust = customer.objects.get(
                        firstname=firstname, lastname=lastname, cid=cmp1)
                    placosupply = cust.state
            except:
                pass
        for i in inv:
            if str(i.name) == str(p):
                qy = int(i.initialqty)
                qy += int(qty)
                invname = p
                inv1 = inventory.objects.get(name=invname, cid=cmp1)
                inv1.initialqty = str(qy)
                inv1.save()
                if placosupply == cmp1.state:
                    tax = taxamnt1 / 2
                    accocgst = accounts1.objects.get(
                        name='Input CGST', cid=cmp1)
                    accocgst.balance = round(float(accocgst.balance - tax), 2)
                    accocgst.save()
                    accosgst = accounts1.objects.get(
                        name='Input SGST', cid=cmp1)
                    accosgst.balance = round(float(accosgst.balance - tax), 2)
                    accosgst.save()
                else:
                    accoigst = accounts1.objects.get(
                        name='Input IGST', cid=cmp1)
                    accoigst.balance = round(
                        float(accoigst.balance - taxamnt1), 2)
                    accoigst.save()
                request.session["invcol"] = "green"
            if str(i.name) == str(p2):
                qy = int(i.initialqty)
                qy += int(qty2)
                invname = p2
                inv1 = inventory.objects.get(name=invname, cid=cmp1)
                inv1.initialqty = str(qy)
                inv1.save()
                try:
                    if placosupply == cmp1.state:
                        tax = taxamnt2 / 2
                        accocgst = accounts1.objects.get(
                            name='Input CGST', cid=cmp1)
                        accocgst.balance = round(
                            float(accocgst.balance - tax), 2)
                        accocgst.save()
                        accosgst = accounts1.objects.get(
                            name='Input SGST', cid=cmp1)
                        accosgst.balance = round(
                            float(accosgst.balance - tax), 2)
                        accosgst.save()
                    else:
                        accoigst = accounts1.objects.get(
                            name='Input IGST', cid=cmp1)
                        accoigst.balance = round(
                            float(accoigst.balance - taxamnt2), 2)
                        accoigst.save()
                except:
                    pass
                request.session["invcol"] = "green"
            if str(i.name) == str(p3):
                qy = int(i.initialqty)
                qy += int(qty3)
                invname = p3
                inv1 = inventory.objects.get(name=invname, cid=cmp1)
                inv1.initialqty = str(qy)
                inv1.save()
                try:
                    if placosupply == cmp1.state:
                        tax = taxamnt3 / 2
                        accocgst = accounts1.objects.get(
                            name='Input CGST', cid=cmp1)
                        accocgst.balance = round(
                            float(accocgst.balance - tax), 2)
                        accocgst.save()
                        accosgst = accounts1.objects.get(
                            name='Input SGST', cid=cmp1)
                        accosgst.balance = round(
                            float(accosgst.balance - tax), 2)
                        accosgst.save()
                    else:
                        accoigst = accounts1.objects.get(
                            name='Input IGST', cid=cmp1)
                        accoigst.balance = round(
                            float(accoigst.balance - taxamnt3), 2)
                        accoigst.save()
                except:
                    pass
                request.session["invcol"] = "green"
            if str(i.name) == str(p4):
                qy = int(i.initialqty)
                qy += int(qty4)
                invname = p4
                inv1 = inventory.objects.get(name=invname, cid=cmp1)
                inv1.initialqty = str(qy)
                inv1.save()
                try:
                    if placosupply == cmp1.state:
                        tax = taxamnt4 / 2
                        accocgst = accounts1.objects.get(
                            name='Input CGST', cid=cmp1)
                        accocgst.balance = round(
                            float(accocgst.balance - tax), 2)
                        accocgst.save()
                        accosgst = accounts1.objects.get(
                            name='Input SGST', cid=cmp1)
                        accosgst.balance = round(
                            float(accosgst.balance - tax), 2)
                        accosgst.save()
                    else:
                        accoigst = accounts1.objects.get(
                            name='Input IGST', cid=cmp1)
                        accoigst.balance = round(
                            float(accoigst.balance - taxamnt4), 2)
                        accoigst.save()
                except:
                    pass
                request.session["invcol"] = "green"

        for n in noninv:
            if str(n.name) == str(p):
                qy = int(n.qty)
                qy += int(qty)
                noninvname = p
                noninv1 = noninventory.objects.get(name=noninvname, cid=cmp1)
                noninv1.qty = str(qy)
                noninv1.save()
                try:
                    if accounts.objects.get(name=noninv1.expenseaccount, cid=cmp1):
                        acc = accounts.objects.get(
                            name=noninv1.expenseaccount, cid=cmp1)
                        acc.balance = acc.balance + tot
                        acc.save()
                except:
                    pass
                try:
                    if accounts1.objects.get(name=noninv1.expenseaccount, cid=cmp1):
                        acc = accounts1.objects.get(
                            name=noninv1.expenseaccount, cid=cmp1)
                        acc.balance = acc.balance + tot
                        acc.save()
                except:
                    pass
                try:
                    if placosupply == cmp1.state:
                        tax = taxamnt1 / 2
                        accocgst = accounts1.objects.get(
                            name='Input CGST', cid=cmp1)
                        accocgst.balance = round(
                            float(accocgst.balance - tax), 2)
                        accocgst.save()
                        accosgst = accounts1.objects.get(
                            name='Input SGST', cid=cmp1)
                        accosgst.balance = round(
                            float(accosgst.balance - tax), 2)
                        accosgst.save()
                    else:
                        accoigst = accounts1.objects.get(
                            name='Input IGST', cid=cmp1)
                        accoigst.balance = round(
                            float(accoigst.balance - taxamnt1), 2)
                        accoigst.save()
                except:
                    pass
                request.session["noninvcol"] = "green"
            if str(n.name) == str(p2):
                qy = int(n.qty)
                qy += int(qty2)
                noninvname = p2
                noninv1 = noninventory.objects.get(name=noninvname, cid=cmp1)
                noninv1.qty = str(qy)
                noninv1.save()
                try:
                    if accounts.objects.get(name=noninv1.expenseaccount, cid=cmp1):
                        acc = accounts.objects.get(
                            name=noninv1.expenseaccount, cid=cmp1)
                        acc.balance = acc.balance + tot2
                        acc.save()
                except:
                    pass
                try:
                    if accounts1.objects.get(name=noninv1.expenseaccount, cid=cmp1):
                        acc = accounts1.objects.get(
                            name=noninv1.expenseaccount, cid=cmp1)
                        acc.balance = acc.balance + tot2
                        acc.save()
                except:
                    pass
                try:
                    if placosupply == cmp1.state:
                        tax = taxamnt2 / 2
                        accocgst = accounts1.objects.get(
                            name='Input CGST', cid=cmp1)
                        accocgst.balance = round(
                            float(accocgst.balance - tax), 2)
                        accocgst.save()
                        accosgst = accounts1.objects.get(
                            name='Input SGST', cid=cmp1)
                        accosgst.balance = round(
                            float(accosgst.balance - tax), 2)
                        accosgst.save()
                    else:
                        accoigst = accounts1.objects.get(
                            name='Input IGST', cid=cmp1)
                        accoigst.balance = round(
                            float(accoigst.balance - taxamnt2), 2)
                        accoigst.save()
                except:
                    pass
                request.session["noninvcol"] = "green"
            if str(n.name) == str(p3):
                qy = int(n.qty)
                qy += int(qty3)
                noninvname = p3
                noninv1 = noninventory.objects.get(name=noninvname, cid=cmp1)
                noninv1.qty = str(qy)
                noninv1.save()
                try:
                    if accounts.objects.get(name=noninv1.expenseaccount, cid=cmp1):
                        acc = accounts.objects.get(
                            name=noninv1.expenseaccount, cid=cmp1)
                        acc.balance = acc.balance + tot3
                        acc.save()
                except:
                    pass
                try:
                    if accounts1.objects.get(name=noninv1.expenseaccount, cid=cmp1):
                        acc = accounts1.objects.get(
                            name=noninv1.expenseaccount, cid=cmp1)
                        acc.balance = acc.balance + tot3
                        acc.save()
                except:
                    pass
                try:
                    if placosupply == cmp1.state:
                        tax = taxamnt3 / 2
                        accocgst = accounts1.objects.get(
                            name='Input CGST', cid=cmp1)
                        accocgst.balance = round(
                            float(accocgst.balance - tax), 2)
                        accocgst.save()
                        accosgst = accounts1.objects.get(
                            name='Input SGST', cid=cmp1)
                        accosgst.balance = round(
                            float(accosgst.balance - tax), 2)
                        accosgst.save()
                    else:
                        accoigst = accounts1.objects.get(
                            name='Input IGST', cid=cmp1)
                        accoigst.balance = round(
                            float(accoigst.balance - taxamnt3), 2)
                        accoigst.save()
                except:
                    pass
                request.session["noninvcol"] = "green"
            if str(n.name) == str(p4):
                qy = int(n.qty)
                qy += int(qty4)
                noninvname = p4
                noninv1 = noninventory.objects.get(name=noninvname, cid=cmp1)
                noninv1.qty = str(qy)
                noninv1.save()
                try:
                    if accounts.objects.get(name=noninv1.expenseaccount, cid=cmp1):
                        acc = accounts.objects.get(
                            name=noninv1.expenseaccount, cid=cmp1)
                        acc.balance = acc.balance + tot4
                        acc.save()
                except:
                    pass
                try:
                    if accounts1.objects.get(name=noninv1.expenseaccount, cid=cmp1):
                        acc = accounts1.objects.get(
                            name=noninv1.expenseaccount, cid=cmp1)
                        acc.balance = acc.balance + tot4
                        acc.save()
                except:
                    pass
                try:
                    if placosupply == cmp1.state:
                        tax = taxamnt4 / 2
                        accocgst = accounts1.objects.get(
                            name='Input CGST', cid=cmp1)
                        accocgst.balance = round(
                            float(accocgst.balance - tax), 2)
                        accocgst.save()
                        accosgst = accounts1.objects.get(
                            name='Input SGST', cid=cmp1)
                        accosgst.balance = round(
                            float(accosgst.balance - tax), 2)
                        accosgst.save()
                    else:
                        accoigst = accounts1.objects.get(
                            name='Input IGST', cid=cmp1)
                        accoigst.balance = round(
                            float(accoigst.balance - taxamnt4), 2)
                        accoigst.save()
                except:
                    pass
                request.session["noninvcol"] = "green"

        for b in bun:
            if str(b.name) == str(p):
                qy = int(b.qty)
                qy += int(qty)
                bunname = p
                bun1 = bundle.objects.get(name=bunname, cid=cmp1)
                bun1.qty = str(qy)
                bun1.save()
                try:
                    if placosupply == cmp1.state:
                        tax = taxamnt1 / 2
                        accocgst = accounts1.objects.get(
                            name='Input CGST', cid=cmp1)
                        accocgst.balance = round(
                            float(accocgst.balance - tax), 2)
                        accocgst.save()
                        accosgst = accounts1.objects.get(
                            name='Input SGST', cid=cmp1)
                        accosgst.balance = round(
                            float(accosgst.balance - tax), 2)
                        accosgst.save()
                    else:
                        accoigst = accounts1.objects.get(
                            name='Input IGST', cid=cmp1)
                        accoigst.balance = round(
                            float(accoigst.balance - taxamnt1), 2)
                        accoigst.save()
                except:
                    pass
                request.session["buncol"] = "green"
            if str(b.name) == str(p2):
                qy = int(b.qty)
                qy += int(qty2)
                bunname = p2
                bun1 = bundle.objects.get(name=bunname, cid=cmp1)
                bun1.qty = str(qy)
                bun1.save()
                try:
                    if placosupply == cmp1.state:
                        tax = taxamnt2 / 2
                        accocgst = accounts1.objects.get(
                            name='Input CGST', cid=cmp1)
                        accocgst.balance = round(
                            float(accocgst.balance - tax), 2)
                        accocgst.save()
                        accosgst = accounts1.objects.get(
                            name='Input SGST', cid=cmp1)
                        accosgst.balance = round(
                            float(accosgst.balance - tax), 2)
                        accosgst.save()
                    else:
                        accoigst = accounts1.objects.get(
                            name='Input IGST', cid=cmp1)
                        accoigst.balance = round(
                            float(accoigst.balance - taxamnt2), 2)
                        accoigst.save()
                except:
                    pass
                request.session["buncol"] = "green"
            if str(b.name) == str(p3):
                qy = int(b.qty)
                qy += int(qty3)
                bunname = p3
                bun1 = bundle.objects.get(name=bunname, cid=cmp1)
                bun1.qty = str(qy)
                bun1.save()
                try:
                    if placosupply == cmp1.state:
                        tax = taxamnt3 / 2
                        accocgst = accounts1.objects.get(
                            name='Input CGST', cid=cmp1)
                        accocgst.balance = round(
                            float(accocgst.balance - tax), 2)
                        accocgst.save()
                        accosgst = accounts1.objects.get(
                            name='Input SGST', cid=cmp1)
                        accosgst.balance = round(
                            float(accosgst.balance - tax), 2)
                        accosgst.save()
                    else:
                        accoigst = accounts1.objects.get(
                            name='Input IGST', cid=cmp1)
                        accoigst.balance = round(
                            float(accoigst.balance - taxamnt3), 2)
                        accoigst.save()
                except:
                    pass
                request.session["buncol"] = "green"
            if str(b.name) == str(p4):
                qy = int(b.qty)
                qy += int(qty4)
                bunname = p4
                bun1 = bundle.objects.get(name=bunname, cid=cmp1)
                bun1.qty = str(qy)
                bun1.save()
                try:
                    if placosupply == cmp1.state:
                        tax = taxamnt4 / 2
                        accocgst = accounts1.objects.get(
                            name='Input CGST', cid=cmp1)
                        accocgst.balance = round(
                            float(accocgst.balance - tax), 2)
                        accocgst.save()
                        accosgst = accounts1.objects.get(
                            name='Input SGST', cid=cmp1)
                        accosgst.balance = round(
                            float(accosgst.balance - tax), 2)
                        accosgst.save()
                    else:
                        accoigst = accounts1.objects.get(
                            name='Input IGST', cid=cmp1)
                        accoigst.balance = round(
                            float(accoigst.balance - taxamnt4), 2)
                        accoigst.save()
                except:
                    pass
                request.session["buncol"] = "green"
        exp2 = expences(payee=request.POST['payee'],
                        paymdate=request.POST['paymdate'],
                        paymmethod=request.POST['paymmethod'], refno='1000',
                        totamt=request.POST['totamt'],

                        category1=request.POST['category1'],
                        descrptin1=request.POST['descrptin1'],
                        catqty1=request.POST['catqty1'],
                        catprice1=request.POST['catprice1'],
                        cattotal1=request.POST['cattotal1'],

                        category2=request.POST['category2'],
                        descrptin2=request.POST['descrptin2'],
                        catqty2=request.POST['catqty2'],
                        catprice2=request.POST['catprice2'],
                        cattotal2=request.POST['cattotal2'],

                        category3=request.POST['category3'],
                        descrptin3=request.POST['descrptin3'],
                        catqty3=request.POST['catqty3'],
                        catprice3=request.POST['catprice3'],
                        cattotal3=request.POST['cattotal3'],

                        category4=request.POST['category4'],
                        descrptin4=request.POST['descrptin4'],
                        catqty4=request.POST['catqty4'],
                        catprice4=request.POST['catprice4'],
                        cattotal4=request.POST['cattotal4'],

                        product=request.POST['product'], hsn=request.POST['hsn'],
                        description=request.POST['description'],
                        qty=request.POST['qty'], price=request.POST['price'], total=request.POST['total'],
                        product2=request.POST['product2'], hsn2=request.POST['hsn2'],
                        description2=request.POST['description2'],
                        qty2=request.POST['qty2'], price2=request.POST['price2'], total2=request.POST['total2'],
                        product3=request.POST['product3'], hsn3=request.POST['hsn3'],
                        description3=request.POST['description3'],
                        qty3=request.POST['qty3'], price3=request.POST['price3'], total3=request.POST['total3'],
                        product4=request.POST['product4'], hsn4=request.POST['hsn4'],
                        description4=request.POST['description4'],
                        qty4=request.POST['qty4'], price4=request.POST['price4'], total4=request.POST['total4'],

                        subtotal=request.POST['subtotal'],
                        tax=request.POST['tax'], tax2=request.POST['tax2'], tax3=request.POST['tax3'],
                        tax4=request.POST['tax4'], taxamount=request.POST['taxamount'],
                        grandtotal=request.POST['grandtotal'], cid=cmp1)
        exp2.save()
        exp2.refno = int(exp2.refno) + exp2.expencesid
        exp2.save()
        product = [request.POST['product'], request.POST['product2'], request.POST['product3'],
                   request.POST['product4']]
        qty = [float(request.POST['qty']), float(request.POST['qty2']), float(request.POST['qty3']),
               float(request.POST['qty4'])]
        grandtotal = float(request.POST['grandtotal'])
        if grandtotal != 0:
            if accounts1.objects.get(name='Accounts Payable(Creditors)', cid=cmp1):
                acc = accounts1.objects.get(
                    name='Accounts Payable(Creditors)', cid=cmp1)
                acc.balance = round(acc.balance + grandtotal, 2)
                acc.save()
            else:
                pass
        else:
            pass
        if inventory.objects.filter(name=product[0], cid=cmp1):
            inven = inventory.objects.get(name=product[0], cid=cmp1)
            cxq = float(inven.cost) * qty[0]
            acc1 = accounts1.objects.get(name=inven.invacnt, cid=cmp1)
            acc1.balance = round(acc1.balance + cxq, 2)
            acc1.save()
        else:
            pass
        if inventory.objects.filter(name=product[1], cid=cmp1):
            inven = inventory.objects.get(name=product[1], cid=cmp1)
            cxq = float(inven.cost) * qty[1]
            acc1 = accounts1.objects.get(name=inven.invacnt, cid=cmp1)
            acc1.balance = round(acc1.balance + cxq, 2)
            acc1.save()
        else:
            pass
        if inventory.objects.filter(name=product[2], cid=cmp1):
            inven = inventory.objects.get(name=product[2], cid=cmp1)
            cxq = float(inven.cost) * qty[2]
            acc1 = accounts1.objects.get(name=inven.invacnt, cid=cmp1)
            acc1.balance = round(acc1.balance + cxq, 2)
            acc1.save()
        else:
            pass
        if inventory.objects.filter(name=product[3], cid=cmp1):
            inven = inventory.objects.get(name=product[3], cid=cmp1)
            cxq = float(inven.cost) * qty[3]
            acc1 = accounts1.objects.get(name=inven.invacnt, cid=cmp1)
            acc1.balance = round(acc1.balance + cxq, 2)
            acc1.save()
        else:
            pass
        return redirect('goexpences')
    except:
        return redirect('goexpences')


@login_required(login_url='regcomp')
def deleteexpences(request, id):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        exp = expences.objects.get(expencesid=id, cid=cmp1)
        exp.delete()
        return redirect('goexpences')
    except:
        return redirect('goexpences')


@login_required(login_url='regcomp')
def editexpences(request, id):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        exps = expences.objects.get(expencesid=id, cid=cmp1)
        inv = inventory.objects.filter(cid=cmp1)
        bun = bundle.objects.filter(cid=cmp1)
        noninv = noninventory.objects.filter(cid=cmp1)
        ser = service.objects.filter(cid=cmp1)
        acounts = accounts.objects.filter(cid=cmp1)
        catlist = viewlist()
        context = {'expences': exps, 'inv': inv, 'cmp1': cmp1, 'bun': bun, 'noninv': noninv, 'ser': ser,
                   'catlist': catlist, 'accoun': acounts}
        return render(request, 'app1/editexpences.html', context)
    except:
        return redirect('goexpences')


@login_required(login_url='regcomp')
def updateexpences(request, id):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        exps = expences.objects.get(expencesid=id, cid=cmp1)
        grandtotal = float(request.POST['grandtotal'])
        payee = request.POST['payee'].split()
        firstname = payee[0]
        lastname = payee[1]
        if len(payee) == 3:
            lastname = payee[1] + " " + payee[2]
            try:
                if supplier.objects.get(firstname=firstname, lastname=lastname, cid=cmp1):
                    supp = supplier.objects.get(
                        firstname=firstname, lastname=lastname, cid=cmp1)
                    placosupply = supp.state
            except:
                pass
        else:
            try:
                if supplier.objects.get(firstname=firstname, lastname=lastname, cid=cmp1):
                    supp = supplier.objects.get(
                        firstname=firstname, lastname=lastname, cid=cmp1)
                    placosupply = supp.state
            except:
                pass
        accs = accounts1.objects.get(
            name='Accounts Payable(Creditors)', cid=cmp1)
        try:
            if grandtotal > float(exps.grandtotal):
                newgrand = grandtotal - float(exps.grandtotal)
                accs.balance = round(accs.balance + newgrand, 2)
                accs.save()
            elif grandtotal < float(exps.grandtotal):
                newgrand = float(exps.grandtotal) - grandtotal
                accs.balance = round(accs.balance - newgrand, 2)
                accs.save()
            else:
                pass
        except:
            pass
        product = [request.POST['product'], request.POST['product2'], request.POST['product3'],
                   request.POST['product4']]
        creqty = [exps.qty, exps.qty2, exps.qty3, exps.qty4]
        qty = [request.POST['qty'], request.POST['qty2'],
               request.POST['qty3'], request.POST['qty4']]
        taxes = [float(exps.tax) / 100, float(exps.tax2) / 100,
                 float(exps.tax3) / 100, float(exps.tax4) / 100]
        otaxamnt = [float(exps.total) * taxes[0], float(exps.total2) * taxes[1],
                    float(exps.total3) * taxes[2],
                    float(exps.total4) * taxes[3]]
        taxamnt = [float(request.POST['taxamount1']), float(request.POST['taxamount2']),
                   float(request.POST['taxamount3']),
                   float(request.POST['taxamount4'])]
        otot = [float(exps.total), float(exps.total2),
                float(exps.total3), float(exps.total4)]
        tot = [float(request.POST['total']), float(request.POST['total2']), float(request.POST['total3']),
               float(request.POST['total4'])]
        try:
            if inventory.objects.get(name=product[0], cid=cmp1):
                invent = inventory.objects.get(name=product[0], cid=cmp1)
                if int(qty[0]) > int(creqty[0]):
                    invent.initialqty = int(
                        invent.initialqty) + (int(qty[0]) - int(creqty[0]))
                    invent.save()
                    cxq = float(invent.cost) * \
                        (float(qty[0]) - float(creqty[0]))
                    accnt = accounts1.objects.get(
                        name=invent.invacnt, cid=cmp1)
                    accnt.balance = accnt.balance + cxq
                    accnt.save()
                    newtot = tot[0] - otot[0]
                    if placosupply == cmp1.state:
                        tax = taxamnt[0] / 2
                        otax = otaxamnt[0] / 2
                        accocgst = accounts1.objects.get(
                            name='Input CGST', cid=cmp1)
                        ta = tax - otax
                        accocgst.balance = accocgst.balance - ta
                        accocgst.save()
                        accosgst = accounts1.objects.get(
                            name='Input SGST', cid=cmp1)
                        accosgst.balance = accosgst.balance - ta
                        accosgst.save()
                    else:
                        accoigst = accounts1.objects.get(
                            name='Input IGST', cid=cmp1)
                        ta = taxamnt[0] - otaxamnt[0]
                        accoigst.balance = accoigst.balance - ta
                        accoigst.save()
                elif int(qty[0]) < int(creqty[0]):
                    invent.initialqty = int(
                        invent.initialqty) - (int(creqty[0]) - int(qty[0]))
                    invent.save()
                    cxq = float(invent.cost) * \
                        (float(creqty[0]) - float(qty[0]))
                    accnt = accounts1.objects.get(
                        name=invent.invacnt, cid=cmp1)
                    accnt.balance = accnt.balance - cxq
                    accnt.save()
                    newtot = otot[0] - tot[0]
                    if placosupply == cmp1.state:
                        tax = taxamnt[0] / 2
                        otax = otaxamnt[0] / 2
                        accocgst = accounts1.objects.get(
                            name='Input CGST', cid=cmp1)
                        ta = otax - tax
                        accocgst.balance = accocgst.balance + ta
                        accocgst.save()
                        accosgst = accounts1.objects.get(
                            name='Input SGST', cid=cmp1)
                        accosgst.balance = accosgst.balance + ta
                        accosgst.save()
                    else:
                        accoigst = accounts1.objects.get(
                            name='Input IGST', cid=cmp1)
                        ta = otaxamnt[0] - taxamnt[0]
                        accoigst.balance = accoigst.balance + ta
                        accoigst.save()
        except:
            pass
        try:
            if noninventory.objects.get(name=product[0], cid=cmp1):
                noninvent = noninventory.objects.get(name=product[0], cid=cmp1)
                if int(qty[0]) > int(creqty[0]):
                    noninvent.qty = int(noninvent.qty) + \
                        (int(qty[0]) - int(creqty[0]))
                    noninvent.save()
                    newtot = tot[0] - otot[0]
                    if placosupply == cmp1.state:
                        tax = taxamnt[0] / 2
                        otax = otaxamnt[0] / 2
                        accocgst = accounts1.objects.get(
                            name='Input CGST', cid=cmp1)
                        ta = tax - otax
                        accocgst.balance = accocgst.balance - ta
                        accocgst.save()
                        accosgst = accounts1.objects.get(
                            name='Input SGST', cid=cmp1)
                        accosgst.balance = accosgst.balance - ta
                        accosgst.save()
                    else:
                        accoigst = accounts1.objects.get(
                            name='Input IGST', cid=cmp1)
                        ta = taxamnt[0] - otaxamnt[0]
                        accoigst.balance = accoigst.balance - ta
                        accoigst.save()
                elif int(qty[0]) < int(creqty[0]):
                    noninvent.qty = int(noninvent.qty) - \
                        (int(creqty[0]) - int(qty[0]))
                    noninvent.save()
                    newtot = otot[0] - tot[0]
                    if placosupply == cmp1.state:
                        tax = taxamnt[0] / 2
                        otax = otaxamnt[0] / 2
                        accocgst = accounts1.objects.get(
                            name='Input CGST', cid=cmp1)
                        ta = otax - tax
                        accocgst.balance = accocgst.balance + ta
                        accocgst.save()
                        accosgst = accounts1.objects.get(
                            name='Input SGST', cid=cmp1)
                        accosgst.balance = accosgst.balance + ta
                        accosgst.save()
                    else:
                        accoigst = accounts1.objects.get(
                            name='Input IGST', cid=cmp1)
                        ta = otaxamnt[0] - taxamnt[0]
                        accoigst.balance = accoigst.balance + ta
                        accoigst.save()
                else:
                    pass
        except:
            pass
        try:
            if bundle.objects.get(name=product[0], cid=cmp1):
                bundl = bundle.objects.get(name=product[0], cid=cmp1)
                if int(qty[0]) > int(creqty[0]):
                    bundl.qty = int(bundl.qty) + (int(qty[0]) - int(creqty[0]))
                    bundl.save()
                    if placosupply == cmp1.state:
                        tax = taxamnt[0] / 2
                        otax = otaxamnt[0] / 2
                        accocgst = accounts1.objects.get(
                            name='Input CGST', cid=cmp1)
                        ta = tax - otax
                        accocgst.balance = accocgst.balance - ta
                        accocgst.save()
                        accosgst = accounts1.objects.get(
                            name='Input SGST', cid=cmp1)
                        accosgst.balance = accosgst.balance - ta
                        accosgst.save()
                    else:
                        accoigst = accounts1.objects.get(
                            name='Input IGST', cid=cmp1)
                        ta = taxamnt[0] - otaxamnt[0]
                        accoigst.balance = accoigst.balance - ta
                        accoigst.save()
                elif int(qty[0]) < int(creqty[0]):
                    bundl.qty = int(bundl.qty) - (int(creqty[0]) - int(qty[0]))
                    bundl.save()
                    if placosupply == cmp1.state:
                        tax = taxamnt[0] / 2
                        otax = otaxamnt[0] / 2
                        accocgst = accounts1.objects.get(
                            name='Input CGST', cid=cmp1)
                        ta = otax - tax
                        accocgst.balance = accocgst.balance + ta
                        accocgst.save()
                        accosgst = accounts1.objects.get(
                            name='Input SGST', cid=cmp1)
                        accosgst.balance = accosgst.balance + ta
                        accosgst.save()
                    else:
                        accoigst = accounts1.objects.get(
                            name='Input IGST', cid=cmp1)
                        ta = otaxamnt[0] - taxamnt[0]
                        accoigst.balance = accoigst.balance + ta
                        accoigst.save()
                else:
                    pass
        except:
            pass

        try:
            if inventory.objects.get(name=product[1], cid=cmp1):
                invent = inventory.objects.get(name=product[1], cid=cmp1)
                if int(qty[1]) > int(creqty[1]):
                    invent.initialqty = int(
                        invent.initialqty) + (int(qty[1]) - int(creqty[1]))
                    invent.save()
                    cxq = float(invent.cost) * \
                        (float(qty[1]) - float(creqty[1]))
                    accnt = accounts1.objects.get(
                        name=invent.invacnt, cid=cmp1)
                    accnt.balance = accnt.balance + cxq
                    accnt.save()
                    newtot = tot[1] - otot[1]
                    if placosupply == cmp1.state:
                        tax = taxamnt[1] / 2
                        otax = otaxamnt[1] / 2
                        accocgst = accounts1.objects.get(
                            name='Input CGST', cid=cmp1)
                        ta = tax - otax
                        accocgst.balance = accocgst.balance - ta
                        accocgst.save()
                        accosgst = accounts1.objects.get(
                            name='Input SGST', cid=cmp1)
                        accosgst.balance = accosgst.balance - ta
                        accosgst.save()
                    else:
                        accoigst = accounts1.objects.get(
                            name='Input IGST', cid=cmp1)
                        ta = taxamnt[1] - otaxamnt[1]
                        accoigst.balance = accoigst.balance - ta
                        accoigst.save()
                elif int(qty[1]) < int(creqty[1]):
                    invent.initialqty = int(
                        invent.initialqty) - (int(creqty[1]) - int(qty[1]))
                    invent.save()
                    cxq = float(invent.cost) * \
                        (float(creqty[1]) - float(qty[1]))
                    accnt = accounts1.objects.get(
                        name=invent.invacnt, cid=cmp1)
                    accnt.balance = accnt.balance - cxq
                    accnt.save()
                    newtot = otot[1] - tot[1]
                    if placosupply == cmp1.state:
                        tax = taxamnt[1] / 2
                        otax = otaxamnt[1] / 2
                        accocgst = accounts1.objects.get(
                            name='Input CGST', cid=cmp1)
                        ta = otax - tax
                        accocgst.balance = accocgst.balance + ta
                        accocgst.save()
                        accosgst = accounts1.objects.get(
                            name='Input SGST', cid=cmp1)
                        accosgst.balance = accosgst.balance + ta
                        accosgst.save()
                    else:
                        accoigst = accounts1.objects.get(
                            name='Input IGST', cid=cmp1)
                        ta = otaxamnt[1] - taxamnt[1]
                        accoigst.balance = accoigst.balance + ta
                        accoigst.save()
        except:
            pass
        try:
            if noninventory.objects.get(name=product[1], cid=cmp1):
                noninvent = noninventory.objects.get(name=product[1], cid=cmp1)
                if int(qty[1]) > int(creqty[1]):
                    noninvent.qty = int(noninvent.qty) + \
                        (int(qty[1]) - int(creqty[1]))
                    noninvent.save()
                    newtot = tot[1] - otot[1]
                    if placosupply == cmp1.state:
                        tax = taxamnt[1] / 2
                        otax = otaxamnt[1] / 2
                        accocgst = accounts1.objects.get(
                            name='Input CGST', cid=cmp1)
                        ta = tax - otax
                        accocgst.balance = accocgst.balance - ta
                        accocgst.save()
                        accosgst = accounts1.objects.get(
                            name='Input SGST', cid=cmp1)
                        accosgst.balance = accosgst.balance - ta
                        accosgst.save()
                    else:
                        accoigst = accounts1.objects.get(
                            name='Input IGST', cid=cmp1)
                        ta = taxamnt[1] - otaxamnt[1]
                        accoigst.balance = accoigst.balance - ta
                        accoigst.save()
                elif int(qty[1]) < int(creqty[1]):
                    noninvent.qty = int(noninvent.qty) - \
                        (int(creqty[1]) - int(qty[1]))
                    noninvent.save()
                    newtot = otot[1] - tot[1]
                    if placosupply == cmp1.state:
                        tax = taxamnt[1] / 2
                        otax = otaxamnt[1] / 2
                        accocgst = accounts1.objects.get(
                            name='Input CGST', cid=cmp1)
                        ta = otax - tax
                        accocgst.balance = accocgst.balance + ta
                        accocgst.save()
                        accosgst = accounts1.objects.get(
                            name='Input SGST', cid=cmp1)
                        accosgst.balance = accosgst.balance + ta
                        accosgst.save()
                    else:
                        accoigst = accounts1.objects.get(
                            name='Input IGST', cid=cmp1)
                        ta = otaxamnt[1] - taxamnt[1]
                        accoigst.balance = accoigst.balance + ta
                        accoigst.save()
                else:
                    pass
        except:
            pass
        try:
            if bundle.objects.get(name=product[1], cid=cmp1):
                bundl = bundle.objects.get(name=product[1], cid=cmp1)
                if int(qty[1]) > int(creqty[1]):
                    bundl.qty = int(bundl.qty) + (int(qty[1]) - int(creqty[1]))
                    bundl.save()
                    if placosupply == cmp1.state:
                        tax = taxamnt[1] / 2
                        otax = otaxamnt[1] / 2
                        accocgst = accounts1.objects.get(
                            name='Input CGST', cid=cmp1)
                        ta = tax - otax
                        accocgst.balance = accocgst.balance - ta
                        accocgst.save()
                        accosgst = accounts1.objects.get(
                            name='Input SGST', cid=cmp1)
                        accosgst.balance = accosgst.balance - ta
                        accosgst.save()
                    else:
                        accoigst = accounts1.objects.get(
                            name='Input IGST', cid=cmp1)
                        ta = taxamnt[1] - otaxamnt[1]
                        accoigst.balance = accoigst.balance - ta
                        accoigst.save()
                elif int(qty[1]) < int(creqty[1]):
                    bundl.qty = int(bundl.qty) - (int(creqty[1]) - int(qty[1]))
                    bundl.save()
                    if placosupply == cmp1.state:
                        tax = taxamnt[1] / 2
                        otax = otaxamnt[1] / 2
                        accocgst = accounts1.objects.get(
                            name='Input CGST', cid=cmp1)
                        ta = otax - tax
                        accocgst.balance = accocgst.balance + ta
                        accocgst.save()
                        accosgst = accounts1.objects.get(
                            name='Input SGST', cid=cmp1)
                        accosgst.balance = accosgst.balance + ta
                        accosgst.save()
                    else:
                        accoigst = accounts1.objects.get(
                            name='Input IGST', cid=cmp1)
                        ta = otaxamnt[1] - taxamnt[1]
                        accoigst.balance = accoigst.balance + ta
                        accoigst.save()
                else:
                    pass
        except:
            pass
        try:
            if inventory.objects.get(name=product[2], cid=cmp1):
                invent = inventory.objects.get(name=product[2], cid=cmp1)
                if int(qty[2]) > int(creqty[2]):
                    invent.initialqty = int(
                        invent.initialqty) + (int(qty[2]) - int(creqty[2]))
                    invent.save()
                    cxq = float(invent.cost) * \
                        (float(qty[2]) - float(creqty[2]))
                    accnt = accounts1.objects.get(
                        name=invent.invacnt, cid=cmp1)
                    accnt.balance = accnt.balance + cxq
                    accnt.save()
                    newtot = tot[2] - otot[2]
                    if placosupply == cmp1.state:
                        tax = taxamnt[2] / 2
                        otax = otaxamnt[2] / 2
                        accocgst = accounts1.objects.get(
                            name='Input CGST', cid=cmp1)
                        ta = tax - otax
                        accocgst.balance = accocgst.balance - ta
                        accocgst.save()
                        accosgst = accounts1.objects.get(
                            name='Input SGST', cid=cmp1)
                        accosgst.balance = accosgst.balance - ta
                        accosgst.save()
                    else:
                        accoigst = accounts1.objects.get(
                            name='Input IGST', cid=cmp1)
                        ta = taxamnt[2] - otaxamnt[2]
                        accoigst.balance = accoigst.balance - ta
                        accoigst.save()
                elif int(qty[2]) < int(creqty[2]):
                    invent.initialqty = int(
                        invent.initialqty) - (int(creqty[2]) - int(qty[2]))
                    invent.save()
                    cxq = float(invent.cost) * \
                        (float(creqty[2]) - float(qty[2]))
                    accnt = accounts1.objects.get(
                        name=invent.invacnt, cid=cmp1)
                    accnt.balance = accnt.balance - cxq
                    accnt.save()
                    newtot = otot[2] - tot[2]
                    if placosupply == cmp1.state:
                        tax = taxamnt[2] / 2
                        otax = otaxamnt[2] / 2
                        accocgst = accounts1.objects.get(
                            name='Input CGST', cid=cmp1)
                        ta = otax - tax
                        accocgst.balance = accocgst.balance + ta
                        accocgst.save()
                        accosgst = accounts1.objects.get(
                            name='Input SGST', cid=cmp1)
                        accosgst.balance = accosgst.balance + ta
                        accosgst.save()
                    else:
                        accoigst = accounts1.objects.get(
                            name='Input IGST', cid=cmp1)
                        ta = otaxamnt[2] - taxamnt[2]
                        accoigst.balance = accoigst.balance + ta
                        accoigst.save()
        except:
            pass
        try:
            if noninventory.objects.get(name=product[2], cid=cmp1):
                noninvent = noninventory.objects.get(name=product[2], cid=cmp1)
                if int(qty[2]) > int(creqty[2]):
                    noninvent.qty = int(noninvent.qty) + \
                        (int(qty[2]) - int(creqty[2]))
                    noninvent.save()
                    newtot = tot[2] - otot[2]
                    if placosupply == cmp1.state:
                        tax = taxamnt[2] / 2
                        otax = otaxamnt[2] / 2
                        accocgst = accounts1.objects.get(
                            name='Input CGST', cid=cmp1)
                        ta = tax - otax
                        accocgst.balance = accocgst.balance - ta
                        accocgst.save()
                        accosgst = accounts1.objects.get(
                            name='Input SGST', cid=cmp1)
                        accosgst.balance = accosgst.balance - ta
                        accosgst.save()
                    else:
                        accoigst = accounts1.objects.get(
                            name='Input IGST', cid=cmp1)
                        ta = taxamnt[2] - otaxamnt[2]
                        accoigst.balance = accoigst.balance - ta
                        accoigst.save()
                elif int(qty[2]) < int(creqty[2]):
                    noninvent.qty = int(noninvent.qty) - \
                        (int(creqty[2]) - int(qty[2]))
                    noninvent.save()
                    newtot = otot[2] - tot[2]
                    if placosupply == cmp1.state:
                        tax = taxamnt[2] / 2
                        otax = otaxamnt[2] / 2
                        accocgst = accounts1.objects.get(
                            name='Input CGST', cid=cmp1)
                        ta = otax - tax
                        accocgst.balance = accocgst.balance + ta
                        accocgst.save()
                        accosgst = accounts1.objects.get(
                            name='Input SGST', cid=cmp1)
                        accosgst.balance = accosgst.balance + ta
                        accosgst.save()
                    else:
                        accoigst = accounts1.objects.get(
                            name='Input IGST', cid=cmp1)
                        ta = otaxamnt[2] - taxamnt[2]
                        accoigst.balance = accoigst.balance + ta
                        accoigst.save()
                else:
                    pass
        except:
            pass
        try:
            if bundle.objects.get(name=product[2], cid=cmp1):
                bundl = bundle.objects.get(name=product[2], cid=cmp1)
                if int(qty[2]) > int(creqty[2]):
                    bundl.qty = int(bundl.qty) + (int(qty[2]) - int(creqty[2]))
                    bundl.save()
                    if placosupply == cmp1.state:
                        tax = taxamnt[2] / 2
                        otax = otaxamnt[2] / 2
                        accocgst = accounts1.objects.get(
                            name='Input CGST', cid=cmp1)
                        ta = tax - otax
                        accocgst.balance = accocgst.balance - ta
                        accocgst.save()
                        accosgst = accounts1.objects.get(
                            name='Input SGST', cid=cmp1)
                        accosgst.balance = accosgst.balance - ta
                        accosgst.save()
                    else:
                        accoigst = accounts1.objects.get(
                            name='Input IGST', cid=cmp1)
                        ta = taxamnt[2] - otaxamnt[2]
                        accoigst.balance = accoigst.balance - ta
                        accoigst.save()
                elif int(qty[2]) < int(creqty[2]):
                    bundl.qty = int(bundl.qty) - (int(creqty[2]) - int(qty[2]))
                    bundl.save()
                    if placosupply == cmp1.state:
                        tax = taxamnt[2] / 2
                        otax = otaxamnt[2] / 2
                        accocgst = accounts1.objects.get(
                            name='Input CGST', cid=cmp1)
                        ta = otax - tax
                        accocgst.balance = accocgst.balance + ta
                        accocgst.save()
                        accosgst = accounts1.objects.get(
                            name='Input SGST', cid=cmp1)
                        accosgst.balance = accosgst.balance + ta
                        accosgst.save()
                    else:
                        accoigst = accounts1.objects.get(
                            name='Input IGST', cid=cmp1)
                        ta = otaxamnt[2] - taxamnt[2]
                        accoigst.balance = accoigst.balance + ta
                        accoigst.save()
                else:
                    pass
        except:
            pass
        try:
            if inventory.objects.get(name=product[3], cid=cmp1):
                invent = inventory.objects.get(name=product[3], cid=cmp1)
                if int(qty[3]) > int(creqty[3]):
                    invent.initialqty = int(
                        invent.initialqty) + (int(qty[3]) - int(creqty[3]))
                    invent.save()
                    cxq = float(invent.cost) * \
                        (float(qty[3]) - float(creqty[3]))
                    accnt = accounts1.objects.get(
                        name=invent.invacnt, cid=cmp1)
                    accnt.balance = accnt.balance + cxq
                    accnt.save()
                    newtot = tot[3] - otot[3]
                    if placosupply == cmp1.state:
                        tax = taxamnt[3] / 2
                        otax = otaxamnt[3] / 2
                        accocgst = accounts1.objects.get(
                            name='Input CGST', cid=cmp1)
                        ta = tax - otax
                        accocgst.balance = accocgst.balance - ta
                        accocgst.save()
                        accosgst = accounts1.objects.get(
                            name='Input SGST', cid=cmp1)
                        accosgst.balance = accosgst.balance - ta
                        accosgst.save()
                    else:
                        accoigst = accounts1.objects.get(
                            name='Input IGST', cid=cmp1)
                        ta = taxamnt[3] - otaxamnt[3]
                        accoigst.balance = accoigst.balance - ta
                        accoigst.save()
                elif int(qty[3]) < int(creqty[3]):
                    invent.initialqty = int(
                        invent.initialqty) - (int(creqty[3]) - int(qty[3]))
                    invent.save()
                    cxq = float(invent.cost) * \
                        (float(creqty[3]) - float(qty[3]))
                    accnt = accounts1.objects.get(
                        name=invent.invacnt, cid=cmp1)
                    accnt.balance = accnt.balance - cxq
                    accnt.save()
                    newtot = otot[3] - tot[3]
                    if placosupply == cmp1.state:
                        tax = taxamnt[3] / 2
                        otax = otaxamnt[3] / 2
                        accocgst = accounts1.objects.get(
                            name='Input CGST', cid=cmp1)
                        ta = otax - tax
                        accocgst.balance = accocgst.balance + ta
                        accocgst.save()
                        accosgst = accounts1.objects.get(
                            name='Input SGST', cid=cmp1)
                        accosgst.balance = accosgst.balance + ta
                        accosgst.save()
                    else:
                        accoigst = accounts1.objects.get(
                            name='Input IGST', cid=cmp1)
                        ta = otaxamnt[3] - taxamnt[3]
                        accoigst.balance = accoigst.balance + ta
                        accoigst.save()
        except:
            pass
        try:
            if noninventory.objects.get(name=product[3], cid=cmp1):
                noninvent = noninventory.objects.get(name=product[3], cid=cmp1)
                if int(qty[3]) > int(creqty[3]):
                    noninvent.qty = int(noninvent.qty) + \
                        (int(qty[3]) - int(creqty[3]))
                    noninvent.save()
                    newtot = tot[3] - otot[3]
                    if placosupply == cmp1.state:
                        tax = taxamnt[3] / 2
                        otax = otaxamnt[3] / 2
                        accocgst = accounts1.objects.get(
                            name='Input CGST', cid=cmp1)
                        ta = tax - otax
                        accocgst.balance = accocgst.balance - ta
                        accocgst.save()
                        accosgst = accounts1.objects.get(
                            name='Input SGST', cid=cmp1)
                        accosgst.balance = accosgst.balance - ta
                        accosgst.save()
                    else:
                        accoigst = accounts1.objects.get(
                            name='Input IGST', cid=cmp1)
                        ta = taxamnt[3] - otaxamnt[3]
                        accoigst.balance = accoigst.balance - ta
                        accoigst.save()
                elif int(qty[3]) < int(creqty[3]):
                    noninvent.qty = int(noninvent.qty) - \
                        (int(creqty[3]) - int(qty[3]))
                    noninvent.save()
                    newtot = otot[3] - tot[3]
                    if placosupply == cmp1.state:
                        tax = taxamnt[3] / 2
                        otax = otaxamnt[3] / 2
                        accocgst = accounts1.objects.get(
                            name='Input CGST', cid=cmp1)
                        ta = otax - tax
                        accocgst.balance = accocgst.balance + ta
                        accocgst.save()
                        accosgst = accounts1.objects.get(
                            name='Input SGST', cid=cmp1)
                        accosgst.balance = accosgst.balance + ta
                        accosgst.save()
                    else:
                        accoigst = accounts1.objects.get(
                            name='Input IGST', cid=cmp1)
                        ta = otaxamnt[3] - taxamnt[3]
                        accoigst.balance = accoigst.balance + ta
                        accoigst.save()
                else:
                    pass
        except:
            pass
        try:
            if bundle.objects.get(name=product[3], cid=cmp1):
                bundl = bundle.objects.get(name=product[3], cid=cmp1)
                if int(qty[3]) > int(creqty[3]):
                    bundl.qty = int(bundl.qty) + (int(qty[3]) - int(creqty[3]))
                    bundl.save()
                    if placosupply == cmp1.state:
                        tax = taxamnt[3] / 2
                        otax = otaxamnt[3] / 2
                        accocgst = accounts1.objects.get(
                            name='Input CGST', cid=cmp1)
                        ta = tax - otax
                        accocgst.balance = accocgst.balance - ta
                        accocgst.save()
                        accosgst = accounts1.objects.get(
                            name='Input SGST', cid=cmp1)
                        accosgst.balance = accosgst.balance - ta
                        accosgst.save()
                    else:
                        accoigst = accounts1.objects.get(
                            name='Input IGST', cid=cmp1)
                        ta = taxamnt[3] - otaxamnt[3]
                        accoigst.balance = accoigst.balance - ta
                        accoigst.save()
                elif int(qty[3]) < int(creqty[3]):
                    bundl.qty = int(bundl.qty) - (int(creqty[3]) - int(qty[3]))
                    bundl.save()
                    if placosupply == cmp1.state:
                        tax = taxamnt[3] / 2
                        otax = otaxamnt[3] / 2
                        accocgst = accounts1.objects.get(
                            name='Input CGST', cid=cmp1)
                        ta = otax - tax
                        accocgst.balance = accocgst.balance + ta
                        accocgst.save()
                        accosgst = accounts1.objects.get(
                            name='Input SGST', cid=cmp1)
                        accosgst.balance = accosgst.balance + ta
                        accosgst.save()
                    else:
                        accoigst = accounts1.objects.get(
                            name='Input IGST', cid=cmp1)
                        ta = otaxamnt[3] - taxamnt[3]
                        accoigst.balance = accoigst.balance + ta
                        accoigst.save()
                else:
                    pass
        except:
            pass
        exps.payee = request.POST['payee']
        exps.paymdate = request.POST['paymdate']
        exps.paymmethod = request.POST['paymmethod']
        exps.totamt = request.POST['totamt']

        exps.category1 = request.POST['category1']
        exps.descrptin1 = request.POST['descrptin1']
        exps.catqty1 = request.POST['catqty1']
        exps.catprice1 = request.POST['catprice1']
        exps.cattotal1 = request.POST['cattotal1']

        exps.category2 = request.POST['category2']
        exps.descrptin2 = request.POST['descrptin2']
        exps.catqty2 = request.POST['catqty2']
        exps.catprice2 = request.POST['catprice2']
        exps.cattotal2 = request.POST['cattotal2']

        exps.category3 = request.POST['category3']
        exps.descrptin3 = request.POST['descrptin3']
        exps.catqty3 = request.POST['catqty3']
        exps.catprice3 = request.POST['catprice3']
        exps.cattotal3 = request.POST['cattotal3']

        exps.category4 = request.POST['category4']
        exps.descrptin4 = request.POST['descrptin4']
        exps.catqty4 = request.POST['catqty4']
        exps.catprice4 = request.POST['catprice4']
        exps.cattotal4 = request.POST['cattotal4']

        exps.product = request.POST['product']
        exps.hsn = request.POST['hsn']
        exps.qty = request.POST['qty']
        exps.price = request.POST['price']
        exps.total = request.POST['total']
        exps.product2 = request.POST['product2']
        exps.hsn2 = request.POST['hsn2']
        exps.qty2 = request.POST['qty2']
        exps.price2 = request.POST['price2']
        exps.total2 = request.POST['total2']
        exps.product3 = request.POST['product3']
        exps.hsn3 = request.POST['hsn3']
        exps.qty3 = request.POST['qty3']
        exps.price3 = request.POST['price3']
        exps.total3 = request.POST['total3']
        exps.product4 = request.POST['product4']
        exps.hsn4 = request.POST['hsn4']
        exps.qty4 = request.POST['qty4']
        exps.price4 = request.POST['price4']
        exps.total4 = request.POST['total4']
        exps.subtotal = request.POST['subtotal']
        exps.tax = request.POST['tax']
        exps.tax2 = request.POST['tax2']
        exps.tax3 = request.POST['tax3']
        exps.tax4 = request.POST['tax4']
        exps.taxamount = request.POST['taxamount']
        exps.grandtotal = request.POST['grandtotal']
        exps.save()
        return redirect('goexpences')
    except:
        return redirect('goexpences')


@login_required(login_url='regcomp')
def estindex(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        toda = date.today()
        tod = toda.strftime("%Y-%m-%d")
        customers = customer.objects.filter(cid=cmp1).all()
        est1 = estimate.objects.filter(cid=cmp1).all()
        inv = inventory.objects.filter(cid=cmp1).all()
        bun = bundle.objects.filter(cid=cmp1).all()
        noninv = noninventory.objects.filter(cid=cmp1).all()
        ser = service.objects.filter(cid=cmp1).all()
        context = {'est': est1, 'customers': customers, 'cmp1': cmp1, 'inv': inv, 'bun': bun, 'noninv': noninv,
                   'ser': ser, 'tod': tod}
        return render(request, 'app1/estimate.html', context)
    except:
        return redirect('gosalesrecords')


@login_required(login_url='regcomp')
def estcreate(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        est2 = estimate(customer=request.POST['customer'], email=request.POST['email'], billingaddress=request.POST['billingaddress'], estimatedate=request.POST['estimatedate'], expirationdate=request.POST['expirationdate'], placeofsupply=request.POST['placeofsupply'],
                        estimateno='1000', product=request.POST['product'], description=request.POST['description'],
                        hsn=request.POST['hsn'],
                        qty=request.POST['qty'], rate=request.POST['rate'], tax=request.POST['tax'],
                        total=request.POST['total'], taxamount=request.POST['taxamount'],
                        subtotal=request.POST['sub_total'], estimatetotal=request.POST['estimatetotal'], product1=request.POST[
                            'product1'], hsn1=request.POST['hsn1'], qty1=request.POST['qty1'],
                        description1=request.POST['description1'], rate1=request.POST[
                            'rate1'], total1=request.POST['total1'], tax1=request.POST['tax1'],
                        product2=request.POST['product2'], hsn2=request.POST['hsn2'], qty2=request.POST['qty2'],
                        description2=request.POST['description2'], rate2=request.POST[
                            'rate2'], total2=request.POST['total2'], tax2=request.POST['tax2'],
                        product3=request.POST['product3'], hsn3=request.POST['hsn3'], qty3=request.POST['qty3'],
                        description3=request.POST['description3'], rate3=request.POST[
                            'rate3'], total3=request.POST['total3'], tax3=request.POST['tax3'],
                        cid=cmp1)
        est2.save()
        est2.estimateno = int(est2.estimateno) + est2.estimateid
        est2.save()
        return redirect('gosalesrecords')
    except:
        return redirect('gosalesrecords')


@login_required(login_url='regcomp')
def delayed(request):
    try:
        toda = date.today()
        tod = toda.strftime("%Y-%m-%d")
        cmp1 = company.objects.get(id=request.session["uid"])
        customers = customer.objects.filter(cid=cmp1).all()
        delayed1 = delayedcharge.objects.filter(cid=cmp1).all()
        inv = inventory.objects.filter(cid=cmp1).all()
        bun = bundle.objects.filter(cid=cmp1).all()
        noninv = noninventory.objects.filter(cid=cmp1).all()
        ser = service.objects.filter(cid=cmp1).all()
        context = {'delayed': delayed1, 'customers': customers, 'cmp1': cmp1, 'inv': inv, 'bun': bun, 'noninv': noninv,
                   'ser': ser, 'tod': tod}  # assigning key to a variable(not necessary)
        return render(request, 'app1/delayedcharge.html', context)
    except:
        return redirect('gosalesrecords')


@login_required(login_url='regcomp')
def delcreate(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        delayed2 = delayedcharge(customer=request.POST['customer'], delayedchargedate=request.POST['delayedchargedate'], delayedchargeno='1000', prodorser=request.POST['prodorser'], description=request.POST['description'], qty=request.POST['qty'], rate=request.POST['rate'], tax=request.POST['tax'],
                                 taxamount=request.POST['taxamount'],
                                 total=request.POST['total'], tax1=request.POST['tax1'],
                                 subtotal=request.POST['subtotal'],
                                 grandtotal=request.POST['grandtotal'], prodorser1=request.POST['prodorser1'],
                                 description1=request.POST['description1'], qty1=request.POST['qty1'], rate1=request.POST['rate1'], total1=request.POST[
                                     'total1'], prodorser2=request.POST['prodorser2'], description2=request.POST['description2'], qty2=request.POST['qty2'], rate2=request.POST['rate2'],
                                 total2=request.POST['total2'], tax2=request.POST['tax2'], prodorser3=request.POST[
                                     'prodorser3'], description3=request.POST['description3'], qty3=request.POST['qty3'], rate3=request.POST['rate3'],
                                 total3=request.POST['total3'], tax3=request.POST['tax3'],
                                 cid=cmp1)
        delayed2.save()
        delayed2.delayedchargeno = int(
            delayed2.delayedchargeno) + delayed2.delayedchargeid
        delayed2.save()
        return redirect('gosalesrecords')
    except:
        return redirect('gosalesrecords')


@login_required(login_url='regcomp')
def editestimate(request, id):
    try:
        cmp1 = company.objects.get(cid=request.session['uid'])
        edt = estimate.objects.get(estimateid=id, cid=cmp1)
        inv = inventory.objects.filter(cid=cmp1).all()
        bun = bundle.objects.filter(cid=cmp1).all()
        noninv = noninventory.objects.filter(cid=cmp1).all()
        ser = service.objects.filter(cid=cmp1).all()
        context = {'estimate': edt, 'cmp1': cmp1, 'inv': inv,
                   'noninv': noninv, 'bun': bun, 'ser': ser}
        return render(request, 'app1/edit.html', context)
    except:
        return redirect('gosalesrecords')


@login_required(login_url='regcomp')
def updateestimate(request, id):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        upd = estimate.objects.get(estimateid=id, cid=cmp1)
        upd.customer = request.POST['customer']
        upd.email = request.POST['email']
        upd.billingaddress = request.POST['billingaddress']
        upd.estimatedate = request.POST['estimatedate']
        upd.expirationdate = request.POST['expirationdate']
        upd.placeofsupply = request.POST['placeofsupply']
        upd.product = request.POST['product']
        upd.hsn = request.POST['hsn']
        upd.description = request.POST['description']
        upd.qty = request.POST['qty']
        upd.rate = request.POST['rate']
        upd.tax = request.POST['tax']
        upd.total = request.POST['total']
        upd.estimatetotal = request.POST['estimatetotal']
        upd.product1 = request.POST['product1']
        upd.hsn1 = request.POST['hsn1']
        upd.description1 = request.POST['description1']
        upd.qty1 = request.POST['qty1']
        upd.rate1 = request.POST['rate1']
        upd.total1 = request.POST['total1']
        upd.tax1 = request.POST['tax1']
        upd.product2 = request.POST['product2']
        upd.hsn2 = request.POST['hsn2']
        upd.description2 = request.POST['description2']
        upd.qty2 = request.POST['qty2']
        upd.rate2 = request.POST['rate2']
        upd.total2 = request.POST['total2']
        upd.tax2 = request.POST['tax2']
        upd.product3 = request.POST['product3']
        upd.hsn3 = request.POST['hsn3']
        upd.description3 = request.POST['description3']
        upd.qty3 = request.POST['qty3']
        upd.rate3 = request.POST['rate3']
        upd.total3 = request.POST['total3']
        upd.tax3 = request.POST['tax3']
        upd.taxamount = request.POST['taxamount']
        upd.save()
        return redirect('gosalesrecords')
    except:
        return redirect('gosalesrecords')


@login_required(login_url='regcomp')
def deleteestimate(request, id):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        upd = estimate.objects.get(estimateid=id, cid=cmp1)
        upd.delete()
        return redirect('gosalesrecords')
    except:
        return redirect('gosalesrecords')


@login_required(login_url='regcomp')
def editdelayed(request, id):
    try:
        cmp1 = company.objects.get(cid=request.session['uid'])
        edit = delayedcharge.objects.get(delayedchargeid=id, cid=cmp1)
        inv = inventory.objects.filter(cid=cmp1).all()
        bun = bundle.objects.filter(cid=cmp1).all()
        noninv = noninventory.objects.filter(cid=cmp1).all()
        ser = service.objects.filter(cid=cmp1).all()
        context = {'delayedcharge': edit, 'cmp1': cmp1,
                   'inv': inv, 'noninv': noninv, 'bun': bun, 'ser': ser}
        return render(request, 'app1/delayedit.html', context)
    except:
        return redirect('gosalesrecords')


@login_required(login_url='regcomp')
def delayedupdate(request, id):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        dela = delayedcharge.objects.get(delayedchargeid=id, cid=cmp1)
        dela.customer = request.POST['customer']
        dela.delayedchargedate = request.POST['delayedchargedate']
        dela.prodorser = request.POST['prodorser']
        dela.description = request.POST['description']
        dela.qty = request.POST['qty']
        dela.rate = request.POST['rate']
        dela.total = request.POST['total']
        dela.tax = request.POST['tax']
        dela.taxamount = request.POST['taxamount']
        dela.prodorser1 = request.POST['prodorser1']
        dela.description1 = request.POST['description1']
        dela.qty1 = request.POST['qty1']
        dela.rate1 = request.POST['rate1']
        dela.total1 = request.POST['total1']
        dela.tax1 = request.POST['tax1']
        dela.prodorser2 = request.POST['prodorser2']
        dela.description2 = request.POST['description2']
        dela.qty2 = request.POST['qty2']
        dela.rate2 = request.POST['rate2']
        dela.total2 = request.POST['total2']
        dela.tax2 = request.POST['tax2']
        dela.prodorser3 = request.POST['prodorser3']
        dela.description3 = request.POST['description3']
        dela.qty3 = request.POST['qty3']
        dela.rate3 = request.POST['rate3']
        dela.total3 = request.POST['total3']
        dela.tax3 = request.POST['tax3']
        dela.save()
        return redirect('gosalesrecords')
    except:
        return redirect('gosalesrecords')


@login_required(login_url='regcomp')
def deletedelay(request, id):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        dela = delayedcharge.objects.get(delayedchargeid=id, cid=cmp1)
        dela.delete()
        return redirect('gosalesrecords')
    except:
        return redirect('gosalesrecords')


@login_required(login_url='regcomp')
def addpandse(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        if request.method == "POST":
            expenseaccount = request.POST.get('expenseaccount')
            income = request.POST.get('income')
            if expenseaccount == None:
                ser = service(name=request.POST.get('name'),
                              sku=request.POST.get('sku'),
                              sac=request.POST.get('sac'),
                              unit=request.POST.get('unit'),
                              categ=request.POST.get('categ'),
                              descr=request.POST.get('descr'),
                              saleprice=request.POST.get('saleprice'),
                              income=request.POST.get('income'),
                              tax=request.POST.get('tax'),
                              abatement=request.POST.get('abatement'),
                              sertype=request.POST.get('sertype'),
                              purchasedescr=request.POST.get('purchasedescr'),
                              cost=request.POST.get('cost'),
                              expenseaccount="NULL",
                              purchasetax="NULL",
                              revcharge="NULL",
                              presupplier="NULL",
                              cid=cmp1)
                img = request.FILES["img"]
                ser.img = img
                ser.save()
                return redirect('/app1/gopands')
            elif income == None:
                ser = service(name=request.POST.get('name'),
                              sku=request.POST.get('sku'),
                              sac=request.POST.get('sac'),
                              unit=request.POST.get('unit'),
                              categ=request.POST.get('categ'),
                              descr=request.POST.get('descr'),
                              saleprice=request.POST.get('saleprice'),
                              income="NULL",
                              tax="NULL",
                              abatement="NULL",
                              sertype="NULL",
                              purchasedescr=request.POST.get('purchasedescr'),
                              cost=request.POST.get('cost'),
                              expenseaccount=request.POST.get(
                                  'expenseaccount'),
                              purchasetax=request.POST.get('purchasetax'),
                              revcharge=request.POST.get('revcharge'),
                              presupplier=request.POST.get('presupplier'),
                              cid=cmp1)
                img = request.FILES["img"]
                ser.img = img
                ser.save()
                return redirect('/app1/gopands')
            else:
                ser = service(name=request.POST.get('name'),
                              sku=request.POST.get('sku'),
                              sac=request.POST.get('sac'),
                              unit=request.POST.get('unit'),
                              categ=request.POST.get('categ'),
                              descr=request.POST.get('descr'),
                              saleprice=request.POST.get('saleprice'),
                              income=request.POST.get('income'),
                              tax=request.POST.get('tax'),
                              abatement=request.POST.get('abatement'),
                              sertype=request.POST.get('sertype'),
                              purchasedescr=request.POST.get('purchasedescr'),
                              cost=request.POST.get('cost'),
                              expenseaccount=request.POST.get(
                                  'expenseaccount'),
                              purchasetax=request.POST.get('purchasetax'),
                              revcharge=request.POST.get('revcharge'),
                              presupplier=request.POST.get('presupplier'),
                              cid=cmp1)
                img = request.FILES["img"]
                ser.img = img
                ser.save()
                return redirect('/app1/gopands')
    except:
        return redirect('gopands')


def viewlist():
    serlist = ['Advertising/Promotional',
               'Bank Charges',
               'Business Licenses and Permits',
               'Charitable Contributions',
               'Computer and Internet Expense',
               'Continuing Education',
               'Depreciation Expense',
               'Dues and Subscriptions',
               'Housekeeping Charges',
               'Insurance Expense',
               'Insurance Expense-General Liability Insurance',
               'Insurance Expense-Health Insurance',
               'Insurance Expense-Life and Disability Insurance',
               'Insurance Expense-Professional Liability',
               'Interest Expense',
               'Meals and entertainment',
               'Office Supplies',
               'Postage and Delivery',
               'Printing and Reproduction',
               'Professional Fees',
               'Purchases',
               'Rent Expense',
               'Repair and maintenance',
               'Small Tools and Equipment',
               'Swachh Bharat Cess Expense',
               'Taxes - Property',
               'Telephone Expense',
               'Travel Expense',
               'Uncategorised Expense',
               'Utilities',
               'Cash and cash equivalents',
               'Accounts Receivable (Debtors)',
               'Deferred CGST',
               'Deferred GST Input Credit',
               'Deferred IGST',
               'Deferred Krishi Kalyan Cess Input Credit',
               'Deferred Service Tax Input Credit',
               'Deferred SGST',
               'Deferred VAT Input Credit',
               'GST Refund',
               'Inventory Asset',
               'Krishi Kalyan Cess Refund',
               'Prepaid Insurance',
               'Service Tax Refund',
               'TDS Receivable',
               'Uncategorised Asset',
               'Undeposited Funds',
               'Accumulated Depreciation',
               'Buildings and Improvements',
               'Furniture and Equipment',
               'Land',
               'Leasehold Improvements',
               'Vehicles',
               'CGST Payable',
               'CST Payable',
               'CST Suspense',
               'GST Payable',
               'GST Suspense',
               'IGST Payable',
               'Input CGST',
               'Input CGST Tax RCM',
               'Input IGST',
               'Input IGST Tax RCM',
               'Input Krishi Kalyan Cess',
               'Input Krishi Kalyan Cess RCM',
               'Input Service Tax',
               'Input Service Tax RCM',
               'Input SGST',
               'Input SGST Tax RCM',
               'Input VAT 14%',
               'Input VAT 4%',
               'Input VAT 5%',
               'Krishi Kalyan Cess Payable',
               'Krishi Kalyan Cess Suspense',
               'Output CGST',
               'Output CGST Tax RCM',
               'Output CST 2%',
               'Output IGST',
               'Output IGST Tax RCM',
               'Output Krishi Kalyan Cess',
               'Output Krishi Kalyan Cess RCM',
               'Output Service Tax',
               'Output Service Tax RCM',
               'Output SGST',
               'Output SGST Tax RCM',
               'Output VAT 14%',
               'Output VAT 4%',
               'Output VAT 5%',
               'Service Tax Payable',
               'Service Tax Suspense',
               'SGST Payable',
               'Swachh Bharat Cess Payable',
               'Swachh Bharat Cess Suspense',
               'TDS Payable',
               'VAT Suspense',
               'Opening Balance Equity',
               'Retained Earnings',
               'Billable Expense Income',
               'Consulting Income',
               'Product Sales',
               'Sales',
               'Sales - Hardware',
               'Sales - Software',
               'Sales - Support and Maintenance',
               'Sales Discounts',
               'Sales of Product Income',
               'Uncategorised Income',
               'Cost of sales',
               'Equipment Rental for Jobs',
               'Freight and Shipping Costs',
               'Merchant Account Fees',
               'Purchases - Hardware for Resale',
               'Purchases - Software for Resale'
               'Subcontracted Services',
               'Tools and Craft Supplies',
               'Finance Charge Income',
               'Insurance Proceeds Received',
               'Interest Income',
               'Proceeds from Sale of Assets',
               'Shipping and Delivery Income',
               'Ask My Accountant',
               'CGST write-off',
               'GST write-off',
               'IGST write-off',
               'Miscellaneous Expense',
               'Political Contributions',
               'SGST write-off',
               'Tax write-of',
               'Vehicle Expenses']

    ser = service.objects.all()
    for s in ser:
        serlist.append(str(s.name))
    return serlist


@login_required(login_url='regcomp')
def editser(request, id):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        se = service.objects.get(serviceid=id, cid=cmp1)
        context = {'ser': se, 'cmp1': cmp1}
        return render(request, 'app1/editserv.html', context)
    except:
        return redirect('gopands')


@login_required(login_url='regcomp')
def updateser(request, id):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        ser = service.objects.get(serviceid=id, cid=cmp1)
        ser.name = request.POST['name']
        ser.sku = request.POST['sku']
        ser.sac = request.POST['sac']
        ser.unit = request.POST['unit']
        ser.categ = request.POST['categ']
        ser.descr = request.POST['descr']
        ser.saleprice = request.POST['saleprice']
        ser.income = request.POST['income']
        ser.tax = request.POST['tax']
        ser.abatement = request.POST['abatement']
        ser.sertype = request.POST['sertype']
        ser.purchasedescr = request.POST['purchasedescr']
        ser.cost = request.POST['cost']
        ser.expenseaccount = request.POST['expenseaccount']
        ser.purchasetax = request.POST['purchasetax']
        ser.revcharge = request.POST['revcharge']
        ser.presupplier = request.POST['presupplier']
        ser.save()
        return redirect('gopands')
    except:
        return redirect('gopands')


@login_required(login_url='regcomp')
def deleteser(request, id):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        sl = service.objects.get(serviceid=id, cid=cmp1)
        sl.delete()
        return redirect('gopands')
    except:
        return redirect('gopands')


@login_required(login_url='regcomp')
def addnoninv(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        if request.method == "POST":
            expenseaccount = request.POST.get('expenseaccount')
            tax = request.POST.get('tax')
            purchasetax = request.POST.get('purchasetax')
            if expenseaccount == None:
                noninv = noninventory(name=request.POST.get('name'),
                                      sku=request.POST.get('sku'),
                                      hsn=request.POST.get('hsn'),
                                      unit=request.POST.get('unit'),
                                      category=request.POST.get('category'),
                                      descr=request.POST.get('descr'),
                                      saleprice=request.POST.get('saleprice'),
                                      income=request.POST.get('income'),
                                      tax=request.POST.get('tax'),
                                      purchasedescr=request.POST.get(
                                          'purchasedescr'),
                                      qty=0,
                                      cost=request.POST.get('cost'),
                                      expenseaccount="NULL",
                                      purchasetax="NULL",
                                      revcharge="NULL",
                                      presupplier="NULL",
                                      cid=cmp1)
                img = request.FILES["image"]
                noninv.image = img
                noninv.save()
                return redirect('/app1/gopands')
            elif purchasetax == None:
                noninv = noninventory(name=request.POST.get('name'),
                                      sku=request.POST.get('sku'),
                                      hsn=request.POST.get('hsn'),
                                      unit=request.POST.get('unit'),
                                      category=request.POST.get('category'),
                                      descr=request.POST.get('descr'),
                                      saleprice=request.POST.get('saleprice'),
                                      income=request.POST.get('income'),
                                      tax=request.POST.get('tax'),
                                      purchasedescr=request.POST.get(
                                          'purchasedescr'),
                                      qty=0,
                                      cost=request.POST.get('cost'),
                                      expenseaccount=request.POST.get(
                                          'expenseaccount'),
                                      purchasetax="NULL",
                                      revcharge="NULL",
                                      presupplier="NULL",
                                      cid=cmp1)
                img = request.FILES["image"]
                noninv.image = img
                noninv.save()
                return redirect('/app1/gopands')
            elif tax == None:
                noninv = noninventory(name=request.POST.get('name'),
                                      sku=request.POST.get('sku'),
                                      hsn=request.POST.get('hsn'),
                                      unit=request.POST.get('unit'),
                                      category=request.POST.get('category'),
                                      descr=request.POST.get('descr'),
                                      saleprice=request.POST.get('saleprice'),
                                      income=request.POST.get('income'),
                                      tax="NULL",
                                      purchasedescr=request.POST.get(
                                          'purchasedescr'),
                                      qty=0,
                                      cost=request.POST.get('cost'),
                                      expenseaccount=request.POST.get(
                                          'expenseaccount'),
                                      purchasetax=request.POST.get(
                                          'purchasetax'),
                                      revcharge=request.POST.get('revcharge'),
                                      presupplier=request.POST.get(
                                          'presupplier'),
                                      cid=cmp1)
                img = request.FILES["image"]
                noninv.image = img
                noninv.save()
                return redirect('/app1/gopands')
            else:
                noninv = noninventory(name=request.POST.get('name'),
                                      sku=request.POST.get('sku'),
                                      hsn=request.POST.get('hsn'),
                                      unit=request.POST.get('unit'),
                                      category=request.POST.get('category'),
                                      descr=request.POST.get('descr'),
                                      saleprice=request.POST.get('saleprice'),
                                      income=request.POST.get('income'),
                                      tax=request.POST.get('tax'),
                                      purchasedescr=request.POST.get(
                                          'purchasedescr'),
                                      qty=0,
                                      cost=request.POST.get('cost'),
                                      expenseaccount=request.POST.get(
                                          'expenseaccount'),
                                      purchasetax=request.POST.get(
                                          'purchasetax'),
                                      revcharge=request.POST.get('revcharge'),
                                      presupplier=request.POST.get(
                                          'presupplier'),
                                      cid=cmp1)
                img = request.FILES["image"]
                noninv.image = img
                noninv.save()
                return redirect('/app1/gopands')
    except:
        return redirect('gopands')


@login_required(login_url='regcomp')
def nonivndisplay(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        if request.method == 'GET':
            noninv = noninventory.objects.filter(cid=cmp1).all()
            return render((request, 'pands.html', {'noninventory': noninv, 'cmp1': cmp1}))
    except:
        return redirect('gopands')


@login_required(login_url='regcomp')
def deletenoninv(request, id):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        noninv = noninventory.objects.get(noninventoryid=id, cid=cmp1)
        noninv.delete()
        return redirect('gopands')
    except:
        return redirect('gopands')


@login_required(login_url='regcomp')
def editnoninv(request, id):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        noninv = noninventory.objects.get(noninventoryid=id, cid=cmp1)
        context = {'noninventory': noninv, 'cmp1': cmp1}
        return render(request, 'app1/editnoninv.html', context)
    except:
        return redirect('gopands')


@login_required(login_url='regcomp')
def noninvupdate(request, id):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        noninv = noninventory.objects.get(noninventoryid=id, cid=cmp1)
        noninv.name = request.POST['name']
        noninv.sku = request.POST['sku']
        noninv.hsn = request.POST['hsn']
        noninv.unit = request.POST['unit']
        noninv.category = request.POST['category']
        noninv.descr = request.POST['descr']
        noninv.saleprice = request.POST['saleprice']
        noninv.income = request.POST['income']
        noninv.tax = request.POST['tax']
        noninv.purchasedescr = request.POST['purchasedescr']
        noninv.cost = request.POST['cost']
        noninv.expenseaccount = request.POST['expenseaccount']
        noninv.purchasetax = request.POST['purchasetax']
        noninv.revcharge = request.POST['revcharge']
        noninv.presupplier = request.POST['presupplier']

        noninv.save()
        return redirect('gopands')
    except:
        return redirect('gopands')


@login_required(login_url='regcomp')
def addbun(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        if request.method == "POST":
            bun = bundle(name=request.POST['name'],
                         sku=request.POST['sku'], description=request.POST['description'],
                         product1=request.POST['product1'], product2=request.POST['product2'],
                         product3=request.POST['product3'], product4=request.POST['product4'],
                         hsn1=request.POST['hsn1'], hsn2=request.POST['hsn2'], hsn3=request.POST['hsn3'],
                         hsn4=request.POST['hsn4'], description1=request.POST['description1'],
                         description2=request.POST['description2'], description3=request.POST['description3'],
                         description4=request.POST['description4'],
                         qty1=request.POST['qty1'], qty2=request.POST['qty2'], qty3=request.POST['qty3'],
                         qty4=request.POST['qty4'], total1=request.POST['total1'], total2=request.POST['total2'],
                         total3=request.POST['total3'], total4=request.POST['total4'], price1=request.POST['price1'],
                         price2=request.POST['price2'], price3=request.POST['price3'], price4=request.POST['price4'],
                         tax1=request.POST['tax1'], tax2=request.POST['tax2'], tax3=request.POST['tax3'],
                         tax4=request.POST['tax4'], grandtotal=request.POST['grandtotal'], cid=cmp1)
            img = request.FILES["image"]
            bun.image = img
            bun.save()
            return redirect('godash')
        else:
            return redirect('gopands')
    except:
        return redirect('gopands')


@login_required(login_url='regcomp')
def display(request):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        if request.method == 'GET':
            tels = bundle.objects.filter(cid=cmp1).all()
            return render((request, 'pands.html',
                           {'bundle': tels}))
    except:
        return redirect('gopands')


@login_required(login_url='regcomp')
def editbun(request, id):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        bundles = bundle.objects.get(bundleid=id, cid=cmp1)
        inv = inventory.objects.filter(cid=cmp1)
        noninv = noninventory.objects.filter(cid=cmp1)
        context = {'bundle': bundles, 'inv': inv,
                   'noninv': noninv, 'cmp1': cmp1}
        return render(request, 'app1/editbun.html', context)
    except:
        return redirect('gopands')


@login_required(login_url='regcomp')
def updatebun(request, id):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        bundl = bundle.objects.get(bundleid=id, cid=cmp1)
        bundl.name = request.POST['name']
        bundl.sku = request.POST['sku']
        bundl.description = request.POST['description']
        bundl.product1 = request.POST['product1']
        bundl.product2 = request.POST['product2']
        bundl.product3 = request.POST['product3']
        bundl.product4 = request.POST['product4']
        bundl.qty1 = request.POST['qty1']
        bundl.qty2 = request.POST['qty2']
        bundl.qty3 = request.POST['qty3']
        bundl.qty4 = request.POST['qty4']
        bundl.price1 = request.POST['price1']
        bundl.price2 = request.POST['price2']
        bundl.price3 = request.POST['price3']
        bundl.price4 = request.POST['price4']
        bundl.total1 = request.POST['total1']
        bundl.total2 = request.POST['total2']
        bundl.total3 = request.POST['total3']
        bundl.total4 = request.POST['total4']
        bundl.tax1 = request.POST['tax1']
        bundl.tax2 = request.POST['tax2']
        bundl.tax3 = request.POST['tax3']
        bundl.tax4 = request.POST['tax4']
        bundl.grandtotal = request.POST['grandtotal']
        bundl.save()
        return redirect('gopands')
    except:
        return redirect('gopands')


@login_required(login_url='regcomp')
def deletebun(request, id):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        bun = bundle.objects.get(bundleid=id, cid=cmp1)
        bun.delete()
        return redirect('gopands')
    except:
        return redirect('gopands')


@login_required(login_url='regcomp')
def addinv(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        if request.method == "POST":
            initialqty = float(request.POST['initialqty'])
            cost = float(request.POST['cost'])
            totalcost = float(initialqty * cost)
            inv = inventory(name=request.POST['name'],
                            sku=request.POST['sku'], hsn=request.POST['hsn'],
                            unit=request.POST['unit'], category=request.POST['category'],
                            initialqty=request.POST['initialqty'], date=request.POST['date'],
                            stockalrt=request.POST['stockalrt'],
                            invacnt=request.POST['invacnt'], description=request.POST['description'],
                            salesprice=request.POST['salesprice'], incomeacnt=request.POST['incomeacnt'],
                            tax=request.POST['tax'],
                            purchaseinfo=request.POST['purchaseinfo'], cost=request.POST['cost'],
                            expacnt=request.POST['expacnt'],
                            purtax=request.POST['purtax'], revcharge=request.POST['revcharge'],
                            presupplier=request.POST['presupplier'], cxq=totalcost,
                            cid=cmp1)
            img = request.FILES["image"]
            inv.image = img
            inv.save()
            invacnt = request.POST['invacnt']
            account = accounts1.objects.get(name=invacnt, cid=cmp1)
            account1 = accounts1.objects.get(
                name='Opening Balance Equity', cid=cmp1)
            try:
                if cost != 0:
                    accbal = float(account.balance)
                    bala = accbal + totalcost
                    account.balance = round(bala, 2)
                    account.save()
                    account1.balance = round(account1.balance + totalcost, 2)
                    account1.save()
            except:
                pass
            return redirect('gopands')
        else:
            return redirect('gopands')
    except:
        return redirect('gopands')


@login_required(login_url='regcomp')
def ivndisplay(request):
    try:
        if request.method == 'GET':
            print('hellow')
            inv = inventory.objects.filter(cid=cmp1).all()
            print(inv)
            for x in inv:
                print('hello')
                print(x.profile_pic)
            return render((request, 'pands.html', {'inventory': inv}))
    except:
        return redirect('gopands')


@login_required(login_url='regcomp')
def deleteinv(request, id):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        inv = inventory.objects.get(inventoryid=id, cid=cmp1)
        inv.delete()
        return redirect('gopands')
    except:
        return redirect('gopands')


@login_required(login_url='regcomp')
def editinv(request, id):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        inv = inventory.objects.get(inventoryid=id)
        context = {'inventory': inv, 'cmp1': cmp1}
        return render(request, 'app1/editinv.html', context)
    except:
        return redirect('gopands')


@login_required(login_url='regcomp')
def invupdate(request, id):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        inv = inventory.objects.get(inventoryid=id, cid=cmp1)
        inv.name = request.POST['name']
        inv.sku = request.POST['sku']
        inv.hsn = request.POST['hsn']
        inv.unit = request.POST['unit']
        inv.category = request.POST['category']
        inv.date = request.POST['date']
        inv.stockalrt = request.POST['stockalrt']
        inv.invacnt = request.POST['invacnt']
        inv.description = request.POST['description']
        inv.salesprice = request.POST['salesprice']
        inv.incomeacnt = request.POST['incomeacnt']
        # inv.tax = request.POST['tax']
        inv.purchaseinfo = request.POST['purchaseinfo']
        inv.cost = request.POST['cost']
        inv.expacnt = request.POST['expacnt']
        inv.purtax = request.POST['purtax']
        inv.revcharge = request.POST['revcharge']
        inv.presupplier = request.POST['presupplier']
        inv.save()
        return redirect('gopands')
    except:
        return redirect('gopands')


@login_required(login_url='regcomp')
def gorecon(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        accountyp = accountype.objects.filter(cid=cmp1).all()
        return render(request, 'app1/recon.html', {'cmp1': cmp1, 'accountype': accountyp})
    except:
        return redirect('something')


@login_required(login_url='regcomp')
def reconcreate(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        account = request.POST.get('account')
        begbal = request.POST.get('begbal')
        endbal = request.POST.get('endbal')
        enddate = request.POST.get('enddate')
        dat = request.POST.get('dat')
        serchar = request.POST.get('serchar')
        expacc = request.POST.get('expacc')
        dat1 = request.POST.get('dat1')
        intear = request.POST.get('intear')
        incacc = request.POST.get('incacc')
        if request.method == 'POST':
            if expenseaccount.objects.filter(account=account).exists() and expenseaccount.objects.filter(
                    cid=cmp1.cid) and incomeaccount.objects.filter(cid=cmp1.cid):
                expen = expenseaccount.objects.filter(
                    account=account, cid=cmp1.cid).get()
                incom = incomeaccount.objects.filter(
                    cid=cmp1.cid, expenceincomeid=expen).get()
                return render(request, 'app1/reconciled.html', {'expen': expen, 'incom': incom, 'cmp1': cmp1})
            else:
                pro1 = accountype.objects.filter(
                    accountname=account, cid=cmp1).get()
                expen = expenseaccount(account=account, begbal=begbal, endbal=endbal, enddate=enddate, dat=dat,
                                       serchar=serchar, expacc=expacc, cid=cmp1, expaccountypid=pro1)
                expen.save()
                pro = expenseaccount.objects.get(
                    expenseid=expen.expenseid, cid=cmp1)
                incom = incomeaccount(
                    dat1=dat1, intear=intear, incacc=incacc, cid=cmp1, expenceincomeid=pro)
                incom.save()
                expen1 = expenseaccount.objects.last()
                incom1 = incomeaccount.objects.last()
                return render(request, 'app1/reconciled.html', {'expen': expen1, 'incom': incom1, 'cmp1': cmp1})
        else:
            return redirect('gorecon')
    except:
        return redirect('gorecon')


@login_required(login_url='regcomp')
def editrecon(request, expenseid):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        expen = expenseaccount.objects.get(expenseid=expenseid, cid=cmp1)
        incom = incomeaccount.objects.get(
            expenceincomeid=expen.expenseid, cid=cmp1)
        return render(request, 'app1/editrecon.html', {'expen': expen, 'incom': incom, 'cmp1': cmp1})
    except:
        return redirect('gorecon')


@login_required(login_url='regcomp')
def editrecon1(request, expenseid):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        if request.method == 'POST':
            expen = expenseaccount.objects.get(expenseid=expenseid, cid=cmp1)
            incom = incomeaccount.objects.get(
                expenceincomeid=expenseid, cid=cmp1)
            expen.account = request.POST['account']
            expen.begbal = request.POST['begbal']
            expen.endbal = request.POST['endbal']
            expen.enddate = request.POST['enddate']
            expen.dat = request.POST['dat']
            expen.serchar = request.POST['serchar']
            expen.expacc = request.POST['expacc']
            incom.dat1 = request.POST['dat1']
            incom.intear = request.POST['intear']
            incom.incacc = request.POST['incacc']
            expen.save()
            incom.save()
            return render(request, 'app1/reconciled.html', {'expen': expen, 'incom': incom, 'cmp1': cmp1})
        else:
            return redirect('gorecon')
    except:
        return redirect('gorecon')


@login_required(login_url='regcomp')
def goreconciled(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        return render(request, 'app1/reconciled.html', {'cmp1': cmp1})
    except:
        return redirect('gorecon')


@login_required(login_url='regcomp')
def goaddcustinvoice(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        context = {'cmp1': cmp1}
        return render(request, 'app1/addcustinvoice.html', context)
    except:
        return redirect('goaddinvoices')


@login_required(login_url='regcomp')
def customersinvoice(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        if request.method == "POST":
            customer1 = customer(title=request.POST['title'], firstname=request.POST['firstname'],
                                 lastname=request.POST['lastname'], company=request.POST['company'],
                                 location=request.POST['location'], gsttype=request.POST['gsttype'],
                                 gstin=request.POST['gstin'], panno=request.POST['panno'], email=request.POST['email'],
                                 website=request.POST['website'], mobile=request.POST['mobile'],
                                 street=request.POST['street'], city=request.POST['city'], state=request.POST['state'],
                                 pincode=request.POST['pincode'], country=request.POST['country'],
                                 shipstreet=request.POST['shipstreet'], shipcity=request.POST['shipcity'],
                                 shipstate=request.POST['shipstate'],
                                 shippincode=request.POST['shippincode'], shipcountry=request.POST['shipcountry'],
                                 cid=cmp1)

            customer1.save()
            return redirect('goaddinvoices')
        else:
            return redirect('goaddinvoices')
    except:
        return redirect('goaddinvoices')


@login_required(login_url='regcomp')
def goaddcustpayment(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        context = {'cmp1': cmp1}
        return render(request, 'app1/addcustpayment.html', context)
    except:
        return redirect('paymentindex')


@login_required(login_url='regcomp')
def customerspayment(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        if request.method == "POST":
            customer1 = customer(title=request.POST['title'], firstname=request.POST['firstname'],
                                 lastname=request.POST['lastname'], company=request.POST['company'],
                                 location=request.POST['location'], gsttype=request.POST['gsttype'],
                                 gstin=request.POST['gstin'], panno=request.POST['panno'], email=request.POST['email'],
                                 website=request.POST['website'], mobile=request.POST['mobile'],
                                 street=request.POST['street'], city=request.POST['city'], state=request.POST['state'],
                                 pincode=request.POST['pincode'], country=request.POST['country'],
                                 shipstreet=request.POST['shipstreet'], shipcity=request.POST['shipcity'],
                                 shipstate=request.POST['shipstate'],
                                 shippincode=request.POST['shippincode'], shipcountry=request.POST['shipcountry'],
                                 cid=cmp1)

            customer1.save()
            return redirect('paymentindex')
        else:
            return redirect('paymentindex')
    except:
        return redirect('paymentindex')


@login_required(login_url='regcomp')
def goaddcustestimate(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        context = {'cmp1': cmp1}
        return render(request, 'app1/addcustestimate.html', context)
    except:
        return redirect('estindex')


@login_required(login_url='regcomp')
def customersestimate(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        if request.method == "POST":
            customer1 = customer(title=request.POST['title'], firstname=request.POST['firstname'],
                                 lastname=request.POST['lastname'], company=request.POST['company'],
                                 location=request.POST['location'], gsttype=request.POST['gsttype'],
                                 gstin=request.POST['gstin'], panno=request.POST['panno'], email=request.POST['email'],
                                 website=request.POST['website'], mobile=request.POST['mobile'],
                                 street=request.POST['street'], city=request.POST['city'], state=request.POST['state'],
                                 pincode=request.POST['pincode'], country=request.POST['country'],
                                 shipstreet=request.POST['shipstreet'], shipcity=request.POST['shipcity'],
                                 shipstate=request.POST['shipstate'],
                                 shippincode=request.POST['shippincode'], shipcountry=request.POST['shipcountry'],
                                 cid=cmp1)

            customer1.save()
            return redirect('estindex')
        else:
            return redirect('estindex')
    except:
        return redirect('estindex')


@login_required(login_url='regcomp')
def goaddcustsalrecpt(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        context = {'cmp1': cmp1}
        return render(request, 'app1/addcustsalrecpt.html', context)
    except:
        return redirect('addsalesrecipts')


@login_required(login_url='regcomp')
def customerssalrecpt(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        if request.method == "POST":
            customer1 = customer(title=request.POST['title'], firstname=request.POST['firstname'],
                                 lastname=request.POST['lastname'], company=request.POST['company'],
                                 location=request.POST['location'], gsttype=request.POST['gsttype'],
                                 gstin=request.POST['gstin'], panno=request.POST['panno'], email=request.POST['email'],
                                 website=request.POST['website'], mobile=request.POST['mobile'],
                                 street=request.POST['street'], city=request.POST['city'], state=request.POST['state'],
                                 pincode=request.POST['pincode'], country=request.POST['country'],
                                 shipstreet=request.POST['shipstreet'], shipcity=request.POST['shipcity'],
                                 shipstate=request.POST['shipstate'],
                                 shippincode=request.POST['shippincode'], shipcountry=request.POST['shipcountry'],
                                 cid=cmp1)

            customer1.save()
            return redirect('addsalesrecipts')
        else:
            return redirect('addsalesrecipts')
    except:
        return redirect('addsalesrecipts')


@login_required(login_url='regcomp')
def goaddcustcreditnote(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        context = {'cmp1': cmp1}
        return render(request, 'app1/addcustcreditnote.html', context)
    except:
        return redirect('creditindex')


@login_required(login_url='regcomp')
def customerscreditnote(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        if request.method == "POST":
            customer1 = customer(title=request.POST['title'], firstname=request.POST['firstname'],
                                 lastname=request.POST['lastname'], company=request.POST['company'],
                                 location=request.POST['location'], gsttype=request.POST['gsttype'],
                                 gstin=request.POST['gstin'], panno=request.POST['panno'], email=request.POST['email'],
                                 website=request.POST['website'], mobile=request.POST['mobile'],
                                 street=request.POST['street'], city=request.POST['city'], state=request.POST['state'],
                                 pincode=request.POST['pincode'], country=request.POST['country'],
                                 shipstreet=request.POST['shipstreet'], shipcity=request.POST['shipcity'],
                                 shipstate=request.POST['shipstate'],
                                 shippincode=request.POST['shippincode'], shipcountry=request.POST['shipcountry'],
                                 cid=cmp1)

            customer1.save()
            return redirect('creditindex')
        else:
            return redirect('creditindex')
    except:
        return redirect('creditindex')


@login_required(login_url='regcomp')
def goaddcustdelchrg(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        context = {'cmp1': cmp1}
        return render(request, 'app1/addcustdelchrg.html', context)
    except:
        return redirect('delayed')


@login_required(login_url='regcomp')
def customersdelchrg(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        if request.method == "POST":
            customer1 = customer(title=request.POST['title'], firstname=request.POST['firstname'],
                                 lastname=request.POST['lastname'], company=request.POST['company'],
                                 location=request.POST['location'], gsttype=request.POST['gsttype'],
                                 gstin=request.POST['gstin'], panno=request.POST['panno'], email=request.POST['email'],
                                 website=request.POST['website'], mobile=request.POST['mobile'],
                                 street=request.POST['street'], city=request.POST['city'], state=request.POST['state'],
                                 pincode=request.POST['pincode'], country=request.POST['country'],
                                 shipstreet=request.POST['shipstreet'], shipcity=request.POST['shipcity'],
                                 shipstate=request.POST['shipstate'],
                                 shippincode=request.POST['shippincode'], shipcountry=request.POST['shipcountry'],
                                 cid=cmp1)

            customer1.save()
            return redirect('delayed')
        else:
            return redirect('delayed')
    except:
        return redirect('delayed')


@login_required(login_url='regcomp')
def goaddcusttimeact(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        context = {'cmp1': cmp1}
        return render(request, 'app1/addcusttimeact.html', context)
    except:
        return redirect('gosaletimeactivity')


@login_required(login_url='regcomp')
def customerstimeact(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        if request.method == "POST":
            customer1 = customer(title=request.POST['title'], firstname=request.POST['firstname'],
                                 lastname=request.POST['lastname'], company=request.POST['company'],
                                 location=request.POST['location'], gsttype=request.POST['gsttype'],
                                 gstin=request.POST['gstin'], panno=request.POST['panno'], email=request.POST['email'],
                                 website=request.POST['website'], mobile=request.POST['mobile'],
                                 street=request.POST['street'], city=request.POST['city'], state=request.POST['state'],
                                 pincode=request.POST['pincode'], country=request.POST['country'],
                                 shipstreet=request.POST['shipstreet'], shipcity=request.POST['shipcity'],
                                 shipstate=request.POST['shipstate'],
                                 shippincode=request.POST['shippincode'], shipcountry=request.POST['shipcountry'],
                                 cid=cmp1)

            customer1.save()
            return redirect('gosaletimeactivity')
        else:
            return redirect('gosaletimeactivity')
    except:
        return redirect('gosaletimeactivity')


@login_required(login_url='regcomp')
def supplierstimeact(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        context = {'cmp1': cmp1}
        return render(request, 'app1/addsuppliertimeact.html', context)
    except:
        return redirect('goexpences')


@login_required(login_url='regcomp')
def suppacttime(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        if request.method == 'POST':
            sup = supplier(title=request.POST.get('title'), firstname=request.POST.get('firstname'),
                           lastname=request.POST.get('lastname'), company=request.POST.get('company'),
                           mobile=request.POST.get('mobile'), email=request.POST.get('email'),
                           website=request.POST.get('website'), billingrate=request.POST.get('billingrate'),
                           terms=request.POST.get('terms'), openingbalance=request.POST.get('openingbalance'),
                           accountno=request.POST.get('accountno'), gsttype=request.POST.get('gsttype'),
                           gstin=request.POST.get('gstin'), taxregistrationno=request.POST.get('taxregistrationno'),
                           effectivedate=request.POST.get('effectivedate'),
                           defaultexpenceaccount=request.POST.get(
                               'defaultexpenceaccount'),
                           street=request.POST.get('street'),
                           city=request.POST.get('city'), state=request.POST.get('state'),
                           pincode=request.POST.get('pincode'),
                           country=request.POST.get('country'), notes=request.POST.get('notes'), cid=cmp1)
            sup.save()
            return redirect('gosaletimeactivity')
    except:
        return redirect('goexpences')


def getdata(request):
    cmp1 = company.objects.get(id=request.session['uid'])
    id = request.GET.get('id')
    x = id.split()
    x.append(" ")
    a = x[0]
    b = x[1]
    if x[2] is not None:
        b = x[1] + " " + x[2]
        custobject = customer.objects.get(firstname=a, lastname=b, cid=cmp1)
        list = []
        dict = {'customerid': custobject.customerid, 'title': custobject.title, 'firstname': custobject.firstname,
                'lastname': custobject.lastname, 'company': custobject.company, 'location': custobject.location,
                'gsttype': custobject.gsttype,
                'gstin': custobject.gstin, 'panno': custobject.panno, 'email': custobject.email,
                'website': custobject.website,
                'mobile': custobject.mobile, 'street': custobject.street, 'city': custobject.city,
                'state': custobject.state,
                'pincode': custobject.pincode, 'country': custobject.country}
        list.append(dict)
    else:
        custobject = customer.objects.get(firstname=a, lastname=b, cid=cmp1)
        list = []
        dict = {'customerid': custobject.customerid, 'title': custobject.title, 'firstname': custobject.firstname,
                'lastname': custobject.lastname, 'company': custobject.company, 'location': custobject.location,
                'gsttype': custobject.gsttype,
                'gstin': custobject.gstin, 'panno': custobject.panno, 'email': custobject.email,
                'website': custobject.website,
                'mobile': custobject.mobile, 'street': custobject.street, 'city': custobject.city,
                'state': custobject.state,
                'pincode': custobject.pincode, 'country': custobject.country}
        list.append(dict)
    return JsonResponse(json.dumps(list), content_type="application/json", safe=False)


def getdata1(request):
    cmp1 = company.objects.get(id=request.session["uid"])
    id = request.GET.get('id')
    x = id.split()
    a = x[0]
    b = x[1]
    list = []
    if len(x) == 3:
        b = x[1] + " " + x[2]
        custobject = customer.objects.get(firstname=a, lastname=b, cid=cmp1)
        invoiceobject = invoice.objects.filter(customername=id, cid=cmp1)
        for i in invoiceobject:
            if i.baldue != '0.0':
                dict = {'customerid': custobject.customerid, 'title': custobject.title,
                        'firstname': custobject.firstname,
                        'lastname': custobject.lastname, 'company': custobject.company, 'location': custobject.location,
                        'gsttype': custobject.gsttype,
                        'gstin': custobject.gstin, 'panno': custobject.panno, 'email': custobject.email,
                        'website': custobject.website,
                        'mobile': custobject.mobile, 'street': custobject.street, 'city': custobject.city,
                        'state': custobject.state,
                        'pincode': custobject.pincode, 'country': custobject.country, 'invoiceid': i.invoiceid,
                        'customername': i.customername, 'email1': i.email,
                        'invoiceno': i.invoiceno, 'terms': i.terms,
                        'invoicedate': i.invoicedate, 'duedate': i.duedate,
                        'bname': i.bname, 'placosupply': i.placosupply,
                        'product': i.product, 'hsn': i.hsn,
                        'description': i.description, 'qty': i.qty,
                        'price': i.price, 'total': i.total,
                        'subtotal': i.subtotal, 'tax': i.tax,
                        'tax2': i.tax2, 'tax3': i.tax3, 'tax4': i.tax4,
                        'grandtotal': i.grandtotal,
                        'product2': i.product2, 'hsn2': i.hsn2,
                        'description2': i.description2, 'qty2': i.qty2,
                        'price2': i.price2, 'total2': i.total2,
                        'product3': i.product3, 'hsn3': i.hsn3,
                        'description3': i.description3, 'qty3': i.qty3,
                        'price3': i.price3, 'total3': i.total3,
                        'product4': i.product4, 'hsn4': i.hsn4,
                        'description4': i.description4, 'qty4': i.qty4,
                        'price4': i.price4, 'total4': i.total4, 'amtrecvd': i.amtrecvd,
                        'baldue': i.baldue}
                list.append(dict)
    else:
        custobject = customer.objects.get(firstname=a, lastname=b, cid=cmp1)
        invoiceobject = invoice.objects.filter(customername=id, cid=cmp1)
        for i in invoiceobject:
            if i.baldue != '0.0':
                dict = {'customerid': custobject.customerid, 'title': custobject.title,
                        'firstname': custobject.firstname,
                        'lastname': custobject.lastname, 'company': custobject.company, 'location': custobject.location,
                        'gsttype': custobject.gsttype,
                        'gstin': custobject.gstin, 'panno': custobject.panno, 'email': custobject.email,
                        'website': custobject.website,
                        'mobile': custobject.mobile, 'street': custobject.street, 'city': custobject.city,
                        'state': custobject.state,
                        'pincode': custobject.pincode, 'country': custobject.country, 'invoiceid': i.invoiceid,
                        'customername': i.customername, 'email1': i.email,
                        'invoiceno': i.invoiceno, 'terms': i.terms,
                        'invoicedate': i.invoicedate, 'duedate': i.duedate,
                        'bname': i.bname, 'placosupply': i.placosupply,
                        'product': i.product, 'hsn': i.hsn,
                        'description': i.description, 'qty': i.qty,
                        'price': i.price, 'total': i.total,
                        'subtotal': i.subtotal, 'tax': i.tax,
                        'tax2': i.tax2, 'tax3': i.tax3, 'tax4': i.tax4,
                        'grandtotal': i.grandtotal,
                        'product2': i.product2, 'hsn2': i.hsn2,
                        'description2': i.description2, 'qty2': i.qty2,
                        'price2': i.price2, 'total2': i.total2,
                        'product3': i.product3, 'hsn3': i.hsn3,
                        'description3': i.description3, 'qty3': i.qty3,
                        'price3': i.price3, 'total3': i.total3,
                        'product4': i.product4, 'hsn4': i.hsn4,
                        'description4': i.description4, 'qty4': i.qty4,
                        'price4': i.price4, 'total4': i.total4, 'amtrecvd': i.amtrecvd,
                        'baldue': i.baldue}
                list.append(dict)
    return JsonResponse(json.dumps(list), content_type="application/json", safe=False)


def getitems(request):
    cmp1 = company.objects.get(id=request.session["uid"])
    id = request.GET.get('id')

    def supplierstate():
        id1 = request.GET.get('id1')
        x = id1.split()
        a = x[0]
        b = x[1]
        if len(x) == 3:
            b = x[1] + " " + x[2]
            try:
                if supplier.objects.get(firstname=a, lastname=b, cid=cmp1):
                    supobject = supplier.objects.get(
                        firstname=a, lastname=b, cid=cmp1)
                    payeeplace = supobject.state
            except:
                pass
        else:
            try:
                if supplier.objects.get(firstname=a, lastname=b, cid=cmp1):
                    supobject = supplier.objects.get(
                        firstname=a, lastname=b, cid=cmp1)
                    payeeplace = supobject.state
            except:
                pass
        return payeeplace

    list = []
    if bundle.objects.filter(name=id, cid=cmp1).exists():
        bundleobject = bundle.objects.filter(name=id, cid=cmp1).get()
        bundledict = {'item': 'bundle', 'bundleid': bundleobject.bundleid, 'name': bundleobject.name,
                      'hsn': bundleobject.sku, 'description': bundleobject.description,
                      'salesprice': bundleobject.grandtotal, 'cost': 0, 'tax': 0,
                      'product1': bundleobject.product1, 'product2': bundleobject.product2,
                      'product3': bundleobject.product3, 'product4': bundleobject.product4, 'hsn1': bundleobject.hsn1,
                      'hsn2': bundleobject.hsn2, 'hsn3': bundleobject.hsn3, 'hsn4': bundleobject.hsn4,
                      'description1': bundleobject.description1, 'description2': bundleobject.description2,
                      'description3': bundleobject.description3, 'description4': bundleobject.description4,
                      'qty1': bundleobject.qty1, 'qty2': bundleobject.qty2, 'qty3': bundleobject.qty3,
                      'qty4': bundleobject.qty4, 'price1': bundleobject.price1, 'price2': bundleobject.price2,
                      'price3': bundleobject.price3, 'price4': bundleobject.price4, 'total1': bundleobject.total1,
                      'total2': bundleobject.total2, 'total3': bundleobject.total3, 'total4': bundleobject.total4,
                      'tax1': bundleobject.tax1, 'tax2': bundleobject.tax2, 'tax3': bundleobject.tax3,
                      'tax4': bundleobject.tax4}
        try:
            bundledict['place'] = supplierstate()
        except:
            pass
        list.append(bundledict)
    elif service.objects.filter(name=id, cid=cmp1).exists():
        serviceobject = service.objects.filter(name=id, cid=cmp1).get()
        servicedict = {'item': 'service', 'serviceid': serviceobject.serviceid,
                       'name': serviceobject.name, 'sku': serviceobject.sku,
                       'hsn': serviceobject.sac, 'unit': serviceobject.unit, 'categ': serviceobject.categ,
                       'description': serviceobject.descr, 'salesprice': serviceobject.saleprice,
                       'income': serviceobject.income, 'initialqty': '',
                       'tax': serviceobject.tax, 'abatement': serviceobject.abatement,
                       'sertype': serviceobject.sertype}
        try:
            servicedict['place'] = supplierstate()
        except:
            pass
        list.append(servicedict)
    elif inventory.objects.filter(name=id, cid=cmp1).exists():
        inventoryobject = inventory.objects.filter(name=id, cid=cmp1).get()
        inventorydict = {'item': 'inventory', 'inventoryid': inventoryobject.inventoryid,
                         'name': inventoryobject.name, 'sku': inventoryobject.sku, 'hsn': inventoryobject.hsn,
                         'unit': inventoryobject.unit, 'category': inventoryobject.category,
                         'initialqty': inventoryobject.initialqty,
                         'date': inventoryobject.date, 'stockalrt': inventoryobject.stockalrt,
                         'invacnt': inventoryobject.invacnt,
                         'description': inventoryobject.description, 'salesprice': inventoryobject.salesprice,
                         'incomeacnt': inventoryobject.incomeacnt,
                         'tax': inventoryobject.tax, 'purchaseinfo': inventoryobject.purchaseinfo,
                         'cost': inventoryobject.cost,
                         'expacnt': inventoryobject.expacnt, 'purtax': inventoryobject.purtax,
                         'revcharge': inventoryobject.revcharge,
                         'presupplier': inventoryobject.presupplier}
        try:
            inventorydict['place'] = supplierstate()
        except:
            pass
        list.append(inventorydict)
    elif noninventory.objects.filter(name=id, cid=cmp1).exists():
        noninventoryobject = noninventory.objects.filter(
            name=id, cid=cmp1).get()
        noninventorydict = {'item': 'noninventory', 'noninventoryid': noninventoryobject.noninventoryid,
                            'name': noninventoryobject.name,
                            'sku': noninventoryobject.sku, 'hsn': noninventoryobject.hsn,
                            'unit': noninventoryobject.unit,
                            'category': noninventoryobject.category, 'initialqty': noninventoryobject.qty,
                            'description': noninventoryobject.descr, 'cost': noninventoryobject.cost,
                            'salesprice': noninventoryobject.saleprice,
                            'tax': noninventoryobject.tax, 'purtax': noninventoryobject.purchasetax}
        try:
            noninventorydict['place'] = supplierstate()
        except:
            pass
        list.append(noninventorydict)
    else:
        notany = {'item': 'notany', 'name': ' ',
                  'sku': ' ', 'hsn': ' ',
                  'unit': 0,
                  'category': ' ', 'initialqty': 0,
                  'description': ' ', 'cost': 0,
                  'salesprice': 0,
                  'tax': 0, 'purtax': 0}
        list.append(notany)
    return JsonResponse(json.dumps(list), content_type="application/json", safe=False)


def getbalan(request):
    cmp1 = company.objects.get(id=request.session['uid'])
    id = request.GET.get('id')
    list = []
    acctypeobject = accountype.objects.get(accountname=id, cid=cmp1)
    dict = {'accounttypeid': acctypeobject.accountypeid, 'accountname': acctypeobject.accountname,
            'accountbal': acctypeobject.accountbal}
    list.append(dict)
    return JsonResponse(json.dumps(list), content_type="application/json", safe=False)


def getinvpro(request):
    cmp1 = company.objects.get(id=request.session['uid'])
    invno = request.GET.get('invoiceno')
    list = []
    if invoice.objects.get(invoiceno=invno, cid=cmp1):
        invoiobject = invoice.objects.get(invoiceno=invno, cid=cmp1)
        dict = {'product': invoiobject.product, 'description': invoiobject.description,
                'qty': invoiobject.qty, 'price': invoiobject.price, 'total': invoiobject.total,
                'product2': invoiobject.product2, 'description2': invoiobject.description2,
                'qty2': invoiobject.qty2, 'price2': invoiobject.price2, 'total2': invoiobject.total2,
                'product3': invoiobject.product3, 'description3': invoiobject.description3,
                'qty3': invoiobject.qty3, 'price3': invoiobject.price3, 'total3': invoiobject.total3,
                'product4': invoiobject.product4, 'description4': invoiobject.description4,
                'qty4': invoiobject.qty4, 'price4': invoiobject.price4, 'total4': invoiobject.total4,
                'tax': invoiobject.tax,
                'tax2': invoiobject.tax2, 'tax3': invoiobject.tax3, 'tax4': invoiobject.tax4,
                'subtotal': invoiobject.subtotal,
                'grandtotal': invoiobject.grandtotal, 'taxamount': invoiobject.taxamount}
        list.append(dict)
    else:
        dict = {'product': '', 'description': '',
                'qty': '', 'price': '', 'total': '',
                'product2': '', 'description2': '',
                'qty2': '', 'price2': '', 'total2': '',
                'product3': '', 'description3': '',
                'qty3': '', 'price3': '', 'total3': '',
                'product4': '', 'description4': '',
                'qty4': '', 'price4': '', 'total4': '',
                'tax': '',
                'tax2': '', 'tax3': '', 'tax4': '',
                'subtotal': '',
                'grandtotal': '', 'taxamount': ''}
        list.append(dict)
    return JsonResponse(json.dumps(list), content_type="application/json", safe=False)


def getterm(request):
    id = request.GET.get('id')
    list = []
    toda = date.today() + timedelta(days=int(id))
    newdate = toda.strftime("%d-%m-%Y")
    dict = {'newdate': newdate}
    list.append(dict)
    return JsonResponse(json.dumps(list), content_type="application/json", safe=False)


@login_required(login_url='regcomp')
def gooexpensesuppliers(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        toda = date.today()
        tod = toda.strftime("%d-%m-%y")
        context = {'cmp1': cmp1, 'tod': tod}
        return render(request, 'app1/expensesupplier.html', context)
    except:
        return redirect('/app1/expencesindex')


@login_required(login_url='regcomp')
def expensesupplier(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        if request.method == 'POST':
            sup = supplier(title=request.POST.get('title'), firstname=request.POST.get('firstname'),
                           lastname=request.POST.get('lastname'), company=request.POST.get('company'),
                           mobile=request.POST.get('mobile'), email=request.POST.get('email'),
                           website=request.POST.get('website'), billingrate=request.POST.get('billingrate'),
                           terms=request.POST.get('terms'), addterms=request.POST.get('addterms'),
                           openingbalance=request.POST.get('openingbalance'),
                           accountno=request.POST.get('accountno'), gsttype=request.POST.get('gsttype'),
                           gstin=request.POST.get('gstin'), taxregistrationno=request.POST.get('taxregistrationno'),
                           effectivedate=request.POST.get('effectivedate'),
                           defaultexpenceaccount=request.POST.get(
                               'defaultexpenceaccount'),
                           street=request.POST.get('street'),
                           city=request.POST.get('city'), state=request.POST.get('state'),
                           pincode=request.POST.get('pincode'),
                           country=request.POST.get('country'), notes=request.POST.get('notes'), cid=cmp1)
            sup.save()
            return redirect('/app1/expencesindex')
        suppliers = supplier.objects.all()
        context = {'suppliers': suppliers, 'cmp1': cmp1}
        return render(request, 'app1/addexpences.html', context)
    except:
        return redirect('/app1/expencesindex')


@login_required(login_url='regcomp')
def gooexpensecustomer(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        context = {'cmp1': cmp1}
        return render(request, 'app1/expensecustomer.html', context)
    except:
        return redirect('/app1/expencesindex')


@login_required(login_url='regcomp')
def expensecustomers(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        if request.method == "POST":
            customer1 = customer(title=request.POST.get('title'), firstname=request.POST.get('firstname'),
                                 lastname=request.POST.get('lastname'), company=request.POST.get('company'),
                                 location=request.POST.get('location'), gsttype=request.POST.get('gsttype'),
                                 gstin=request.POST.get('gstin'), panno=request.POST.get('panno'),
                                 email=request.POST.get('email'),
                                 website=request.POST.get('website'), mobile=request.POST.get('mobile'),
                                 street=request.POST.get('street'), city=request.POST.get('city'),
                                 state=request.POST.get('state'),
                                 pincode=request.POST.get('pincode'), country=request.POST.get('country'),
                                 cid=cmp1)

            customer1.save()
            return redirect('/app1/expencesindex')
        customers = customer.objects.all()
        context = {'customers': customers, 'cmp1': cmp1}
        return render(request, 'app1/addexpences.html', context)
    except:
        return redirect('/app1/expencesindex')


def getitempay(request):
    cmp1 = company.objects.get(id=request.session['uid'])
    id = request.GET.get('id')
    list = []
    print(id)
    if customer.objects.filter(firstname=id, cid=cmp1).exists():
        custobject = customer.objects.filter(firstname=id, cid=cmp1).get()
        custdict = {'customerid': custobject.customerid, 'title': custobject.title, 'firstname': custobject.firstname,
                    'lastname': custobject.lastname, 'company': custobject.company, 'location': custobject.location,
                    'gsttype': custobject.gsttype,
                    'gstin': custobject.gstin, 'panno': custobject.panno, 'email': custobject.email,
                    'website': custobject.website,
                    'mobile': custobject.mobile, 'street': custobject.street, 'city': custobject.city,
                    'state': custobject.state,
                    'pincode': custobject.pincode, 'country': custobject.country, 'shipstreet': custobject.shipstreet,
                    'shipcity': custobject.shipcity, 'shipstate': custobject.shipstate,
                    'shippincode': custobject.shippincode,
                    'shipcountry': custobject.shipcountry}
        list.append(custdict)

    elif supplier.objects.filter(firstname=id, cid=cmp1).exists():
        supobject = supplier.objects.filter(firstname=id, cid=cmp1).get()
        supdict = {'supplierid': supobject.supplierid, 'title': supobject.title, 'firstname': supobject.firstname,
                   'lastname': supobject.lastname, 'company': supobject.company, 'mobile': supobject.mobile,
                   'email': supobject.email, 'website': supobject.website,
                   'billingrate': supobject.billingrate, 'terms': supobject.terms,
                   'openingbalance': supobject.openingbalance,
                   'accountno': supobject.accountno, 'gsttype': supobject.gsttype, 'gstin': supobject.gstin,
                   'taxregistrationno': supobject.taxregistrationno,
                   'effectivedate': supobject.effectivedate, 'defaultexpenceaccount': supobject.defaultexpenceaccount,
                   'tds': supobject.tds,
                   'street': supobject.street, 'city': supobject.city,
                   'state': supobject.state, 'pincode': supobject.pincode, 'country': supobject.country,
                   'notes': supobject.notes}
        list.append(supdict)
    return JsonResponse(json.dumps(list), content_type="application/json", safe=False)


def getsuppdata(request):
    cmp1 = company.objects.get(id=request.sesion['uid'])
    id = request.GET.get('id')
    x = id.split()
    a = x[0]
    b = x[1]
    if len(x) == 3:
        b = x[1] + " " + x[2]
        supobject = supplier.objects.get(firstname=a, lastname=b, cid=cmp1)
        list = []
        dict = {'supplierid': supobject.supplierid, 'title': supobject.title, 'firstname': supobject.firstname,
                'lastname': supobject.lastname, 'company': supobject.company, 'mobile': supobject.mobile,
                'email': supobject.email, 'website': supobject.website,
                'billingrate': supobject.billingrate, 'terms': supobject.terms, 'addterms': supobject.addterms,
                'openingbalance': supobject.openingbalance,
                'accountno': supobject.accountno, 'gsttype': supobject.gsttype, 'gstin': supobject.gstin,
                'taxregistrationno': supobject.taxregistrationno,
                'effectivedate': supobject.effectivedate, 'defaultexpenceaccount': supobject.defaultexpenceaccount,
                'street': supobject.street, 'city': supobject.city,
                'state': supobject.state, 'pincode': supobject.pincode, 'country': supobject.country,
                'notes': supobject.notes}
        list.append(dict)
    else:
        supobject = supplier.objects.get(firstname=a, lastname=b, cid=cmp1)
        list = []
        print(a + ' ' + b)
        dict = {'supplierid': supobject.supplierid, 'title': supobject.title, 'firstname': supobject.firstname,
                'lastname': supobject.lastname, 'company': supobject.company, 'mobile': supobject.mobile,
                'email': supobject.email, 'website': supobject.website,
                'billingrate': supobject.billingrate, 'terms': supobject.terms, 'addterms': supobject.addterms,
                'openingbalance': supobject.openingbalance,
                'accountno': supobject.accountno, 'gsttype': supobject.gsttype, 'gstin': supobject.gstin,
                'taxregistrationno': supobject.taxregistrationno,
                'effectivedate': supobject.effectivedate, 'defaultexpenceaccount': supobject.defaultexpenceaccount,
                'street': supobject.street, 'city': supobject.city,
                'state': supobject.state, 'pincode': supobject.pincode, 'country': supobject.country,
                'notes': supobject.notes}
        list.append(dict)
    return JsonResponse(json.dumps(list), content_type="application/json", safe=False)


def getsuppcustdata(request):
    cmp1 = company.objects.get(id=request.session['uid'])
    id = request.GET.get('id')
    x = id.split()
    a = x[0]
    b = x[1]
    if len(x) == 3:
        b = x[1] + " " + x[2]
        try:
            if supplier.objects.get(firstname=a, lastname=b, cid=cmp1):
                supobject = supplier.objects.get(
                    firstname=a, lastname=b, cid=cmp1)
                list = []
                dict = {'id': supobject.supplierid, 'title': supobject.title, 'firstname': supobject.firstname,
                        'lastname': supobject.lastname, 'company': supobject.company, 'state': supobject.state,
                        'defaultexpenceaccount': supobject.defaultexpenceaccount}
                list.append(dict)
        except:
            pass
        try:
            if customer.objects.get(firstname=a, lastname=b, cid=cmp1):
                custobject = customer.objects.get(
                    firstname=a, lastname=b, cid=cmp1)
                list = []
                dict = {'id': custobject.customerid, 'title': custobject.title, 'firstname': custobject.firstname,
                        'lastname': custobject.lastname, 'company': custobject.company, 'state': custobject.state,
                        'defaultexpenceaccount': ' '}
                list.append(dict)
        except:
            pass
    else:
        try:
            if supplier.objects.get(firstname=a, lastname=b, cid=cmp1):
                supobject = supplier.objects.get(
                    firstname=a, lastname=b, cid=cmp1)
                list = []
                dict = {'id': supobject.supplierid, 'title': supobject.title, 'firstname': supobject.firstname,
                        'lastname': supobject.lastname, 'company': supobject.company, 'state': supobject.state,
                        'defaultexpenceaccount': supobject.defaultexpenceaccount}
                list.append(dict)
        except:
            pass
        try:
            if customer.objects.get(firstname=a, lastname=b, cid=cmp1):
                custobject = customer.objects.get(
                    firstname=a, lastname=b, cid=cmp1)
                list = []
                dict = {'id': custobject.customerid, 'title': custobject.title,
                        'firstname': custobject.firstname, 'defaultexpenceaccount': ' ',
                        'lastname': custobject.lastname, 'company': custobject.company, 'state': custobject.state}
                list.append(dict)
        except:
            pass
    return JsonResponse(json.dumps(list), content_type="application/json", safe=False)


def getsupitems(request):
    cmp1 = company.objects.get(id=request.session['uid'])
    id = request.GET.get('id')
    list = []
    print(id)
    if bundle.objects.filter(name=id, cid=cmp1).exists():
        bundleobject = bundle.objects.filter(name=id, cid=cmp1).get()
        bundledict = {'bundleid': bundleobject.bundleid, 'name': bundleobject.name,
                      'sku': bundleobject.sku, 'description': bundleobject.description, 'cost': 0}
        list.append(bundledict)
    elif service.objects.filter(name=id, cid=cmp1).exists():
        serviceobject = service.objects.filter(name=id, cid=cmp1).get()
        servicedict = {'serviceid': serviceobject.serviceid,
                       'name': serviceobject.name, 'sku': serviceobject.sku,
                       'sac': serviceobject.sac, 'unit': serviceobject.unit, 'categ': serviceobject.categ,
                       'descr': serviceobject.descr,
                       'saleprice': serviceobject.saleprice, 'income': serviceobject.income,
                       'tax': serviceobject.tax,
                       'sertype': serviceobject.sertype,
                       'purchasedescr': serviceobject.purchasedescr, 'cost': serviceobject.cost,
                       'expenseaccount': serviceobject.expenseaccount, 'purchasetax': serviceobject.purchasetax,
                       'revcharge': serviceobject.revcharge, 'presupplier': serviceobject.presupplier}
        list.append(servicedict)
    elif inventory.objects.filter(name=id, cid=cmp1).exists():
        inventoryobject = inventory.objects.filter(name=id, cid=cmp1)
        inventorydict = {'inventoryid': inventoryobject.inventoryid,
                         'name': inventoryobject.name, 'sku': inventoryobject.sku, 'hsn': inventoryobject.hsn,
                         'unit': inventoryobject.unit, 'category': inventoryobject.category,
                         'initialqty': inventoryobject.initialqty,
                         'date': inventoryobject.date, 'stockalrt': inventoryobject.stockalrt,
                         'invacnt': inventoryobject.invacnt,
                         'description': inventoryobject.description, 'salesprice': inventoryobject.salesprice,
                         'incomeacnt': inventoryobject.incomeacnt,
                         'tax': inventoryobject.tax, 'purchaseinfo': inventoryobject.purchaseinfo,
                         'cost': inventoryobject.cost,
                         'expacnt': inventoryobject.expacnt, 'purtax': inventoryobject.purtax,
                         'revcharge': inventoryobject.revcharge,
                         'presupplier': inventoryobject.presupplier}
        list.append(inventorydict)
    elif noninventory.objects.filter(name=id, cid=cmp1).exists():
        noninventoryobject = noninventory.objects.filter(name=id, cid=cmp1)
        noninventorydict = {'noninventoryid': noninventoryobject.noninventoryid,
                            'name': noninventoryobject.name,
                            'sku': noninventoryobject.sku, 'hsn': noninventoryobject.hsn,
                            'unit': noninventoryobject.unit,
                            'category': noninventoryobject.category,
                            'descr': noninventoryobject.descr,
                            'saleprice': noninventoryobject.saleprice,
                            'income': noninventoryobject.income,
                            'tax': noninventoryobject.tax,
                            'purchasedescr': noninventoryobject.purchasedescr, 'cost': noninventoryobject.cost,
                            'expenseaccount': noninventoryobject.expenseaccount,
                            'purchasetax': noninventoryobject.purchasetax,
                            'revcharge': noninventoryobject.revcharge,
                            'presupplier': noninventoryobject.presupplier}
        list.append(noninventorydict)
    return JsonResponse(json.dumps(list), content_type="application/json", safe=False)


def getsuppdata1(request):
    cmp1 = company.objects.get(id=request.session['uid'])
    id = request.GET.get('id')
    x = id.split()
    a = x[0]
    b = x[1]
    if len(x) == 3:
        b = x[1] + " " + x[2]
        supobject = supplier.objects.get(firstname=a, lastname=b, cid=cmp1)
        list = []
        dict = {'supplierid': supobject.supplierid, 'title': supobject.title, 'firstname': supobject.firstname,
                'lastname': supobject.lastname, 'company': supobject.company, 'mobile': supobject.mobile,
                'email': supobject.email, 'website': supobject.website,
                'billingrate': supobject.billingrate, 'terms': supobject.terms,
                'openingbalance': supobject.openingbalance,
                'accountno': supobject.accountno, 'gsttype': supobject.gsttype, 'gstin': supobject.gstin,
                'taxregistrationno': supobject.taxregistrationno,
                'effectivedate': supobject.effectivedate, 'defaultexpenceaccount': supobject.defaultexpenceaccount,
                'street': supobject.street, 'city': supobject.city,
                'state': supobject.state, 'pincode': supobject.pincode, 'country': supobject.country,
                'notes': supobject.notes}
        list.append(dict)
    else:
        supobject = supplier.objects.get(firstname=a, lastname=b, cid=cmp1)
        list = []
        dict = {'supplierid': supobject.supplierid, 'title': supobject.title, 'firstname': supobject.firstname,
                'lastname': supobject.lastname, 'company': supobject.company, 'mobile': supobject.mobile,
                'email': supobject.email, 'website': supobject.website,
                'billingrate': supobject.billingrate, 'terms': supobject.terms,
                'openingbalance': supobject.openingbalance,
                'accountno': supobject.accountno, 'gsttype': supobject.gsttype, 'gstin': supobject.gstin,
                'taxregistrationno': supobject.taxregistrationno,
                'effectivedate': supobject.effectivedate, 'defaultexpenceaccount': supobject.defaultexpenceaccount,
                'street': supobject.street, 'city': supobject.city,
                'state': supobject.state, 'pincode': supobject.pincode, 'country': supobject.country,
                'notes': supobject.notes}
        list.append(dict)
    return JsonResponse(json.dumps(list), content_type="application/json", safe=False)


def getsuppitems(request):
    cmp1 = company.objects.get(id=request.session['uid'])
    id = request.GET.get('id')
    supobject = supplier.objects.get(firstname=id, cid=cmp1)
    list = []
    dict = {'supplierid': supobject.supplierid, 'title': supobject.title, 'firstname': supobject.firstname,
            'lastname': supobject.lastname, 'company': supobject.company, 'mobile': supobject.mobile,
            'email': supobject.email, 'website': supobject.website,
            'billingrate': supobject.billingrate, 'terms': supobject.terms, 'addterms': supobject.addterms,
            'openingbalance': supobject.openingbalance,
            'accountno': supobject.accountno, 'gsttype': supobject.gsttype, 'gstin': supobject.gstin,
            'taxregistrationno': supobject.taxregistrationno,
            'effectivedate': supobject.effectivedate, 'defaultexpenceaccount': supobject.defaultexpenceaccount,
            'street': supobject.street, 'city': supobject.city,
            'state': supobject.state, 'pincode': supobject.pincode, 'country': supobject.country,
            'notes': supobject.notes}
    list.append(dict)
    return JsonResponse(json.dumps(list), content_type="application/json", safe=False)


@login_required(login_url='regcomp')
def goaddsuppliersbill(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        context = {'cmp1': cmp1}
        return render(request, 'app1/addsuppbill.html', context)
    except:
        return redirect('gobills')


@login_required(login_url='regcomp')
def goaddsuppliercredit(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        context = {'cmp1': cmp1}
        return render(request, 'app1/addsuppcredit.html', context)
    except:
        return redirect('gosupcredit')


@login_required(login_url='regcomp')
def suppliercreatecredit(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        if request.method == 'POST':
            sup = supplier(title=request.POST.get('title'), firstname=request.POST.get('firstname'),
                           lastname=request.POST.get('lastname'), company=request.POST.get('company'),
                           mobile=request.POST.get('mobile'), email=request.POST.get('email'),
                           website=request.POST.get('website'), billingrate=request.POST.get('billingrate'),
                           terms=request.POST.get('terms'), openingbalance=request.POST.get('openingbalance'),
                           accountno=request.POST.get('accountno'), gsttype=request.POST.get('gsttype'),
                           gstin=request.POST.get('gstin'), taxregistrationno=request.POST.get('taxregistrationno'),
                           effectivedate=request.POST.get('effectivedate'),
                           defaultexpenceaccount=request.POST.get(
                               'defaultexpenceaccount'),
                           street=request.POST.get('street'),
                           city=request.POST.get('city'), state=request.POST.get('state'),
                           pincode=request.POST.get('pincode'),
                           country=request.POST.get('country'), notes=request.POST.get('notes'), cid=cmp1)
            sup.save()
            return redirect('gosupcredit')
        return redirect('gosupcredit')
    except:
        return redirect('gosupcredit')


@login_required(login_url='regcomp')
def suppliercreatebill(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        if request.method == 'POST':
            sup = supplier(title=request.POST.get('title'), firstname=request.POST.get('firstname'),
                           lastname=request.POST.get('lastname'), company=request.POST.get('company'),
                           mobile=request.POST.get('mobile'), email=request.POST.get('email'),
                           website=request.POST.get('website'), billingrate=request.POST.get('billingrate'),
                           terms=request.POST.get('terms'), openingbalance=request.POST.get('openingbalance'),
                           accountno=request.POST.get('accountno'), gsttype=request.POST.get('gsttype'),
                           gstin=request.POST.get('gstin'), taxregistrationno=request.POST.get('taxregistrationno'),
                           effectivedate=request.POST.get('effectivedate'),
                           defaultexpenceaccount=request.POST.get(
                               'defaultexpenceaccount'),
                           street=request.POST.get('street'),
                           city=request.POST.get('city'), state=request.POST.get('state'),
                           pincode=request.POST.get('pincode'),
                           country=request.POST.get('country'), notes=request.POST.get('notes'), cid=cmp1)
            sup.save()
            return redirect('gobills')
        return redirect('gobills')
    except:
        return redirect('gobills')


@login_required(login_url='regcomp')
def goaddsupplierscheque(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        context = {'cmp1': cmp1}
        return render(request, 'app1/addsuppcheque.html', context)
    except:
        return redirect('gocheque')


@login_required(login_url='regcomp')
def suppliercreatecheque(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        if request.method == 'POST':
            sup = supplier(title=request.POST.get('title'), firstname=request.POST.get('firstname'),
                           lastname=request.POST.get('lastname'), company=request.POST.get('company'),
                           mobile=request.POST.get('mobile'), email=request.POST.get('email'),
                           website=request.POST.get('website'), billingrate=request.POST.get('billingrate'),
                           terms=request.POST.get('terms'), openingbalance=request.POST.get('openingbalance'),
                           accountno=request.POST.get('accountno'), gsttype=request.POST.get('gsttype'),
                           gstin=request.POST.get('gstin'), taxregistrationno=request.POST.get('taxregistrationno'),
                           effectivedate=request.POST.get('effectivedate'),
                           defaultexpenceaccount=request.POST.get(
                               'defaultexpenceaccount'),
                           street=request.POST.get('street'),
                           city=request.POST.get('city'), state=request.POST.get('state'),
                           pincode=request.POST.get('pincode'),
                           country=request.POST.get('country'), notes=request.POST.get('notes'), cid=cmp1)
            sup.save()
            return redirect('gocheque')
        return redirect('gocheque')
    except:
        return redirect('gocheque')


@login_required(login_url='regcomp')
def gocustomerscheque(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        context = {'cmp1': cmp1}
        return render(request, 'app1/addcustcheque.html', context)
    except:
        return redirect('gocheque')


@login_required(login_url='regcomp')
def customerscheque(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        if request.method == "POST":
            customer1 = customer(title=request.POST['title'], firstname=request.POST['firstname'],
                                 lastname=request.POST['lastname'], company=request.POST['company'],
                                 location=request.POST['location'], gsttype=request.POST['gsttype'],
                                 gstin=request.POST['gstin'], panno=request.POST['panno'], email=request.POST['email'],
                                 website=request.POST['website'], mobile=request.POST['mobile'],
                                 street=request.POST['street'], city=request.POST['city'], state=request.POST['state'],
                                 pincode=request.POST['pincode'], country=request.POST['country'],
                                 shipstreet=request.POST['shipstreet'], shipcity=request.POST['shipcity'],
                                 shipstate=request.POST['shipstate'],
                                 shippincode=request.POST['shippincode'], shipcountry=request.POST['shipcountry'],
                                 cid=cmp1)

            customer1.save()
            return redirect('gocheque')
        else:
            return redirect('gocheque')
    except:
        return redirect('gocheque')


@login_required(login_url='regcomp')
def suppliercoacreate(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        prodobj = ProductModel.objects.all()
        itemobj = ItemModel.objects.all()
        return render(request, 'app1/suppliercoa.html', {'cmp1': cmp1, 'Product': prodobj, 'Item': itemobj})
    except:
        return redirect('goaddsuppliers')


@login_required(login_url='regcomp')
def supplieracccreate(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        acctype = request.POST.get('acctype')
        detype = request.POST.get('detype')
        name = request.POST.get('name')
        description = request.POST.get('description')
        gst = request.POST.get('gst')
        deftaxcode = request.POST.get('deftaxcode')
        balance = 0
        toda = date.today()
        tod = toda.strftime("%Y-%m-%d")
        pro = accountype.objects.get(accountypeid=acctype)
        pro2 = ProductModel.objects.get(Pid=acctype)
        if request.method == 'POST':
            if accountype.objects.filter(accountname=detype).exists() and accounts.objects.filter(name=name,
                                                                                                  cid=cmp1.cid) or accounts1.objects.filter(
                    name=name, cid=cmp1.cid):
                messages.info(
                    request, f"Account with name {name} already exists. Please provide another name.")
                return redirect('goaddsuppliers')
            else:
                account = accounts(acctype=acctype, detype=detype, name=name, description=description,
                                   gst=gst, balfordisp=balance,
                                   deftaxcode=deftaxcode, balance=balance, asof=tod, cid=cmp1, proid=pro,
                                   productid=pro2)
                account.save()
                account1 = accountype(
                    cid=cmp1, accountname=detype, accountbal=balance)
                account1.save()
                acco = accounts1.objects.get(
                    name='Opening Balance Equity', cid=cmp1)
                acco.balance += float(balance)
                acco.save()
                return redirect('goaddsuppliers')
        else:
            return redirect('goaddsuppliers')
    except:
        return redirect('goaddsuppliers')


@login_required(login_url='regcomp')
def paymentcoacreate(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        prodobj = ProductModel.objects.all()
        itemobj = ItemModel.objects.all()
        return render(request, 'app1/paymentcoa.html', {'cmp1': cmp1, 'Product': prodobj, 'Item': itemobj})
    except:
        return redirect('paymentindex')


@login_required(login_url='regcomp')
def paymentacccreate(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        acctype = request.POST.get('acctype')
        detype = request.POST.get('detype')
        name = request.POST.get('name')
        description = request.POST.get('description')
        gst = request.POST.get('gst')
        deftaxcode = request.POST.get('deftaxcode')
        balance = 0
        toda = date.today()
        tod = toda.strftime("%Y-%m-%d")
        pro = accountype.objects.get(accountypeid=acctype)
        pro2 = ProductModel.objects.get(Pid=acctype)
        if request.method == 'POST':
            if accountype.objects.filter(accountname=detype).exists() and accounts.objects.filter(name=name,
                                                                                                  cid=cmp1.cid) or accounts1.objects.filter(
                    name=name, cid=cmp1.cid):
                messages.info(
                    request, f"Account with name {name} already exists. Please provide another name.")
                return redirect('paymentindex')
            else:
                account = accounts(acctype=acctype, detype=detype, name=name, description=description,
                                   gst=gst, balfordisp=balance,
                                   deftaxcode=deftaxcode, balance=balance, asof=tod, cid=cmp1, proid=pro,
                                   productid=pro2)
                account.save()
                account1 = accountype(
                    cid=cmp1, accountname=detype, accountbal=balance)
                account1.save()
                acco = accounts1.objects.get(
                    name='Opening Balance Equity', cid=cmp1)
                acco.balance += float(balance)
                acco.save()
                return redirect('paymentindex')
        else:
            return redirect('paymentindex')
    except:
        return redirect('paymentindex')


@login_required(login_url='regcomp')
def salrecptcoacreate(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        prodobj = ProductModel.objects.all()
        itemobj = ItemModel.objects.all()
        return render(request, 'app1/salrecptcoa.html', {'cmp1': cmp1, 'Product': prodobj, 'Item': itemobj})
    except:
        return redirect('addsalesrecipts')


@login_required(login_url='regcomp')
def salrecptacccreate(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        acctype = request.POST.get('acctype')
        detype = request.POST.get('detype')
        name = request.POST.get('name')
        description = request.POST.get('description')
        gst = request.POST.get('gst')
        deftaxcode = request.POST.get('deftaxcode')
        balance = 0
        toda = date.today()
        tod = toda.strftime("%Y-%m-%d")
        pro = accountype.objects.get(accountypeid=acctype)
        pro2 = ProductModel.objects.get(Pid=acctype)
        if request.method == 'POST':
            if accountype.objects.filter(accountname=detype).exists() and accounts.objects.filter(name=name,
                                                                                                  cid=cmp1.cid) or accounts1.objects.filter(
                    name=name, cid=cmp1.cid):
                messages.info(
                    request, f"Account with name {name} already exists. Please provide another name.")
                return redirect('addsalesrecipts')
            else:
                account = accounts(acctype=acctype, detype=detype, name=name, description=description,
                                   gst=gst, balfordisp=balance,
                                   deftaxcode=deftaxcode, balance=balance, asof=tod, cid=cmp1, proid=pro,
                                   productid=pro2)
                account.save()
                account1 = accountype(
                    cid=cmp1, accountname=detype, accountbal=balance)
                account1.save()
                acco = accounts1.objects.get(
                    name='Opening Balance Equity', cid=cmp1)
                acco.balance += float(balance)
                acco.save()
                return redirect('addsalesrecipts')
        else:
            return redirect('addsalesrecipts')
    except:
        return redirect('addsalesrecipts')


@login_required(login_url='regcomp')
def editsalrecptcoacreate(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        prodobj = ProductModel.objects.all()
        itemobj = ItemModel.objects.all()
        return render(request, 'app1/editsalrecptcoa.html', {'cmp1': cmp1, 'Product': prodobj, 'Item': itemobj})
    except:
        return redirect('addsalesrecipts')


@login_required(login_url='regcomp')
def editsalrecptacccreate(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        acctype = request.POST.get('acctype')
        detype = request.POST.get('detype')
        name = request.POST.get('name')
        description = request.POST.get('description')
        gst = request.POST.get('gst')
        deftaxcode = request.POST.get('deftaxcode')
        balance = 0
        toda = date.today()
        tod = toda.strftime("%Y-%m-%d")
        pro = accountype.objects.get(accountypeid=acctype)
        pro2 = ProductModel.objects.get(Pid=acctype)
        if request.method == 'POST':
            if accountype.objects.filter(accountname=detype).exists() and accounts.objects.filter(name=name,
                                                                                                  cid=cmp1.cid) or accounts1.objects.filter(
                    name=name, cid=cmp1.cid):
                messages.info(
                    request, f"Account with name {name} already exists. Please provide another name.")
                return redirect('addsalesrecipts')
            else:
                account = accounts(acctype=acctype, detype=detype, name=name, description=description,
                                   gst=gst, balfordisp=balance,
                                   deftaxcode=deftaxcode, balance=balance, asof=tod, cid=cmp1, proid=pro,
                                   productid=pro2)
                account.save()
                account1 = accountype(
                    cid=cmp1, accountname=detype, accountbal=balance)
                account1.save()
                acco = accounts1.objects.get(
                    name='Opening Balance Equity', cid=cmp1)
                acco.balance += float(balance)
                acco.save()
                return redirect('addsalesrecipts')
        else:
            return redirect('addsalesrecipts')
    except:
        return redirect('addsalesrecipts')


@login_required(login_url='regcomp')
def productcoacreate(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        prodobj = ProductModel.objects.all()
        itemobj = ItemModel.objects.all()
        return render(request, 'app1/productcoa.html', {'cmp1': cmp1, 'Product': prodobj, 'Item': itemobj})
    except:
        return redirect('goinv')


@login_required(login_url='regcomp')
def product1coacreate(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        prodobj = ProductModel.objects.all()
        itemobj = ItemModel.objects.all()
        return render(request, 'app1/product1coa.html', {'cmp1': cmp1, 'Product': prodobj, 'Item': itemobj})
    except:
        return redirect('goinv')


@login_required(login_url='regcomp')
def product2coacreate(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        prodobj = ProductModel.objects.all()
        itemobj = ItemModel.objects.all()
        return render(request, 'app1/product2coa.html', {'cmp1': cmp1, 'Product': prodobj, 'Item': itemobj})
    except:
        return redirect('goinv')


@login_required(login_url='regcomp')
def productacccreate(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        acctype = request.POST.get('acctype')
        detype = request.POST.get('detype')
        name = request.POST.get('name')
        description = request.POST.get('description')
        gst = request.POST.get('gst')
        deftaxcode = request.POST.get('deftaxcode')
        balance = 0
        toda = date.today()
        tod = toda.strftime("%Y-%m-%d")
        pro = accountype.objects.get(accountypeid=acctype)
        pro2 = ProductModel.objects.get(Pid=acctype)
        if request.method == 'POST':
            if accountype.objects.filter(accountname=detype).exists() and accounts.objects.filter(name=name,
                                                                                                  cid=cmp1.cid) or accounts1.objects.filter(
                    name=name, cid=cmp1.cid):
                messages.info(
                    request, f"Account with name {name} already exists. Please provide another name.")
                return redirect('goinv')
            else:
                account = accounts(acctype=acctype, detype=detype, name=name, description=description,
                                   gst=gst, balfordisp=balance,
                                   deftaxcode=deftaxcode, balance=balance, asof=tod, cid=cmp1, proid=pro,
                                   productid=pro2)
                account.save()
                account1 = accountype(
                    cid=cmp1, accountname=detype, accountbal=balance)
                account1.save()
                acco = accounts1.objects.get(
                    name='Opening Balance Equity', cid=cmp1)
                acco.balance += float(balance)
                acco.save()
                return redirect('goinv')
        else:
            return redirect('goinv')
    except:
        return redirect('goinv')


def noninvcoacreate(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        prodobj = ProductModel.objects.all()
        itemobj = ItemModel.objects.all()
        return render(request, 'app1/noninvcoa.html', {'cmp1': cmp1, 'Product': prodobj, 'Item': itemobj})
    except:
        return redirect('gononinv')


def noninvcoacreate1(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        prodobj = ProductModel.objects.all()
        itemobj = ItemModel.objects.all()
        return render(request, 'app1/noninvcoa1.html', {'cmp1': cmp1, 'Product': prodobj, 'Item': itemobj})
    except:
        return redirect('gononinv')


@login_required(login_url='regcomp')
def noninvacccreate(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        acctype = request.POST.get('acctype')
        detype = request.POST.get('detype')
        name = request.POST.get('name')
        description = request.POST.get('description')
        gst = request.POST.get('gst')
        deftaxcode = request.POST.get('deftaxcode')
        balance = 0
        toda = date.today()
        tod = toda.strftime("%Y-%m-%d")
        pro = accountype.objects.get(accountypeid=acctype)
        pro2 = ProductModel.objects.get(Pid=acctype)
        if request.method == 'POST':
            if accountype.objects.filter(accountname=detype).exists() and accounts.objects.filter(name=name,
                                                                                                  cid=cmp1.cid) or accounts1.objects.filter(
                    name=name, cid=cmp1.cid):
                messages.info(
                    request, f"Account with name {name} already exists. Please provide another name.")
                return redirect('gononinv')
            else:
                account = accounts(acctype=acctype, detype=detype, name=name, description=description,
                                   gst=gst, balfordisp=balance,
                                   deftaxcode=deftaxcode, balance=balance, asof=tod, cid=cmp1, proid=pro,
                                   productid=pro2)
                account.save()
                account1 = accountype(
                    cid=cmp1, accountname=detype, accountbal=balance)
                account1.save()
                acco = accounts1.objects.get(
                    name='Opening Balance Equity', cid=cmp1)
                acco.balance += float(balance)
                acco.save()
                return redirect('gononinv')
        else:
            return redirect('gononinv')
    except:
        return redirect('gononinv')


def sercoacreate(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        prodobj = ProductModel.objects.all()
        itemobj = ItemModel.objects.all()
        return render(request, 'app1/sercoa.html', {'cmp1': cmp1, 'Product': prodobj, 'Item': itemobj})
    except:
        return redirect('goser')


@login_required(login_url='regcomp')
def seracccreate(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        acctype = request.POST.get('acctype')
        detype = request.POST.get('detype')
        name = request.POST.get('name')
        description = request.POST.get('description')
        gst = request.POST.get('gst')
        deftaxcode = request.POST.get('deftaxcode')
        balance = 0
        toda = date.today()
        tod = toda.strftime("%Y-%m-%d")
        pro = accountype.objects.get(accountypeid=acctype)
        pro2 = ProductModel.objects.get(Pid=acctype)
        if request.method == 'POST':
            if accountype.objects.filter(accountname=detype).exists() and accounts.objects.filter(name=name,
                                                                                                  cid=cmp1.cid) or accounts1.objects.filter(
                    name=name, cid=cmp1.cid):
                messages.info(
                    request, f"Account with name {name} already exists. Please provide another name.")
                return redirect('goser')
            else:
                account = accounts(acctype=acctype, detype=detype, name=name, description=description,
                                   gst=gst, balfordisp=balance,
                                   deftaxcode=deftaxcode, balance=balance, asof=tod, cid=cmp1, proid=pro,
                                   productid=pro2)
                account.save()
                account1 = accountype(
                    cid=cmp1, accountname=detype, accountbal=balance)
                account1.save()
                acco = accounts1.objects.get(
                    name='Opening Balance Equity', cid=cmp1)
                acco.balance += float(balance)
                acco.save()
                return redirect('goser')
        else:
            return redirect('goser')
    except:
        return redirect('goser')


def expencoacreate(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        prodobj = ProductModel.objects.all()
        itemobj = ItemModel.objects.all()
        return render(request, 'app1/expencoa.html', {'cmp1': cmp1, 'Product': prodobj, 'Item': itemobj})
    except:
        return redirect('expencesindex')


@login_required(login_url='regcomp')
def expenacccreate(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        acctype = request.POST.get('acctype')
        detype = request.POST.get('detype')
        name = request.POST.get('name')
        description = request.POST.get('description')
        gst = request.POST.get('gst')
        deftaxcode = request.POST.get('deftaxcode')
        balance = request.POST.get('balance')
        asof = request.POST.get('asof')
        pro = accountype.objects.get(accountypeid=acctype)
        pro2 = ProductModel.objects.get(Pid=acctype)
        if request.method == 'POST':
            if accountype.objects.filter(accountname=detype).exists() and accounts.objects.filter(name=name,
                                                                                                  cid=cmp1.cid) or accounts1.objects.filter(
                    name=name, cid=cmp1.cid):
                messages.info(
                    request, f"Account with name {name} already exists. Please provide another name.")
                return redirect('gobills')
            else:
                account = accounts(acctype=acctype, detype=detype, name=name, description=description,
                                   gst=gst, balfordisp=balance,
                                   deftaxcode=deftaxcode, balance=balance, asof=asof, cid=cmp1, proid=pro,
                                   productid=pro2)
                account.save()
                account1 = accountype(
                    cid=cmp1, accountname=detype, accountbal=balance)
                account1.save()
                acco = accounts1.objects.get(
                    name='Opening Balance Equity', cid=cmp1)
                acco.balance += float(balance)
                acco.save()
                return redirect('gobills')
        else:
            return redirect('gobills')
    except:
        return redirect('gobills')


@login_required(login_url='regcomp')
def goofflinebank2(request):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        return render(request, 'app1/offlinebank2.html', {'cmp1': cmp1})
    except:
        return redirect('godash')


@login_required(login_url='regcomp')
def uploadstatement(request):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        bstat = bankstatement.objects.filter(cid=cmp1)
        return render(request, 'app1/uploadtran.html', {'cmp1': cmp1, 'bstat': bstat})
    except:
        return redirect('goofflinebank')


@login_required(login_url='regcomp')
def addbankdata(request, bankstatementid):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        accoun = accounts.objects.filter(cid=cmp1)
        accoun1 = accounts1.objects.filter(cid=cmp1)
        bstat = bankstatement.objects.get(
            bankstatementid=bankstatementid, cid=cmp1)
        return render(request, 'app1/addbankdata.html',
                      {'cmp1': cmp1, 'accoun': accoun, 'accoun1': accoun1, 'bstat': bstat})
    except:
        return redirect('goofflinebank')


@login_required(login_url='regcomp')
def addtoaccounts(request):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        if request.method == 'POST':
            paye = request.POST['payee']
            category = request.POST['category']
            amount = float(request.POST['amount'])
            crdecheck = request.POST['hiden']
            toda = date.today()
            tod = toda.strftime("%Y-%m-%d")
            if crdecheck == 'credit':
                salre = salesrecpts(saledate=tod, salename=paye, offline='True', saledeposit=category,
                                    salegrandtotal=amount, cid=cmp1)
                salre.save()
                ard = accounts1.objects.get(
                    name='Account Receivable(Debtors)', cid=cmp1)
                ard.balance = round(ard.balance - amount, 2)
                ard.save()
                try:
                    acco = accounts.objects.get(name=category, cid=cmp1)
                    acco.balance = round(acco.balance + amount, 2)
                    acco.save()
                except:
                    pass
                try:
                    acco = accounts1.objects.get(name=category, cid=cmp1)
                    acco.balance = round(acco.balance + amount, 2)
                    acco.save()
                except:
                    pass
            elif crdecheck == 'debit':
                bill = bills(paymdate=tod, payee=paye, paymacnt=category,
                             grandtotal=amount, payornot='debit', cid=cmp1)
                bill.save()
                ard = accounts1.objects.get(
                    name='Accounts Payable(Creditors)', cid=cmp1)
                ard.balance = round(ard.balance - amount, 2)
                ard.save()
                try:
                    acco = accounts.objects.get(name=category, cid=cmp1)
                    acco.balance = round(acco.balance - amount, 2)
                    acco.save()
                except:
                    pass
                try:
                    acco = accounts1.objects.get(name=category, cid=cmp1)
                    acco.balance = round(acco.balance - amount, 2)
                    acco.save()
                except:
                    pass
            else:
                pass
        return redirect('uploadstatement')
    except:
        return redirect('uploadstatement')


@login_required(login_url='regcomp')
def addbalance(request):
    try:
        ids = request.GET.get('id')
        cmp1 = company.objects.get(id=request.session['uid'])
        ifs = json.loads(ids)
        for i in range(len(ifs)):
            for j in range(1):
                bankstat = bankstatement(cid=cmp1, name=ifs[i][0], date=ifs[i][1], description=ifs[i][2],
                                         debit=ifs[i][3],
                                         credit=ifs[i][4])
                bankstat.save()
        return redirect('uploadstatement')
    except:
        return redirect('uploadstatement')


@login_required(login_url='regcomp')
def balancesheetfiltered(request):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        context = {'cmp1': cmp1}
        toda = date.today()
        tod = toda.strftime("%Y-%m-%d")
        filmeth = request.POST['reportperiod']
        if filmeth == 'Today':
            fromdate = tod
            todate = tod
        elif filmeth == 'Custom':
            fromdate = request.POST['fper']
            todate = request.POST['tper']
        elif filmeth == 'This month':
            fromdate = toda.strftime("%Y-%m-01")
            todate = toda.strftime("%Y-%m-31")
        elif filmeth == 'This financial year':
            if int(toda.strftime("%m")) >= 1 and int(toda.strftime("%m")) <= 3:
                pyear = int(toda.strftime("%Y")) - 1
                fromdate = f'{pyear}-03-01'
                todate = f'{toda.strftime("%Y")}-03-31'
            else:
                pyear = int(toda.strftime("%Y")) + 1
                fromdate = f'{toda.strftime("%Y")}-03-01'
                todate = f'{pyear}-03-31'
                print(fromdate, todate)
        else:
            return redirect('balancesheet')

        # Account Receivable(Debtors)

        invoi = invoice.objects.raw(
            'select * from app1_invoice where (invoicedate between %s and %s)', [fromdate, todate, ])
        totalardebtors = 0.0
        for i in invoi:
            if i.cid == cmp1:
                totalardebtors += float(i.grandtotal)
        creditnote = credit.objects.raw('select * from app1_credit where creditdate between %s and %s',
                                        [fromdate, todate, ])
        for i in creditnote:
            if i.cid == cmp1:
                totalardebtors -= float(i.grndtot)
        paymen = payment.objects.raw('select * from app1_payment where paymdate between %s and %s',
                                     [fromdate, todate, ])
        for i in paymen:
            if i.cid == cmp1:
                totalardebtors -= float(i.amtapply)

        context['accountreceivable'] = totalardebtors

        # Accounts Payable(Creditors)

        totalapcreditors = 0.0
        bill = bills.objects.raw(
            'select * from app1_bills where paymdate between %s and %s', [fromdate, todate, ])
        for b in bill:
            if b.cid == cmp1 and b.payornot == 'openbalance':
                totalapcreditors = totalapcreditors + float(b.grandtotal)
        bill2 = bills.objects.raw(
            'select * from app1_bills where paymdate between %s and %s', [fromdate, todate, ])
        for b in bill2:
            if b.cid == cmp1 and b.payornot != 'openbalance' and b.payornot != 'debit':
                totalapcreditors = totalapcreditors - float(b.grandtotal)
        debit = suplrcredit.objects.raw('select * from app1_suplrcredit where paymdate between %s and %s',
                                        [fromdate, todate, ])
        for b in debit:
            if b.cid == cmp1:
                totalapcreditors = totalapcreditors - float(b.grandtotal)
        expence = expences.objects.raw('select * from app1_expences where paymdate between %s and %s',
                                       [fromdate, todate, ])
        for b in expence:
            if b.cid == cmp1:
                totalapcreditors = totalapcreditors + float(b.grandtotal)

        context['accountpayable'] = totalapcreditors

        currentliability = []

        # Input CGST

        totalinpcgst = 0.0
        deb = suplrcredit.objects.raw('select * from app1_suplrcredit where paymdate between %s and %s',
                                      [fromdate, todate, ])
        for i in deb:
            if i.cid == cmp1:
                name = i.supplier
                x = name.split()
                if len(x) == 3:
                    firstname = x[0]
                    lastname = x[1] + ' ' + x[2]
                    supp = supplier.objects.get(
                        firstname=firstname, lastname=lastname, cid=cmp1)
                else:
                    supp = supplier.objects.get(
                        firstname=x[0], lastname=x[1], cid=cmp1)
                if supp.state == cmp1.state:
                    totalinpcgst += float(i.taxamount) / 2
        expen = expences.objects.raw('select * from app1_expences where paymdate between %s and %s',
                                     [fromdate, todate, ])
        for i in expen:
            if i.cid == cmp1:
                name = i.payee
                x = name.split()
                if len(x) == 3:
                    firstname = x[0]
                    lastname = x[1] + ' ' + x[2]
                    supp = supplier.objects.get(
                        firstname=firstname, lastname=lastname)
                else:
                    supp = supplier.objects.get(firstname=x[0], lastname=x[1])
                if supp.state == cmp1.state:
                    totalinpcgst -= float(i.taxamount) / 2

        currentliability.append(['Input CGST', totalinpcgst])

        # Input SGST

        totalinpsgst = 0.0
        deb = suplrcredit.objects.raw('select * from app1_suplrcredit where paymdate between %s and %s',
                                      [fromdate, todate, ])
        for i in deb:
            if i.cid == cmp1:
                name = i.supplier
                x = name.split()
                if len(x) == 3:
                    firstname = x[0]
                    lastname = x[1] + ' ' + x[2]
                    supp = supplier.objects.get(
                        firstname=firstname, lastname=lastname, cid=cmp1)
                else:
                    supp = supplier.objects.get(
                        firstname=x[0], lastname=x[1], cid=cmp1)
                if supp.state == cmp1.state:
                    totalinpsgst += float(i.taxamount) / 2
        expen = expences.objects.raw('select * from app1_expences where paymdate between %s and %s',
                                     [fromdate, todate, ])
        for i in expen:
            if i.cid == cmp1:
                name = i.payee
                x = name.split()
                if len(x) == 3:
                    firstname = x[0]
                    lastname = x[1] + ' ' + x[2]
                    supp = supplier.objects.get(
                        firstname=firstname, lastname=lastname, cid=cmp1)
                else:
                    supp = supplier.objects.get(
                        firstname=x[0], lastname=x[1], cid=cmp1)
                if supp.state == cmp1.state:
                    totalinpsgst -= float(i.taxamount) / 2

        currentliability.append(['Input SGST', totalinpsgst])

        # Input IGST

        totalinpigst = 0.0
        deb = suplrcredit.objects.raw('select * from app1_suplrcredit where paymdate between %s and %s',
                                      [fromdate, todate, ])
        for i in deb:
            if i.cid == cmp1:
                name = i.supplier
                x = name.split()
                if len(x) == 3:
                    firstname = x[0]
                    lastname = x[1] + ' ' + x[2]
                    supp = supplier.objects.get(
                        firstname=firstname, lastname=lastname, cid=cmp1)
                else:
                    supp = supplier.objects.get(
                        firstname=x[0], lastname=x[1], cid=cmp1)
                if supp.state != cmp1.state:
                    totalinpigst -= float(i.taxamount)
        expen = expences.objects.raw('select * from app1_expences where paymdate between %s and %s',
                                     [fromdate, todate, ])
        for i in expen:
            if i.cid == cmp1:
                name = i.payee
                x = name.split()
                if len(x) == 3:
                    firstname = x[0]
                    lastname = x[1] + ' ' + x[2]
                    supp = supplier.objects.get(
                        firstname=firstname, lastname=lastname, cid=cmp1)
                else:
                    supp = supplier.objects.get(
                        firstname=x[0], lastname=x[1], cid=cmp1)
                if supp.state != cmp1.state:
                    totalinpigst += float(i.taxamount)

        currentliability.append(['Input IGST', totalinpigst])

        # Output CGST

        totaloutcgst = 0.0
        invoi = invoice.objects.raw('select * from app1_invoice where invoicedate between %s and %s',
                                    [fromdate, todate, ])
        for i in invoi:
            if i.cid == cmp1:
                if i.placosupply == cmp1.state:
                    totaloutcgst += float(i.taxamount) / 2
        creditnot = credit.objects.raw('select * from app1_credit where creditdate between %s and %s',
                                       [fromdate, todate, ])
        for i in creditnot:
            if i.cid == cmp1:
                if i.place == cmp1.state:
                    totaloutcgst -= float(i.taxamnt) / 2
        salesrcpt = salesrecpts.objects.raw('select * from app1_salesrecpts where saledate between %s and %s',
                                            [fromdate, todate, ])
        for i in salesrcpt:
            if i.cid == cmp1:
                if i.salesplace == cmp1.state:
                    totaloutcgst += float(i.saletaxamount) / 2

        currentliability.append(['Output CGST', totaloutcgst])

        # Output SGST

        totaloutsgst = 0.0
        invoi = invoice.objects.raw('select * from app1_invoice where invoicedate between %s and %s',
                                    [fromdate, todate, ])
        for i in invoi:
            if i.cid == cmp1:
                if i.placosupply == cmp1.state:
                    totaloutsgst += float(i.taxamount) / 2
        creditnot = credit.objects.raw('select * from app1_credit where creditdate between %s and %s',
                                       [fromdate, todate, ])
        for i in creditnot:
            if i.cid == cmp1:
                if i.place == cmp1.state:
                    totaloutsgst -= float(i.taxamnt) / 2
        salesrcpt = salesrecpts.objects.raw('select * from app1_salesrecpts where saledate between %s and %s',
                                            [fromdate, todate, ])
        for i in salesrcpt:
            if i.cid == cmp1:
                if i.salesplace == cmp1.state:
                    totaloutsgst += float(i.saletaxamount) / 2

        currentliability.append(['Output SGST', totaloutsgst])

        # Output IGST

        totaloutigst = 0.0
        invoi = invoice.objects.raw('select * from app1_invoice where invoicedate between %s and %s',
                                    [fromdate, todate, ])
        for i in invoi:
            if i.cid == cmp1:
                if i.placosupply != cmp1.state:
                    totaloutigst += float(i.taxamount)
        creditnot = credit.objects.raw('select * from app1_credit where creditdate between %s and %s',
                                       [fromdate, todate, ])
        for i in creditnot:
            if i.cid == cmp1:
                if i.place != cmp1.state:
                    totaloutigst -= float(i.taxamnt)
        salesrcpt = salesrecpts.objects.raw('select * from app1_salesrecpts where saledate between %s and %s',
                                            [fromdate, todate, ])
        for i in salesrcpt:
            if i.cid == cmp1:
                if i.salesplace != cmp1.state:
                    totaloutigst += float(i.saletaxamount)
        currentliability.append(['Output IGST', totaloutigst])

        # Opening Balance Equity

        totalobe = 0.0
        inventori = inventory.objects.raw('select * from app1_inventory where date between %s and %s',
                                          [fromdate, todate, ])
        for inv in inventori:
            if inv.cid == cmp1:
                totalobe += float(inv.cxq)
        accoun = accounts.objects.raw(
            'select * from app1_accounts where asof between %s and %s', [fromdate, todate, ])
        for i in accoun:
            if i.cid == cmp1:
                totalobe += float(i.balfordisp)

        context['obequity'] = totalobe

        # Ask My Accountant

        totalama = 0.0
        bill = bills.objects.raw('select * from app1_bills where paymdate between %s and %s',
                                 [fromdate, todate, ])
        for i in bill:
            if i.cid == cmp1 and i.payornot == 'openbalance':
                totalama += float(i.grandtotal)

        context['askmyaccountant'] = totalama

        acclis = []
        acc = accounts1.objects.filter(acctype='Current Assets', cid=cmp1)
        for i in acc:
            if i.balance != 0.0:
                acclis.append(i.name)
        inventor = inventory.objects.filter(cid=cmp1)
        inventor1 = []
        for i in inventor:
            inventor1.append([i.name, i.cost])
        bundl = bundle.objects.filter(cid=cmp1)
        bundles = []
        bundlpro = []
        bundlqty = []
        bundlprice = []
        for i in bundl:
            bundles.append(i.name)
            bundlpro.append([i.product1, i.product2, i.product3, i.product4])
            bundlqty.append([i.qty1, i.qty2, i.qty3, i.qty4])
            bundlprice.append([i.price1, i.price2, i.price3, i.price4])
        for i in acclis:
            try:
                inventor = inventory.objects.get(invacnt=i, cid=cmp1)
                totalinventasset = 0.0
                invento = inventory.objects.raw('select * from app1_inventory where date between %s and %s',
                                                [fromdate, todate, ])
                for i in invento:
                    if i.cid == cmp1 and i.invacnt == inventor.invacnt:
                        totalinventasset += i.cxq
                invoc = invoice.objects.raw('select * from app1_invoice where invoicedate between %s and %s',
                                            [fromdate, todate, ])
                for i in invoc:
                    for j in inventor1:
                        if i.cid == cmp1:
                            try:
                                if i.product == j[0]:
                                    totalcost = round(
                                        float(j[1]) * float(i.qty), 2)
                                    totalinventasset -= totalcost
                                elif bundle.objects.get(name=i.product, cid=cmp1):
                                    for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                        if i.product == b:
                                            try:
                                                if j[0] == bp[0]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty) * float(bq[0]), 2)
                                                    totalinventasset -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[1]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty) * float(bq[1]), 2)
                                                    totalinventasset -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[2]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty) * float(bq[2]), 2)
                                                    totalinventasset -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[3]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty) * float(bq[3]), 2)
                                                    totalinventasset -= totalcost
                                            except:
                                                pass
                                        else:
                                            pass
                            except:
                                pass
                            try:
                                if i.product2 == j[0]:
                                    totalcost = round(
                                        float(j[1]) * float(i.qty2), 2)
                                    totalinventasset -= totalcost
                                elif bundle.objects.get(name=i.product2, cid=cmp1):
                                    for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                        if i.product2 == b:
                                            try:
                                                if j[0] == bp[0]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty2) * float(bq[0]), 2)
                                                    totalinventasset -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[1]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty2) * float(bq[1]), 2)
                                                    totalinventasset -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[2]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty2) * float(bq[2]), 2)
                                                    totalinventasset -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[3]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty2) * float(bq[3]), 2)
                                                    totalinventasset -= totalcost
                                            except:
                                                pass
                            except:
                                pass
                            try:
                                if i.product3 == j[0]:
                                    totalcost = round(
                                        float(j[1]) * float(i.qty3), 2)
                                    totalinventasset -= totalcost
                                elif bundle.objects.get(name=i.product3, cid=cmp1):
                                    for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                        if i.product3 == b:
                                            try:
                                                if j[0] == bp[0]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty3) * float(bq[0]), 2)
                                                    totalinventasset -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[1]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty3) * float(bq[1]), 2)
                                                    totalinventasset -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[2]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty3) * float(bq[2]), 2)
                                                    totalinventasset -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[3]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty3) * float(bq[3]), 2)
                                                    totalinventasset -= totalcost
                                            except:
                                                pass
                                        else:
                                            pass
                            except:
                                pass
                            try:
                                if i.product4 == j[0]:
                                    totalcost = round(
                                        float(j[1]) * float(i.qty3), 2)
                                    totalinventasset -= totalcost
                                elif bundle.objects.get(name=i.product4, cid=cmp1):
                                    for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                        if i.product4 == b:
                                            try:
                                                if j[0] == bp[0]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty4) * float(bq[0]), 2)
                                                    totalinventasset -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[1]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty4) * float(bq[1]), 2)
                                                    totalinventasset -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[2]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty4) * float(bq[2]), 2)
                                                    totalinventasset -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[3]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty4) * float(bq[3]), 2)
                                                    totalinventasset -= totalcost
                                            except:
                                                pass
                                        else:
                                            pass
                            except:
                                pass
                creditnot = credit.objects.raw('select * from app1_credit where creditdate between %s and %s',
                                               [fromdate, todate, ])
                for i in creditnot:
                    for j in inventor1:
                        if i.cid == cmp1:
                            try:
                                if i.product == j[0]:
                                    totalcost = round(
                                        float(j[1]) * float(i.qty), 2)
                                    totalinventasset += totalcost
                                elif bundle.objects.get(name=i.product, cid=cmp1):
                                    for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                        if i.product == b:
                                            try:
                                                if j[0] == bp[0]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty) * float(bq[0]), 2)
                                                    totalinventasset += totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[1]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty) * float(bq[1]), 2)
                                                    totalinventasset += totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[2]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty) * float(bq[2]), 2)
                                                    totalinventasset += totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[3]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty) * float(bq[3]), 2)
                                                    totalinventasset += totalcost
                                            except:
                                                pass
                            except:
                                pass
                            try:
                                if i.product1 == j[0]:
                                    totalcost = round(
                                        float(j[1]) * float(i.qty1), 2)
                                    totalinventasset += totalcost
                                elif bundle.objects.get(name=i.product1, cid=cmp1):
                                    for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                        if i.product1 == b:
                                            try:
                                                if j[0] == bp[0]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty1) * float(bq[0]), 2)
                                                    totalinventasset += totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[1]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty1) * float(bq[1]), 2)
                                                    totalinventasset += totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[2]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty1) * float(bq[2]), 2)
                                                    totalinventasset += totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[3]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty1) * float(bq[3]), 2)
                                                    totalinventasset += totalcost
                                            except:
                                                pass
                            except:
                                pass
                            try:
                                if i.product2 == j[0]:
                                    totalcost = round(
                                        float(j[1]) * float(i.qty2), 2)
                                    totalinventasset += totalcost
                                elif bundle.objects.get(name=i.product2, cid=cmp1):
                                    for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                        if i.product2 == b:
                                            try:
                                                if j[0] == bp[0]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty2) * float(bq[0]), 2)
                                                    totalinventasset += totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[1]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty2) * float(bq[1]), 2)
                                                    totalinventasset += totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[2]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty2) * float(bq[2]), 2)
                                                    totalinventasset += totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[3]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty2) * float(bq[3]), 2)
                                                    totalinventasset += totalcost
                                            except:
                                                pass
                            except:
                                pass
                            try:
                                if i.product3 == j[0]:
                                    totalcost = round(
                                        float(j[1]) * float(i.qty3), 2)
                                    totalinventasset += totalcost
                                elif bundle.objects.get(name=i.product3, cid=cmp1):
                                    for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                        if i.product3 == b:
                                            try:
                                                if j[0] == bp[0]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty3) * float(bq[0]), 2)
                                                    totalinventasset += totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[1]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty3) * float(bq[1]), 2)
                                                    totalinventasset += totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[2]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty3) * float(bq[2]), 2)
                                                    totalinventasset += totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[3]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty3) * float(bq[3]), 2)
                                                    totalinventasset += totalcost
                                            except:
                                                pass
                            except:
                                pass
                salesrecpt = salesrecpts.objects.raw('select * from app1_salesrecpts where saledate between %s and %s',
                                                     [fromdate, todate, ])
                for i in salesrecpt:
                    for j in inventor1:
                        if i.cid == cmp1:
                            try:
                                if i.salepro == j[0]:
                                    totalcost = round(
                                        float(j[1]) * float(i.saleqty), 2)
                                    totalinventasset -= totalcost
                                elif bundle.objects.get(name=i.salepro, cid=cmp1):
                                    for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                        if i.salepro == b:
                                            try:
                                                if j[0] == bp[0]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.saleqty) * float(bq[0]), 2)
                                                    totalinventasset -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[1]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.saleqty) * float(bq[1]), 2)
                                                    totalinventasset -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[2]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.saleqty) * float(bq[2]), 2)
                                                    totalinventasset -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[3]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.saleqty) * float(bq[3]), 2)
                                                    totalinventasset -= totalcost
                                            except:
                                                pass
                            except:
                                pass
                            try:
                                if i.category2 == j[0]:
                                    totalcost = round(
                                        float(j[1]) * float(i.catqty2), 2)
                                    totalinventasset -= totalcost
                                elif bundle.objects.get(name=i.category2, cid=cmp1):
                                    for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                        if i.category2 == b:
                                            try:
                                                if j[0] == bp[0]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.catqty2) * float(bq[0]), 2)
                                                    totalinventasset -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[1]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.catqty2) * float(bq[1]), 2)
                                                    totalinventasset -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[2]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.catqty2) * float(bq[2]), 2)
                                                    totalinventasset -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[3]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.catqty2) * float(bq[3]), 2)
                                                    totalinventasset -= totalcost
                                            except:
                                                pass
                            except:
                                pass
                            try:
                                if i.category3 == j[0]:
                                    totalcost = round(
                                        float(j[1]) * float(i.catqty3), 2)
                                    totalinventasset -= totalcost
                                elif bundle.objects.get(name=i.category3, cid=cmp1):
                                    for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                        if i.category3 == b:
                                            try:
                                                if j[0] == bp[0]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.catqty3) * float(bq[0]), 2)
                                                    totalinventasset -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[1]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.catqty3) * float(bq[1]), 2)
                                                    totalinventasset -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[2]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.catqty3) * float(bq[2]), 2)
                                                    totalinventasset -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[3]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.catqty3) * float(bq[3]), 2)
                                                    totalinventasset -= totalcost
                                            except:
                                                pass
                            except:
                                pass
                            try:
                                if i.category4 == j[0]:
                                    totalcost = round(
                                        float(j[1]) * float(i.catqty4), 2)
                                    totalinventasset -= totalcost
                                elif bundle.objects.get(name=i.category4, cid=cmp1):
                                    for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                        if i.category4 == b:
                                            try:
                                                if j[0] == bp[0]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.catqty4) * float(bq[0]), 2)
                                                    totalinventasset -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[1]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.catqty4) * float(bq[1]), 2)
                                                    totalinventasset -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[2]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.catqty4) * float(bq[2]), 2)
                                                    totalinventasset -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[3]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.catqty4) * float(bq[3]), 2)
                                                    totalinventasset -= totalcost
                                            except:
                                                pass
                            except:
                                pass
                expen = expences.objects.raw('select * from app1_expences where paymdate between %s and %s',
                                             [fromdate, todate, ])
                for i in expen:
                    for j in inventor1:
                        if i.cid == cmp1:
                            if i.product == j[0]:
                                totalcost = round(
                                    float(i.price) * float(i.qty), 2)
                                totalinventasset += totalcost

                            try:
                                if i.product2 == j[0]:
                                    totalcost = round(
                                        float(i.price2) * float(i.qty2), 2)
                                    totalinventasset += totalcost
                            except:
                                pass
                            try:
                                if i.product3 == j[0]:
                                    totalcost = round(
                                        float(i.price3) * float(i.qty3), 2)
                                    totalinventasset += totalcost
                            except:
                                pass
                            try:
                                if i.product4 == j[0]:
                                    totalcost = round(
                                        float(i.price4) * float(i.qty4), 2)
                                    totalinventasset += totalcost
                            except:
                                pass
                debi = suplrcredit.objects.raw('select * from app1_suplrcredit where paymdate between %s and %s',
                                               [fromdate, todate, ])
                for i in debi:
                    for j in inventor1:
                        if i.cid == cmp1:
                            try:
                                if i.product == j[0]:
                                    totalcost = round(
                                        float(i.price) * float(i.qty), 2)
                                    totalinventasset -= totalcost
                            except:
                                pass
                            try:
                                if i.product2 == j[0]:
                                    totalcost = round(
                                        float(i.price2) * float(i.qty2), 2)
                                    totalinventasset -= totalcost
                            except:
                                pass
                            try:
                                if i.product3 == j[0]:
                                    totalcost = round(
                                        float(i.price3) * float(i.qty3), 2)
                                    totalinventasset -= totalcost
                            except:
                                pass
                            try:
                                if i.product4 == j[0]:
                                    totalcost = round(
                                        float(i.price4) * float(i.qty4), 2)
                                    totalinventasset -= totalcost
                            except:
                                pass
            except:
                pass
            try:
                invento = inventory.objects.filter(cid=cmp1)
                totalinventincome = 0.0
                inventor = []
                for i in invento:
                    inventor.append(i.name)
                invoc = invoice.objects.raw('select * from app1_invoice where invoicedate between %s and %s',
                                            [fromdate, todate, ])
                for i in invoc:
                    for j in inventor:
                        if i.cid == cmp1:
                            try:
                                if i.product == j:
                                    totalinventincome += float(i.total)
                                elif bundle.objects.get(name=i.product, cid=cmp1):
                                    for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                        if i.product == b:
                                            try:
                                                if j == bp[0]:
                                                    totalcost = round(
                                                        float(bprice[0]) * float(i.qty) * float(bq[0]), 2)
                                                    totalinventincome += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[1]:
                                                    totalcost = round(
                                                        float(bprice[1]) * float(i.qty) * float(bq[1]), 2)
                                                    totalinventincome += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[2]:
                                                    totalcost = round(
                                                        float(bprice[2]) * float(i.qty) * float(bq[2]), 2)
                                                    totalinventincome += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[3]:
                                                    totalcost = round(
                                                        float(bprice[3]) * float(i.qty) * float(bq[3]), 2)
                                                    totalinventincome += totalcost
                                            except:
                                                pass
                            except:
                                pass
                            try:
                                if i.product2 == j:
                                    totalinventincome += float(i.total2)
                                elif bundle.objects.get(name=i.product2, cid=cmp1):
                                    for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                        if i.product2 == b:
                                            try:
                                                if j == bp[0]:
                                                    totalcost = round(
                                                        float(bprice[0]) * float(i.qty2) * float(bq[0]), 2)
                                                    totalinventincome += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[1]:
                                                    totalcost = round(
                                                        float(bprice[1]) * float(i.qty2) * float(bq[1]), 2)
                                                    totalinventincome += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[2]:
                                                    totalcost = round(
                                                        float(bprice[2]) * float(i.qty2) * float(bq[2]), 2)
                                                    totalinventincome += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[3]:
                                                    totalcost = round(
                                                        float(bprice[3]) * float(i.qty2) * float(bq[3]), 2)
                                                    totalinventincome += totalcost
                                            except:
                                                pass
                            except:
                                pass
                            try:
                                if i.product3 == j:
                                    totalinventincome += float(i.total3)
                                elif bundle.objects.get(name=i.product3, cid=cmp1):
                                    for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                        if i.product3 == b:
                                            try:
                                                if j == bp[0]:
                                                    totalcost = round(
                                                        float(bprice[0]) * float(i.qty3) * float(bq[0]), 2)
                                                    totalinventincome += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[1]:
                                                    totalcost = round(
                                                        float(bprice[1]) * float(i.qty3) * float(bq[1]), 2)
                                                    totalinventincome += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[2]:
                                                    totalcost = round(
                                                        float(bprice[2]) * float(i.qty3) * float(bq[2]), 2)
                                                    totalinventincome += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[3]:
                                                    totalcost = round(
                                                        float(bprice[3]) * float(i.qty3) * float(bq[3]), 2)
                                                    totalinventincome += totalcost
                                            except:
                                                pass
                            except:
                                pass
                            try:
                                if i.product4 == j:
                                    totalinventincome += float(i.total4)
                                elif bundle.objects.get(name=i.product4, cid=cmp1):
                                    for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                        if i.product4 == b:
                                            try:
                                                if j == bp[0]:
                                                    totalcost = round(
                                                        float(bprice[0]) * float(i.qty4) * float(bq[0]), 2)
                                                    totalinventincome += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[1]:
                                                    totalcost = round(
                                                        float(bprice[1]) * float(i.qty4) * float(bq[1]), 2)
                                                    totalinventincome += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[2]:
                                                    totalcost = round(
                                                        float(bprice[2]) * float(i.qty4) * float(bq[2]), 2)
                                                    totalinventincome += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[3]:
                                                    totalcost = round(
                                                        float(bprice[3]) * float(i.qty4) * float(bq[3]), 2)
                                                    totalinventincome += totalcost
                                            except:
                                                pass
                            except:
                                pass
                creditnot = credit.objects.raw('select * from app1_credit where creditdate between %s and %s',
                                               [fromdate, todate, ])
                for i in creditnot:
                    for j in inventor:
                        if i.cid == cmp1:
                            try:
                                if i.product == j:
                                    totalinventincome -= float(i.total)
                                elif bundle.objects.get(name=i.product, cid=cmp1):
                                    for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                        if i.product == b:
                                            try:
                                                if j == bp[0]:
                                                    totalcost = round(
                                                        float(bprice[0]) * float(i.qty) * float(bq[0]), 2)
                                                    totalinventincome -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[1]:
                                                    totalcost = round(
                                                        float(bprice[1]) * float(i.qty) * float(bq[1]), 2)
                                                    totalinventincome -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[2]:
                                                    totalcost = round(
                                                        float(bprice[2]) * float(i.qty) * float(bq[2]), 2)
                                                    totalinventincome -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[3]:
                                                    totalcost = round(
                                                        float(bprice[3]) * float(i.qty) * float(bq[3]), 2)
                                                    totalinventincome -= totalcost
                                            except:
                                                pass
                            except:
                                pass
                            try:
                                if i.product1 == j:
                                    totalinventincome -= float(i.total1)
                                elif bundle.objects.get(name=i.product1, cid=cmp1):
                                    for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                        if i.product1 == b:
                                            try:
                                                if j == bp[0]:
                                                    totalcost = round(
                                                        float(bprice[0]) * float(i.qty1) * float(bq[0]), 2)
                                                    totalinventincome -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[1]:
                                                    totalcost = round(
                                                        float(bprice[1]) * float(i.qty1) * float(bq[1]), 2)
                                                    totalinventincome -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[2]:
                                                    totalcost = round(
                                                        float(bprice[2]) * float(i.qty1) * float(bq[2]), 2)
                                                    totalinventincome -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[3]:
                                                    totalcost = round(
                                                        float(bprice[3]) * float(i.qty1) * float(bq[3]), 2)
                                                    totalinventincome -= totalcost
                                            except:
                                                pass
                            except:
                                pass
                            try:
                                if i.product2 == j:
                                    totalinventincome -= float(i.total2)
                                elif bundle.objects.get(name=i.product2, cid=cmp1):
                                    for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                        if i.product2 == b:
                                            try:
                                                if j == bp[0]:
                                                    totalcost = round(
                                                        float(bprice[0]) * float(i.qty2) * float(bq[0]), 2)
                                                    totalinventincome -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[1]:
                                                    totalcost = round(
                                                        float(bprice[1]) * float(i.qty2) * float(bq[1]), 2)
                                                    totalinventincome -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[2]:
                                                    totalcost = round(
                                                        float(bprice[2]) * float(i.qty2) * float(bq[2]), 2)
                                                    totalinventincome -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[3]:
                                                    totalcost = round(
                                                        float(bprice[3]) * float(i.qty2) * float(bq[3]), 2)
                                                    totalinventincome -= totalcost
                                            except:
                                                pass
                            except:
                                pass
                            try:
                                if i.product3 == j:
                                    totalinventincome -= float(i.total3)
                                elif bundle.objects.get(name=i.product3, cid=cmp1):
                                    for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                        if i.product3 == b:
                                            try:
                                                if j == bp[0]:
                                                    totalcost = round(
                                                        float(bprice[0]) * float(i.qty3) * float(bq[0]), 2)
                                                    totalinventincome -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[1]:
                                                    totalcost = round(
                                                        float(bprice[1]) * float(i.qty3) * float(bq[1]), 2)
                                                    totalinventincome -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[2]:
                                                    totalcost = round(
                                                        float(bprice[2]) * float(i.qty3) * float(bq[2]), 2)
                                                    totalinventincome -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[3]:
                                                    totalcost = round(
                                                        float(bprice[3]) * float(i.qty3) * float(bq[3]), 2)
                                                    totalinventincome -= totalcost
                                            except:
                                                pass
                            except:
                                pass
                salesrecpt = salesrecpts.objects.raw('select * from app1_salesrecpts where saledate between %s and %s',
                                                     [fromdate, todate, ])
                for i in salesrecpt:
                    for j in inventor:
                        if i.cid == cmp1:
                            try:
                                if i.salepro == j:
                                    totalinventincome += float(i.saaletotal)
                                elif bundle.objects.get(name=i.salepro, cid=cmp1):
                                    for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                        if i.salepro == b:
                                            try:
                                                if j == bp[0]:
                                                    totalcost = round(
                                                        float(bprice[0]) * float(i.saleqty) * float(bq[0]), 2)
                                                    totalinventincome += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[1]:
                                                    totalcost = round(
                                                        float(bprice[1]) * float(i.saleqty) * float(bq[1]), 2)
                                                    totalinventincome += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[2]:
                                                    totalcost = round(
                                                        float(bprice[2]) * float(i.saleqty) * float(bq[2]), 2)
                                                    totalinventincome += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[3]:
                                                    totalcost = round(
                                                        float(bprice[3]) * float(i.saleqty) * float(bq[3]), 2)
                                                    totalinventincome += totalcost
                                            except:
                                                pass
                            except:
                                pass
                            try:
                                if i.category2 == j:
                                    totalinventincome += float(i.cattotal2)
                                elif bundle.objects.get(name=i.category2, cid=cmp1):
                                    for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                        if i.category2 == b:
                                            try:
                                                if j == bp[0]:
                                                    totalcost = round(
                                                        float(bprice[0]) * float(i.catqty2) * float(bq[0]), 2)
                                                    totalinventincome += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[1]:
                                                    totalcost = round(
                                                        float(bprice[1]) * float(i.catqty2) * float(bq[1]), 2)
                                                    totalinventincome += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[2]:
                                                    totalcost = round(
                                                        float(bprice[2]) * float(i.catqty2) * float(bq[2]), 2)
                                                    totalinventincome += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[3]:
                                                    totalcost = round(
                                                        float(bprice[3]) * float(i.catqty2) * float(bq[3]), 2)
                                                    totalinventincome += totalcost
                                            except:
                                                pass
                            except:
                                pass
                            try:
                                if i.category3 == j:
                                    totalinventincome += float(i.cattotal3)
                                elif bundle.objects.get(name=i.category3, cid=cmp1):
                                    for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                        if i.category3 == b:
                                            try:
                                                if j == bp[0]:
                                                    totalcost = round(
                                                        float(bprice[0]) * float(i.catqty3) * float(bq[0]), 2)
                                                    totalinventincome += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[1]:
                                                    totalcost = round(
                                                        float(bprice[1]) * float(i.catqty3) * float(bq[1]), 2)
                                                    totalinventincome += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[2]:
                                                    totalcost = round(
                                                        float(bprice[2]) * float(i.catqty3) * float(bq[2]), 2)
                                                    totalinventincome += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[3]:
                                                    totalcost = round(
                                                        float(bprice[3]) * float(i.catqty3) * float(bq[3]), 2)
                                                    totalinventincome += totalcost
                                            except:
                                                pass
                            except:
                                pass
                            try:
                                if i.category4 == j:
                                    totalinventincome += float(i.cattotal4)
                                elif bundle.objects.get(name=i.category4, cid=cmp1):
                                    for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                        if i.category4 == b:
                                            try:
                                                if j == bp[0]:
                                                    totalcost = round(
                                                        float(bprice[0]) * float(i.catqty4) * float(bq[0]), 2)
                                                    totalinventincome += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[1]:
                                                    totalcost = round(
                                                        float(bprice[1]) * float(i.catqty4) * float(bq[1]), 2)
                                                    totalinventincome += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[2]:
                                                    totalcost = round(
                                                        float(bprice[2]) * float(i.catqty4) * float(bq[2]), 2)
                                                    totalinventincome += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[3]:
                                                    totalcost = round(
                                                        float(bprice[3]) * float(i.catqty4) * float(bq[3]), 2)
                                                    totalinventincome += totalcost
                                            except:
                                                pass
                            except:
                                pass
            except:
                pass
            try:
                totalnoincome = 0.0
                noninvento = noninventory.objects.filter(cid=cmp1)
                noninventor = []
                for i in noninvento:
                    noninventor.append(i.name)
                invoc = invoice.objects.raw('select * from app1_invoice where invoicedate between %s and %s',
                                            [fromdate, todate, ])
                for i in invoc:
                    for j in noninventor:
                        if i.cid == cmp1:
                            try:
                                if i.product == j:
                                    totalnoincome += float(i.total)
                                elif bundle.objects.get(name=i.product, cid=cmp1):
                                    for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                        if i.product == b:
                                            try:
                                                if j == bp[0]:
                                                    totalcost = round(
                                                        float(bprice[0]) * float(i.qty) * float(bq[0]), 2)
                                                    totalnoincome += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[1]:
                                                    totalcost = round(
                                                        float(bprice[1]) * float(i.qty) * float(bq[1]), 2)
                                                    totalnoincome += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[2]:
                                                    totalcost = round(
                                                        float(bprice[2]) * float(i.qty) * float(bq[2]), 2)
                                                    totalnoincome += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[3]:
                                                    totalcost = round(
                                                        float(bprice[3]) * float(i.qty) * float(bq[3]), 2)
                                                    totalnoincome += totalcost
                                            except:
                                                pass
                            except:
                                pass
                            try:
                                if i.product2 == j:
                                    totalnoincome += float(i.total2)
                                elif bundle.objects.get(name=i.product2, cid=cmp1):
                                    for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                        if i.product2 == b:
                                            try:
                                                if j == bp[0]:
                                                    totalcost = round(
                                                        float(bprice[0]) * float(i.qty2) * float(bq[0]), 2)
                                                    totalnoincome += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[1]:
                                                    totalcost = round(
                                                        float(bprice[1]) * float(i.qty2) * float(bq[1]), 2)
                                                    totalnoincome += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[2]:
                                                    totalcost = round(
                                                        float(bprice[2]) * float(i.qty2) * float(bq[2]), 2)
                                                    totalnoincome += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[3]:
                                                    totalcost = round(
                                                        float(bprice[3]) * float(i.qty2) * float(bq[3]), 2)
                                                    totalnoincome += totalcost
                                            except:
                                                pass
                            except:
                                pass
                            try:
                                if i.product3 == j:
                                    totalnoincome += float(i.total3)
                                elif bundle.objects.get(name=i.product3, cid=cmp1):
                                    for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                        if i.product3 == b:
                                            try:
                                                if j == bp[0]:
                                                    totalcost = round(
                                                        float(bprice[0]) * float(i.qty3) * float(bq[0]), 2)
                                                    totalnoincome += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[1]:
                                                    totalcost = round(
                                                        float(bprice[1]) * float(i.qty3) * float(bq[1]), 2)
                                                    totalnoincome += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[2]:
                                                    totalcost = round(
                                                        float(bprice[2]) * float(i.qty3) * float(bq[2]), 2)
                                                    totalnoincome += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[3]:
                                                    totalcost = round(
                                                        float(bprice[3]) * float(i.qty3) * float(bq[3]), 2)
                                                    totalnoincome += totalcost
                                            except:
                                                pass
                            except:
                                pass
                            try:
                                if i.product4 == j:
                                    totalnoincome += float(i.total4)
                                elif bundle.objects.get(name=i.product4, cid=cmp1):
                                    for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                        if i.product4 == b:
                                            try:
                                                if j == bp[0]:
                                                    totalcost = round(
                                                        float(bprice[0]) * float(i.qty4) * float(bq[0]), 2)
                                                    totalnoincome += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[1]:
                                                    totalcost = round(
                                                        float(bprice[1]) * float(i.qty4) * float(bq[1]), 2)
                                                    totalnoincome += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[2]:
                                                    totalcost = round(
                                                        float(bprice[2]) * float(i.qty4) * float(bq[2]), 2)
                                                    totalnoincome += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[3]:
                                                    totalcost = round(
                                                        float(bprice[3]) * float(i.qty4) * float(bq[3]), 2)
                                                    totalnoincome += totalcost
                                            except:
                                                pass
                            except:
                                pass
                creditnot = credit.objects.raw('select * from app1_credit where creditdate between %s and %s',
                                               [fromdate, todate, ])
                for i in creditnot:
                    for j in noninventor:
                        if i.cid == cmp1:
                            try:
                                if i.product == j:
                                    totalnoincome -= float(i.total)
                                elif bundle.objects.get(name=i.product, cid=cmp1):
                                    for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                        if i.product == b:
                                            try:
                                                if j == bp[0]:
                                                    totalcost = round(
                                                        float(bprice[0]) * float(i.qty) * float(bq[0]), 2)
                                                    totalnoincome -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[1]:
                                                    totalcost = round(
                                                        float(bprice[1]) * float(i.qty) * float(bq[1]), 2)
                                                    totalnoincome -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[2]:
                                                    totalcost = round(
                                                        float(bprice[2]) * float(i.qty) * float(bq[2]), 2)
                                                    totalnoincome -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[3]:
                                                    totalcost = round(
                                                        float(bprice[3]) * float(i.qty) * float(bq[3]), 2)
                                                    totalnoincome -= totalcost
                                            except:
                                                pass
                            except:
                                pass
                            try:
                                if i.product1 == j:
                                    totalnoincome -= float(i.total1)
                                elif bundle.objects.get(name=i.product1, cid=cmp1):
                                    for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                        if i.product1 == b:
                                            try:
                                                if j == bp[0]:
                                                    totalcost = round(
                                                        float(bprice[0]) * float(i.qty1) * float(bq[0]), 2)
                                                    totalnoincome -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[1]:
                                                    totalcost = round(
                                                        float(bprice[1]) * float(i.qty1) * float(bq[1]), 2)
                                                    totalnoincome -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[2]:
                                                    totalcost = round(
                                                        float(bprice[2]) * float(i.qty1) * float(bq[2]), 2)
                                                    totalnoincome -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[3]:
                                                    totalcost = round(
                                                        float(bprice[3]) * float(i.qty1) * float(bq[3]), 2)
                                                    totalnoincome -= totalcost
                                            except:
                                                pass
                            except:
                                pass
                            try:
                                if i.product2 == j:
                                    totalnoincome -= float(i.total2)
                                elif bundle.objects.get(name=i.product2, cid=cmp1):
                                    for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                        if i.product2 == b:
                                            try:
                                                if j == bp[0]:
                                                    totalcost = round(
                                                        float(bprice[0]) * float(i.qty2) * float(bq[0]), 2)
                                                    totalnoincome -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[1]:
                                                    totalcost = round(
                                                        float(bprice[1]) * float(i.qty2) * float(bq[1]), 2)
                                                    totalnoincome -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[2]:
                                                    totalcost = round(
                                                        float(bprice[2]) * float(i.qty2) * float(bq[2]), 2)
                                                    totalnoincome -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[3]:
                                                    totalcost = round(
                                                        float(bprice[3]) * float(i.qty2) * float(bq[3]), 2)
                                                    totalnoincome -= totalcost
                                            except:
                                                pass
                            except:
                                pass
                            try:
                                if i.product3 == j:
                                    totalnoincome -= float(i.total3)
                                elif bundle.objects.get(name=i.product3, cid=cmp1):
                                    for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                        if i.product3 == b:
                                            try:
                                                if j == bp[0]:
                                                    totalcost = round(
                                                        float(bprice[0]) * float(i.qty3) * float(bq[0]), 2)
                                                    totalnoincome -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[1]:
                                                    totalcost = round(
                                                        float(bprice[1]) * float(i.qty3) * float(bq[1]), 2)
                                                    totalnoincome -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[2]:
                                                    totalcost = round(
                                                        float(bprice[2]) * float(i.qty3) * float(bq[2]), 2)
                                                    totalnoincome -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[3]:
                                                    totalcost = round(
                                                        float(bprice[3]) * float(i.qty3) * float(bq[3]), 2)
                                                    totalnoincome -= totalcost
                                            except:
                                                pass
                            except:
                                pass
                salesrecpt = salesrecpts.objects.raw('select * from app1_salesrecpts where saledate between %s and %s',
                                                     [fromdate, todate, ])
                for i in salesrecpt:
                    for j in noninventor:
                        if i.cid == cmp1:
                            try:
                                if i.salepro == j:
                                    totalnoincome += float(i.saaletotal)
                                elif bundle.objects.get(name=i.salepro, cid=cmp1):
                                    for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                        if i.salepro == b:
                                            try:
                                                if j == bp[0]:
                                                    totalcost = round(
                                                        float(bprice[0]) * float(i.saleqty) * float(bq[0]), 2)
                                                    totalnoincome += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[1]:
                                                    totalcost = round(
                                                        float(bprice[1]) * float(i.saleqty) * float(bq[1]), 2)
                                                    totalnoincome += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[2]:
                                                    totalcost = round(
                                                        float(bprice[2]) * float(i.saleqty) * float(bq[2]), 2)
                                                    totalnoincome += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[3]:
                                                    totalcost = round(
                                                        float(bprice[3]) * float(i.saleqty) * float(bq[3]), 2)
                                                    totalnoincome += totalcost
                                            except:
                                                pass
                            except:
                                pass
                            try:
                                if i.category2 == j:
                                    totalnoincome += float(i.cattotal2)
                                elif bundle.objects.get(name=i.category2, cid=cmp1):
                                    for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                        if i.category2 == b:
                                            try:
                                                if j == bp[0]:
                                                    totalcost = round(
                                                        float(bprice[0]) * float(i.catqty2) * float(bq[0]), 2)
                                                    totalnoincome += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[1]:
                                                    totalcost = round(
                                                        float(bprice[1]) * float(i.catqty2) * float(bq[1]), 2)
                                                    totalnoincome += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[2]:
                                                    totalcost = round(
                                                        float(bprice[2]) * float(i.catqty2) * float(bq[2]), 2)
                                                    totalnoincome += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[3]:
                                                    totalcost = round(
                                                        float(bprice[3]) * float(i.catqty2) * float(bq[3]), 2)
                                                    totalnoincome += totalcost
                                            except:
                                                pass
                            except:
                                pass
                            try:
                                if i.category3 == j:
                                    totalnoincome += float(i.cattotal3)
                                elif bundle.objects.get(name=i.category3, cid=cmp1):
                                    for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                        if i.category3 == b:
                                            try:
                                                if j == bp[0]:
                                                    totalcost = round(
                                                        float(bprice[0]) * float(i.catqty3) * float(bq[0]), 2)
                                                    totalnoincome += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[1]:
                                                    totalcost = round(
                                                        float(bprice[1]) * float(i.catqty3) * float(bq[1]), 2)
                                                    totalnoincome += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[2]:
                                                    totalcost = round(
                                                        float(bprice[2]) * float(i.catqty3) * float(bq[2]), 2)
                                                    totalnoincome += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[3]:
                                                    totalcost = round(
                                                        float(bprice[3]) * float(i.catqty3) * float(bq[3]), 2)
                                                    totalnoincome += totalcost
                                            except:
                                                pass
                            except:
                                pass
                            try:
                                if i.category4 == j:
                                    totalnoincome += float(i.cattotal4)
                                elif bundle.objects.get(name=i.category4, cid=cmp1):
                                    for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                        if i.category4 == b:
                                            try:
                                                if j == bp[0]:
                                                    totalcost = round(
                                                        float(bprice[0]) * float(i.catqty4) * float(bq[0]), 2)
                                                    totalnoincome += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[1]:
                                                    totalcost = round(
                                                        float(bprice[1]) * float(i.catqty4) * float(bq[1]), 2)
                                                    totalnoincome += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[2]:
                                                    totalcost = round(
                                                        float(bprice[2]) * float(i.catqty4) * float(bq[2]), 2)
                                                    totalnoincome += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[3]:
                                                    totalcost = round(
                                                        float(bprice[3]) * float(i.catqty4) * float(bq[3]), 2)
                                                    totalnoincome += totalcost
                                            except:
                                                pass
                            except:
                                pass
            except:
                pass
            try:
                totalinventexpence = 0.0
                invento = inventory.objects.filter(cid=cmp1)
                inventor = []
                for i in invento:
                    inventor.append([i.name, i.cost])
                invoc = invoice.objects.raw('select * from app1_invoice where invoicedate between %s and %s',
                                            [fromdate, todate, ])
                for i in invoc:
                    for j in inventor:
                        if i.cid == cmp1:
                            try:
                                if i.product == j[0]:
                                    totalcost = round(
                                        float(j[1]) * float(i.qty), 2)
                                    totalinventexpence += totalcost
                                elif bundle.objects.get(name=i.product, cid=cmp1):
                                    for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                        if i.product == b:
                                            try:
                                                if j[0] == bp[0]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty) * float(bq[0]), 2)
                                                    totalinventexpence += totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[1]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty) * float(bq[1]), 2)
                                                    totalinventexpence += totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[2]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty) * float(bq[2]), 2)
                                                    totalinventexpence += totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[3]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty) * float(bq[3]), 2)
                                                    totalinventexpence += totalcost
                                            except:
                                                pass
                                        else:
                                            pass
                            except:
                                pass
                            try:
                                if i.product2 == j[0]:
                                    totalcost = round(
                                        float(j[1]) * float(i.qty2), 2)
                                    totalinventexpence += totalcost
                                elif bundle.objects.get(name=i.product2, cid=cmp1):
                                    for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                        if i.product2 == b:
                                            try:
                                                if j[0] == bp[0]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty2) * float(bq[0]), 2)
                                                    totalinventexpence += totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[1]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty2) * float(bq[1]), 2)
                                                    totalinventexpence += totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[2]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty2) * float(bq[2]), 2)
                                                    totalinventexpence += totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[3]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty2) * float(bq[3]), 2)
                                                    totalinventexpence += totalcost
                                            except:
                                                pass
                            except:
                                pass
                            try:
                                if i.product3 == j[0]:
                                    totalcost = round(
                                        float(j[1]) * float(i.qty3), 2)
                                    totalinventexpence += totalcost
                                elif bundle.objects.get(name=i.product3, cid=cmp1):
                                    for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                        if i.product3 == b:
                                            try:
                                                if j[0] == bp[0]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty3) * float(bq[0]), 2)
                                                    totalinventexpence += totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[1]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty3) * float(bq[1]), 2)
                                                    totalinventexpence += totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[2]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty3) * float(bq[2]), 2)
                                                    totalinventexpence += totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[3]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty3) * float(bq[3]), 2)
                                                    totalinventexpence += totalcost
                                            except:
                                                pass
                                        else:
                                            pass
                            except:
                                pass
                            try:
                                if i.product4 == j[0]:
                                    totalcost = round(
                                        float(j[1]) * float(i.qty4), 2)
                                    totalinventexpence += totalcost
                                elif bundle.objects.get(name=i.product4, cid=cmp1):
                                    for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                        if i.product4 == b:
                                            try:
                                                if j[0] == bp[0]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty4) * float(bq[0]), 2)
                                                    totalinventexpence += totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[1]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty4) * float(bq[1]), 2)
                                                    totalinventexpence += totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[2]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty4) * float(bq[2]), 2)
                                                    totalinventexpence += totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[3]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty4) * float(bq[3]), 2)
                                                    totalinventexpence += totalcost
                                            except:
                                                pass
                                        else:
                                            pass
                            except:
                                pass
                creditnot = credit.objects.raw('select * from app1_credit where creditdate between %s and %s',
                                               [fromdate, todate, ])
                for i in creditnot:
                    for j in inventor:
                        if i.cid == cmp1:
                            try:
                                if i.product == j[0]:
                                    totalcost = round(
                                        float(j[1]) * float(i.qty), 2)
                                    totalinventexpence -= totalcost
                                elif bundle.objects.get(name=i.product, cid=cmp1):
                                    for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                        if i.product == b:
                                            try:
                                                if j[0] == bp[0]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty) * float(bq[0]), 2)
                                                    totalinventexpence -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[1]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty) * float(bq[1]), 2)
                                                    totalinventexpence -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[2]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty) * float(bq[2]), 2)
                                                    totalinventexpence -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[3]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty) * float(bq[3]), 2)
                                                    totalinventexpence -= totalcost
                                            except:
                                                pass
                            except:
                                pass
                            try:
                                if i.product1 == j[0]:
                                    totalcost = round(
                                        float(j[1]) * float(i.qty1), 2)
                                    totalinventexpence -= totalcost
                                elif bundle.objects.get(name=i.product1, cid=cmp1):
                                    for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                        if i.product1 == b:
                                            try:
                                                if j[0] == bp[0]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty1) * float(bq[0]), 2)
                                                    totalinventexpence -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[1]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty1) * float(bq[1]), 2)
                                                    totalinventexpence -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[2]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty1) * float(bq[2]), 2)
                                                    totalinventexpence -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[3]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty1) * float(bq[3]), 2)
                                                    totalinventexpence -= totalcost
                                            except:
                                                pass
                            except:
                                pass
                            try:
                                if i.product2 == j[0]:
                                    totalcost = round(
                                        float(j[1]) * float(i.qty2), 2)
                                    totalinventexpence -= totalcost
                                elif bundle.objects.get(name=i.product2, cid=cmp1):
                                    for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                        if i.product2 == b:
                                            try:
                                                if j[0] == bp[0]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty2) * float(bq[0]), 2)
                                                    totalinventexpence -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[1]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty2) * float(bq[1]), 2)
                                                    totalinventexpence -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[2]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty2) * float(bq[2]), 2)
                                                    totalinventexpence -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[3]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty2) * float(bq[3]), 2)
                                                    totalinventexpence -= totalcost
                                            except:
                                                pass
                            except:
                                pass
                            try:
                                if i.product3 == j[0]:
                                    totalcost = round(
                                        float(j[1]) * float(i.qty3), 2)
                                    totalinventexpence -= totalcost
                                elif bundle.objects.get(name=i.product3, cid=cmp1):
                                    for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                        if i.product3 == b:
                                            try:
                                                if j[0] == bp[0]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty3) * float(bq[0]), 2)
                                                    totalinventexpence -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[1]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty3) * float(bq[1]), 2)
                                                    totalinventexpence -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[2]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty3) * float(bq[2]), 2)
                                                    totalinventexpence -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[3]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty3) * float(bq[3]), 2)
                                                    totalinventexpence -= totalcost
                                            except:
                                                pass
                            except:
                                pass
                salesrecpt = salesrecpts.objects.raw('select * from app1_salesrecpts where saledate between %s and %s',
                                                     [fromdate, todate, ])
                for i in salesrecpt:
                    for j in inventor:
                        if i.cid == cmp1:
                            try:
                                if i.salepro == j[0]:
                                    totalcost = round(
                                        float(j[1]) * float(i.saleqty), 2)
                                    totalinventexpence += totalcost
                                elif bundle.objects.get(name=i.salepro, cid=cmp1):
                                    for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                        if i.salepro == b:
                                            try:
                                                if j[0] == bp[0]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.saleqty) * float(bq[0]), 2)
                                                    totalinventexpence += totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[1]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.saleqty) * float(bq[1]), 2)
                                                    totalinventexpence += totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[2]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.saleqty) * float(bq[2]), 2)
                                                    totalinventexpence += totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[3]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.saleqty) * float(bq[3]), 2)
                                                    totalinventexpence += totalcost
                                            except:
                                                pass
                            except:
                                pass
                            try:
                                if i.category2 == j[0]:
                                    totalcost = round(
                                        float(j[1]) * float(i.catqty2), 2)
                                    totalinventexpence += totalcost
                                elif bundle.objects.get(name=i.category2, cid=cmp1):
                                    for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                        if i.category2 == b:
                                            try:
                                                if j[0] == bp[0]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.catqty2) * float(bq[0]), 2)
                                                    totalinventexpence += totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[1]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.catqty2) * float(bq[1]), 2)
                                                    totalinventexpence += totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[2]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.catqty2) * float(bq[2]), 2)
                                                    totalinventexpence += totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[3]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.catqty2) * float(bq[3]), 2)
                                                    totalinventexpence += totalcost
                                            except:
                                                pass
                            except:
                                pass
                            try:
                                if i.category3 == j[0]:
                                    totalcost = round(
                                        float(j[1]) * float(i.catqty3), 2)
                                    totalinventexpence += totalcost
                                elif bundle.objects.get(name=i.category3, cid=cmp1):
                                    for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                        if i.category3 == b:
                                            try:
                                                if j[0] == bp[0]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.catqty3) * float(bq[0]), 2)
                                                    totalinventexpence += totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[1]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.catqty3) * float(bq[1]), 2)
                                                    totalinventexpence += totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[2]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.catqty3) * float(bq[2]), 2)
                                                    totalinventexpence += totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[3]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.catqty3) * float(bq[3]), 2)
                                                    totalinventexpence += totalcost
                                            except:
                                                pass
                            except:
                                pass
                            try:
                                if i.category4 == j[0]:
                                    totalcost = round(
                                        float(j[1]) * float(i.catqty4), 2)
                                    totalinventexpence += totalcost
                                elif bundle.objects.get(name=i.category4, cid=cmp1):
                                    for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                        if i.category4 == b:
                                            try:
                                                if j[0] == bp[0]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.catqty4) * float(bq[0]), 2)
                                                    totalinventexpence += totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[1]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.catqty4) * float(bq[1]), 2)
                                                    totalinventexpence += totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[2]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.catqty4) * float(bq[2]), 2)
                                                    totalinventexpence += totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[3]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.catqty4) * float(bq[3]), 2)
                                                    totalinventexpence += totalcost
                                            except:
                                                pass
                            except:
                                pass
            except:
                pass
            try:
                totalnonexpence = 0.0
                noninvento = noninventory.objects.filter(cid=cmp1)
                noninventor = []
                for i in noninvento:
                    noninventor.append(i.name)
                expen = expences.objects.raw('select * from app1_expences where paymdate between %s and %s',
                                             [fromdate, todate, ])
                for i in expen:
                    for j in noninventor:
                        if i.cid == cmp1:
                            try:
                                if i.product == j:
                                    totalnonexpence += float(i.total)
                            except:
                                pass
                            try:
                                if i.product2 == j:
                                    totalnonexpence += float(i.total2)
                            except:
                                pass
                            try:
                                if i.product3 == j:
                                    totalnonexpence += float(i.total3)
                            except:
                                pass
                            try:
                                if i.product4 == j:
                                    totalnonexpence += float(i.total4)
                            except:
                                pass
                debi = suplrcredit.objects.raw('select * from app1_suplrcredit where paymdate between %s and %s',
                                               [fromdate, todate, ])
                for i in debi:
                    for j in noninventor:
                        if i.cid == cmp1:
                            try:
                                if i.product == j:
                                    totalnonexpence -= float(i.total)
                            except:
                                pass
                            try:
                                if i.product2 == j:
                                    totalnonexpence -= float(i.total2)
                            except:
                                pass
                            try:
                                if i.product3 == j:
                                    totalnonexpence -= float(i.total3)
                            except:
                                pass
                            try:
                                if i.product4 == j:
                                    totalnonexpence -= float(i.total4)
                            except:
                                pass
            except:
                pass
            lis = []
            try:
                totalsaledeposit = 0.0
                salesrecpt = salesrecpts.objects.raw('select * from app1_salesrecpts where saledate between %s and %s',
                                                     [fromdate, todate, ])
                for s in salesrecpt:
                    if s.cid == cmp1:
                        lis.append([s.saledeposit, s.salegrandtotal])
                        totalsaledeposit += float(s.salegrandtotal)
            except:
                pass
            try:
                totalpaydeposit = 0.0
                payment1 = payment.objects.raw('select * from app1_payment where paymdate between %s and %s',
                                               [fromdate, todate, ])
                for s in payment1:
                    if s.cid == cmp1:
                        lis.append([s.depto, s.amtapply])
                        totalpaydeposit += float(s.amtapply)
            except:
                pass
            try:
                totalbilldeposit = 0.0
                bill = bills.objects.raw('select * from app1_bills where paymdate between %s and %s',
                                         [fromdate, todate, ])
                for s in bill:
                    if s.cid == cmp1 and s.payornot != 'openbalance':
                        lis.append([s.paymacnt, 0 - float(s.grandtotal)])
                        totalbilldeposit -= float(s.grandtotal)
            except:
                pass
        banktot = 0.0
        currenttot = 0.0
        currentlist = []
        for i in lis:
            try:
                if i[0] in acclis:
                    currentlist.append([i[0], i[1]])
                    currenttot += float(i[1])
            except:
                pass
            try:
                if i[0] not in acclis:
                    banktot += float(i[1])
            except:
                pass
        currentlist.append(['Inventory Asset', str(totalinventasset)])

        accouns = accounts.objects.raw(
            'select * from app1_accounts where asof between %s and %s', [fromdate, todate, ])
        for i in accouns:
            if i.cid == cmp1 and i.acctype == '3':
                banktot += float(i.balfordisp)
        context['bank'] = banktot
        context['currentliable'] = currentliability
        context['currentasset'] = currentlist
        context['asset'] = banktot + currenttot + \
            totalinventasset + totalardebtors

        proandloss = ((totalinventincome + totalnoincome) -
                      totalinventexpence) - (totalnonexpence + totalama)
        context['proandloss'] = proandloss
        context['equity'] = proandloss + totalobe
        totcliability = 0.0
        for i in currentliability:
            totcliability += float(i[1])
        context['totcurliability'] = totcliability + totalapcreditors
        context['totliability'] = totcliability + \
            totalapcreditors + proandloss + totalobe

        return render(request, 'app1/balancesheetfilter.html', context)
    except:
        return redirect('balancesheet')


@login_required(login_url='regcomp')
def balancesheet(request):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        context = {'cmp1': cmp1}
        try:
            tot = 0.0
            if accounts1.objects.filter(acctype='Current Assets', cid=cmp1):
                acc = accounts1.objects.filter(
                    acctype='Current Assets', cid=cmp1)
                for i in acc:
                    if i.cid == cmp1:
                        tot = tot + i.balance
                context['account'] = acc
        except:
            pass
        try:
            tot1 = 0.0
            if accounts.objects.filter(acctype='Current Assets', cid=cmp1):
                acc = accounts.objects.filter(
                    acctype='Current Assets', cid=cmp1)
                for i in acc:
                    if i.cid == cmp1:
                        tot1 = tot1 + i.balance
                context['account1'] = acc
        except:
            pass
        try:
            tot2 = 0.0
            if accounts1.objects.filter(acctype='Account Receivable(Debtors)', cid=cmp1):
                acc = accounts1.objects.filter(
                    acctype='Account Receivable(Debtors)', cid=cmp1)
                for i in acc:
                    if i.cid == cmp1:
                        tot2 = tot2 + i.balance
                context['account2'] = acc
        except:
            pass
        try:
            tot3 = 0.0
            if accounts.objects.filter(acctype='Account Receivable(Debtors)', cid=cmp1):
                acc = accounts.objects.filter(
                    acctype='Account Receivable(Debtors)', cid=cmp1)
                for i in acc:
                    if i.cid == cmp1:
                        tot3 = tot3 + i.balance
                context['account3'] = acc
        except:
            pass
        try:
            totbank = 0.0
            if accounts.objects.filter(acctype='3', cid=cmp1):
                acc = accounts.objects.filter(acctype='3', cid=cmp1)
                for i in acc:
                    totbank = totbank + i.balance
                context['accountbank'] = acc
                context['tbank'] = totbank
        except:
            pass
        taccountsreceivable = tot2 + tot3
        tcurrentassets = tot + tot1 + taccountsreceivable + totbank
        context['tar'] = taccountsreceivable
        context['tca'] = tcurrentassets
        try:
            tot4 = 0.0
            if accounts1.objects.filter(acctype='Current Liabilities', cid=cmp1):
                acc = accounts1.objects.filter(
                    acctype='Current Liabilities', cid=cmp1)
                for i in acc:
                    tot4 = tot4 + i.balance
                context['account4'] = acc
        except:
            pass
        try:
            tot5 = 0.0
            if accounts.objects.filter(acctype='Current Liabilities', cid=cmp1):
                acc = accounts.objects.filter(
                    acctype='Current Liabilities', cid=cmp1)
                for i in acc:
                    tot5 = tot5 + i.balance
                context['account5'] = acc
        except:
            pass
        try:
            tot6 = 0.0
            if accounts1.objects.filter(acctype='Accounts Payable(Creditors)', cid=cmp1):
                acc = accounts1.objects.filter(
                    acctype='Accounts Payable(Creditors)', cid=cmp1)
                for i in acc:
                    tot6 = tot6 + i.balance
                context['account6'] = acc
        except:
            pass
        try:
            tot7 = 0.0
            if accounts.objects.filter(acctype='Accounts Payable(Creditors)', cid=cmp1):
                acc = accounts.objects.filter(
                    acctype='Accounts Payable(Creditors)', cid=cmp1)
                for i in acc:
                    tot7 = tot7 + i.balance
                context['account7'] = acc
        except:
            pass
        taccountspayable = tot6 + tot7
        tcurrentliabilties = tot4 + tot5 + taccountspayable
        context['tap'] = taccountspayable
        context['tcl'] = tcurrentliabilties
        try:
            tot8 = 0.0
            if accounts1.objects.filter(acctype='Equity', cid=cmp1):
                acc = accounts1.objects.filter(acctype='Equity', cid=cmp1)
                for i in acc:
                    tot8 = tot8 + i.balance
                context['account8'] = acc
        except:
            pass
        try:
            tot9 = 0.0
            if accounts.objects.filter(acctype='Equity', cid=cmp1):
                acc = accounts.objects.filter(acctype='Equity', cid=cmp1)
                for i in acc:
                    tot9 = tot9 + i.balance
                context['account9'] = acc
        except:
            pass
        tequity = tot8 + tot9
        try:
            tot10 = 0.0
            if accounts1.objects.filter(acctype='Income', cid=cmp1):
                acc = accounts1.objects.filter(acctype='Income', cid=cmp1)
                for i in acc:
                    tot10 = tot10 + i.balance
        except:
            pass
        try:
            tot11 = 0.0
            if accounts.objects.filter(acctype='Income', cid=cmp1):
                acc = accounts.objects.filter(acctype='Income', cid=cmp1)
                for i in acc:
                    tot11 = tot11 + i.balance
        except:
            pass
        tincome = tot10 + tot11
        try:
            tot12 = 0.0
            if accounts1.objects.filter(acctype='Cost of Goods Sold', cid=cmp1):
                acc = accounts1.objects.filter(
                    acctype='Cost of Goods Sold', cid=cmp1)
                for i in acc:
                    tot12 = tot12 + i.balance
        except:
            pass
        try:
            tot13 = 0.0
            if accounts.objects.filter(acctype='Cost of Goods Sold', cid=cmp1):
                acc = accounts.objects.filter(
                    acctype='Cost of Goods Sold', cid=cmp1)
                for i in acc:
                    tot13 = tot13 + i.balance
        except:
            pass
        tcogs = tot12 + tot13
        try:
            tot14 = 0.0
            if accounts1.objects.filter(acctype='Other Income', cid=cmp1):
                acc = accounts1.objects.filter(
                    acctype='Other Income', cid=cmp1)
                for i in acc:
                    tot14 = tot14 + i.balance
        except:
            pass
        try:
            tot15 = 0.0
            if accounts.objects.filter(acctype='Other Income', cid=cmp1):
                acc = accounts.objects.filter(acctype='Other Income', cid=cmp1)
                for i in acc:
                    tot15 = tot15 + i.balance
        except:
            pass
        totherincome = tot14 + tot15
        try:
            tot16 = 0.0
            if accounts1.objects.filter(acctype='Expenses', cid=cmp1):
                acc = accounts1.objects.filter(acctype='Expenses', cid=cmp1)
                for i in acc:
                    tot16 = tot16 + i.balance
        except:
            pass
        try:
            tot17 = 0.0
            if accounts.objects.filter(acctype='Expenses', cid=cmp1):
                acc = accounts.objects.filter(acctype='Expenses', cid=cmp1)
                for i in acc:
                    tot17 = tot17 + i.balance
        except:
            pass
        try:
            tot18 = 0.0
            if accounts1.objects.filter(acctype='Other Expenses', cid=cmp1):
                acc = accounts1.objects.filter(
                    acctype='Other Expenses', cid=cmp1)
                for i in acc:
                    tot18 = tot18 + i.balance
        except:
            pass
        try:
            tot19 = 0.0
            if accounts.objects.filter(acctype='Other Expenses', cid=cmp1):
                acc = accounts.objects.filter(
                    acctype='Other Expenses', cid=cmp1)
                for i in acc:
                    tot19 = tot19 + i.balance
        except:
            pass
        texpences = tot16 + tot17
        toexpences = tot18 + tot19
        proandloss = ((tincome - tcogs) + totherincome) - \
                      (texpences + toexpences)
        print(tincome, tcogs, texpences, toexpences)
        totequity = tequity + proandloss
        tlande = tcurrentliabilties + totequity
        context['proandloss'] = proandloss
        context['totequity'] = totequity
        context['tlande'] = tlande
        return render(request, 'app1/balancesheet.html', context)
    except:
        return redirect('godash')


def profitandloss(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        context = {'cmp1': cmp1}

        try:
            tot10 = 0.0
            if accounts1.objects.filter(acctype='Income', cid=cmp1):
                acc = accounts1.objects.filter(acctype='Income', cid=cmp1)
                for i in acc:
                    tot10 = tot10 + i.balance
                context['account1'] = acc

        except:
            pass
        try:
            tot11 = 0.0
            if accounts.objects.filter(acctype='Income', cid=cmp1):
                acc = accounts.objects.filter(acctype='Income', cid=cmp1)
                for i in acc:
                    tot11 = tot11 + i.balance
                context['account2'] = acc
        except:
            pass
        tincome = tot10 + tot11
        context['tin'] = tincome
        try:
            tot12 = 0.0
            if accounts1.objects.filter(acctype='Cost of Goods Sold', cid=cmp1):
                acc = accounts1.objects.filter(
                    acctype='Cost of Goods Sold', cid=cmp1)
                for i in acc:
                    tot12 = tot12 + i.balance
                context['account3'] = acc
        except:
            pass
        try:
            tot13 = 0.0
            if accounts.objects.filter(acctype='Cost of Goods Sold', cid=cmp1):
                acc = accounts.objects.filter(
                    acctype='Cost of Goods Sold', cid=cmp1)
                for i in acc:
                    tot13 = tot13 + i.balance
                context['account4'] = acc
        except:
            pass
        tcogs = tot12 + tot13
        context['tcg'] = tcogs
        grosprofit = tincome - tcogs
        context['gros'] = grosprofit
        try:
            tot14 = 0.0
            if accounts1.objects.filter(acctype='Other Income', cid=cmp1):
                acc = accounts1.objects.filter(
                    acctype='Other Income', cid=cmp1)
                for i in acc:
                    tot14 = tot14 + i.balance
                context['account5'] = acc
        except:
            pass
        try:
            tot15 = 0.0
            if accounts.objects.filter(acctype='Other Income', cid=cmp1):
                acc = accounts.objects.filter(acctype='Other Income', cid=cmp1)
                for i in acc:
                    tot15 = tot15 + i.balance
                context['account6'] = acc
        except:
            pass
        totherincome = tot14 + tot15
        context['ot'] = totherincome
        try:
            tot16 = 0.0
            if accounts1.objects.filter(acctype='Expenses', cid=cmp1):
                acc = accounts1.objects.filter(acctype='Expenses', cid=cmp1)
                for i in acc:
                    tot16 = tot16 + i.balance
                context['account7'] = acc
        except:
            pass
        try:
            tot17 = 0.0
            if accounts.objects.filter(acctype='Expenses', cid=cmp1):
                acc = accounts.objects.filter(acctype='Expenses', cid=cmp1)
                for i in acc:
                    tot17 = tot17 + i.balance
                context['account8'] = acc
        except:
            pass
        texpences = tot16 + tot17
        context['tex'] = texpences
        try:
            tot18 = 0.0
            if accounts1.objects.filter(acctype='Other Expenses', cid=cmp1):
                acc = accounts1.objects.filter(
                    acctype='Other Expenses', cid=cmp1)
                for i in acc:
                    tot18 = tot18 + i.balance
                context['account9'] = acc
        except:
            pass
        try:
            tot19 = 0.0
            if accounts.objects.filter(acctype='Other Expenses', cid=cmp1):
                acc = accounts.objects.filter(
                    acctype='Other Expenses', cid=cmp1)
                for i in acc:
                    tot19 = tot19 + i.balance
                context['account10'] = acc
        except:
            pass
        toexpences = tot18 + tot19
        context['toex'] = toexpences
        print(texpences, toexpences)
        proandloss = ((grosprofit + totherincome) - (texpences + toexpences))
        context['prolo'] = proandloss
        return render(request, 'app1/profitandloss.html', context)
    except:
        return redirect('godash')


def profitandlossfiltered(request):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        context = {'cmp1': cmp1}
        toda = date.today()
        tod = toda.strftime("%Y-%m-%d")
        filmeth = request.POST['reportperiod']
        if filmeth == 'Today':
            fromdate = tod
            todate = tod
        elif filmeth == 'Custom':
            fromdate = request.POST['fper']
            todate = request.POST['tper']
        elif filmeth == 'This month':
            fromdate = toda.strftime("%Y-%m-01")
            todate = toda.strftime("%Y-%m-31")
        elif filmeth == 'This financial year':
            if int(toda.strftime("%m")) >= 1 and int(toda.strftime("%m")) <= 3:
                pyear = int(toda.strftime("%Y")) - 1
                fromdate = f'{pyear}-03-01'
                todate = f'{toda.strftime("%Y")}-03-31'
            else:
                pyear = int(toda.strftime("%Y")) + 1
                fromdate = f'{toda.strftime("%Y")}-03-01'
                todate = f'{pyear}-03-31'
        else:
            return redirect('profitandloss')

        totalama = 0.0
        bill = bills.objects.raw('select * from app1_bills where paymdate between %s and %s',
                                 [fromdate, todate, ])
        for i in bill:
            if i.cid == cmp1 and i.payornot == 'openbalance':
                totalama += float(i.grandtotal)

        context['askmyaccountant'] = totalama

        inventor = inventory.objects.filter(cid=cmp1)
        inventor1 = []
        for i in inventor:
            inventor1.append([i.name, i.cost])
        bundl = bundle.objects.filter(cid=cmp1)
        bundles = []
        bundlpro = []
        bundlqty = []
        bundlprice = []
        for i in bundl:
            bundles.append(i.name)
            bundlpro.append([i.product1, i.product2, i.product3, i.product4])
            bundlqty.append([i.qty1, i.qty2, i.qty3, i.qty4])
            bundlprice.append([i.price1, i.price2, i.price3, i.price4])
        try:
            invento = inventory.objects.filter(cid=cmp1)
            totalinventincome = 0.0
            inventor = []
            for i in invento:
                inventor.append(i.name)
            invoc = invoice.objects.raw('select * from app1_invoice where invoicedate between %s and %s',
                                        [fromdate, todate, ])
            for i in invoc:
                for j in inventor:
                    if i.cid == cmp1:
                        try:
                            if i.product == j:
                                totalinventincome += float(i.total)
                            elif bundle.objects.get(name=i.product, cid=cmp1):
                                for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                    if i.product == b:
                                        try:
                                            if j == bp[0]:
                                                totalcost = round(float(bprice[0]) * float(i.qty) * float(bq[0]), 2)
                                                totalinventincome += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[1]:
                                                totalcost = round(float(bprice[1]) * float(i.qty) * float(bq[1]), 2)
                                                totalinventincome += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[2]:
                                                totalcost = round(float(bprice[2]) * float(i.qty) * float(bq[2]), 2)
                                                totalinventincome += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[3]:
                                                totalcost = round(float(bprice[3]) * float(i.qty) * float(bq[3]), 2)
                                                totalinventincome += totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.product2 == j:
                                totalinventincome += float(i.total2)
                            elif bundle.objects.get(name=i.product2, cid=cmp1):
                                for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                    if i.product2 == b:
                                        try:
                                            if j == bp[0]:
                                                totalcost = round(float(bprice[0]) * float(i.qty2) * float(bq[0]), 2)
                                                totalinventincome += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[1]:
                                                totalcost = round(float(bprice[1]) * float(i.qty2) * float(bq[1]), 2)
                                                totalinventincome += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[2]:
                                                totalcost = round(float(bprice[2]) * float(i.qty2) * float(bq[2]), 2)
                                                totalinventincome += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[3]:
                                                totalcost = round(float(bprice[3]) * float(i.qty2) * float(bq[3]), 2)
                                                totalinventincome += totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.product3 == j:
                                totalinventincome += float(i.total3)
                            elif bundle.objects.get(name=i.product3, cid=cmp1):
                                for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                    if i.product3 == b:
                                        try:
                                            if j == bp[0]:
                                                totalcost = round(float(bprice[0]) * float(i.qty3) * float(bq[0]), 2)
                                                totalinventincome += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[1]:
                                                totalcost = round(float(bprice[1]) * float(i.qty3) * float(bq[1]), 2)
                                                totalinventincome += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[2]:
                                                totalcost = round(float(bprice[2]) * float(i.qty3) * float(bq[2]), 2)
                                                totalinventincome += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[3]:
                                                totalcost = round(float(bprice[3]) * float(i.qty3) * float(bq[3]), 2)
                                                totalinventincome += totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.product4 == j:
                                totalinventincome += float(i.total4)
                            elif bundle.objects.get(name=i.product4, cid=cmp1):
                                for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                    if i.product4 == b:
                                        try:
                                            if j == bp[0]:
                                                totalcost = round(float(bprice[0]) * float(i.qty4) * float(bq[0]), 2)
                                                totalinventincome += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[1]:
                                                totalcost = round(float(bprice[1]) * float(i.qty4) * float(bq[1]), 2)
                                                totalinventincome += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[2]:
                                                totalcost = round(float(bprice[2]) * float(i.qty4) * float(bq[2]), 2)
                                                totalinventincome += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[3]:
                                                totalcost = round(float(bprice[3]) * float(i.qty4) * float(bq[3]), 2)
                                                totalinventincome += totalcost
                                        except:
                                            pass
                        except:
                            pass
            creditnot = credit.objects.raw('select * from app1_credit where creditdate between %s and %s',
                                           [fromdate, todate, ])
            for i in creditnot:
                for j in inventor:
                    if i.cid == cmp1:
                        try:
                            if i.product == j:
                                totalinventincome -= float(i.total)
                            elif bundle.objects.get(name=i.product, cid=cmp1):
                                for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                    if i.product == b:
                                        try:
                                            if j == bp[0]:
                                                totalcost = round(float(bprice[0]) * float(i.qty) * float(bq[0]), 2)
                                                totalinventincome -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[1]:
                                                totalcost = round(float(bprice[1]) * float(i.qty) * float(bq[1]), 2)
                                                totalinventincome -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[2]:
                                                totalcost = round(float(bprice[2]) * float(i.qty) * float(bq[2]), 2)
                                                totalinventincome -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[3]:
                                                totalcost = round(float(bprice[3]) * float(i.qty) * float(bq[3]), 2)
                                                totalinventincome -= totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.product1 == j:
                                totalinventincome -= float(i.total1)
                            elif bundle.objects.get(name=i.product1, cid=cmp1):
                                for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                    if i.product1 == b:
                                        try:
                                            if j == bp[0]:
                                                totalcost = round(float(bprice[0]) * float(i.qty1) * float(bq[0]), 2)
                                                totalinventincome -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[1]:
                                                totalcost = round(float(bprice[1]) * float(i.qty1) * float(bq[1]), 2)
                                                totalinventincome -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[2]:
                                                totalcost = round(float(bprice[2]) * float(i.qty1) * float(bq[2]), 2)
                                                totalinventincome -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[3]:
                                                totalcost = round(float(bprice[3]) * float(i.qty1) * float(bq[3]), 2)
                                                totalinventincome -= totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.product2 == j:
                                totalinventincome -= float(i.total2)
                            elif bundle.objects.get(name=i.product2, cid=cmp1):
                                for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                    if i.product2 == b:
                                        try:
                                            if j == bp[0]:
                                                totalcost = round(float(bprice[0]) * float(i.qty2) * float(bq[0]), 2)
                                                totalinventincome -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[1]:
                                                totalcost = round(float(bprice[1]) * float(i.qty2) * float(bq[1]), 2)
                                                totalinventincome -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[2]:
                                                totalcost = round(float(bprice[2]) * float(i.qty2) * float(bq[2]), 2)
                                                totalinventincome -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[3]:
                                                totalcost = round(float(bprice[3]) * float(i.qty2) * float(bq[3]), 2)
                                                totalinventincome -= totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.product3 == j:
                                totalinventincome -= float(i.total3)
                            elif bundle.objects.get(name=i.product3, cid=cmp1):
                                for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                    if i.product3 == b:
                                        try:
                                            if j == bp[0]:
                                                totalcost = round(float(bprice[0]) * float(i.qty3) * float(bq[0]), 2)
                                                totalinventincome -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[1]:
                                                totalcost = round(float(bprice[1]) * float(i.qty3) * float(bq[1]), 2)
                                                totalinventincome -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[2]:
                                                totalcost = round(float(bprice[2]) * float(i.qty3) * float(bq[2]), 2)
                                                totalinventincome -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[3]:
                                                totalcost = round(float(bprice[3]) * float(i.qty3) * float(bq[3]), 2)
                                                totalinventincome -= totalcost
                                        except:
                                            pass
                        except:
                            pass
            salesrecpt = salesrecpts.objects.raw('select * from app1_salesrecpts where saledate between %s and %s',
                                                 [fromdate, todate, ])
            for i in salesrecpt:
                for j in inventor:
                    if i.cid == cmp1:
                        try:
                            if i.salepro == j:
                                totalinventincome += float(i.saaletotal)
                            elif bundle.objects.get(name=i.salepro, cid=cmp1):
                                for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                    if i.salepro == b:
                                        try:
                                            if j == bp[0]:
                                                totalcost = round(float(bprice[0]) * float(i.saleqty) * float(bq[0]), 2)
                                                totalinventincome += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[1]:
                                                totalcost = round(float(bprice[1]) * float(i.saleqty) * float(bq[1]), 2)
                                                totalinventincome += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[2]:
                                                totalcost = round(float(bprice[2]) * float(i.saleqty) * float(bq[2]), 2)
                                                totalinventincome += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[3]:
                                                totalcost = round(float(bprice[3]) * float(i.saleqty) * float(bq[3]), 2)
                                                totalinventincome += totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.category2 == j:
                                totalinventincome += float(i.cattotal2)
                            elif bundle.objects.get(name=i.category2, cid=cmp1):
                                for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                    if i.category2 == b:
                                        try:
                                            if j == bp[0]:
                                                totalcost = round(float(bprice[0]) * float(i.catqty2) * float(bq[0]), 2)
                                                totalinventincome += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[1]:
                                                totalcost = round(float(bprice[1]) * float(i.catqty2) * float(bq[1]), 2)
                                                totalinventincome += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[2]:
                                                totalcost = round(float(bprice[2]) * float(i.catqty2) * float(bq[2]), 2)
                                                totalinventincome += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[3]:
                                                totalcost = round(float(bprice[3]) * float(i.catqty2) * float(bq[3]), 2)
                                                totalinventincome += totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.category3 == j:
                                totalinventincome += float(i.cattotal3)
                            elif bundle.objects.get(name=i.category3, cid=cmp1):
                                for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                    if i.category3 == b:
                                        try:
                                            if j == bp[0]:
                                                totalcost = round(float(bprice[0]) * float(i.catqty3) * float(bq[0]), 2)
                                                totalinventincome += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[1]:
                                                totalcost = round(float(bprice[1]) * float(i.catqty3) * float(bq[1]), 2)
                                                totalinventincome += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[2]:
                                                totalcost = round(float(bprice[2]) * float(i.catqty3) * float(bq[2]), 2)
                                                totalinventincome += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[3]:
                                                totalcost = round(float(bprice[3]) * float(i.catqty3) * float(bq[3]), 2)
                                                totalinventincome += totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.category4 == j:
                                totalinventincome += float(i.cattotal4)
                            elif bundle.objects.get(name=i.category4, cid=cmp1):
                                for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                    if i.category4 == b:
                                        try:
                                            if j == bp[0]:
                                                totalcost = round(float(bprice[0]) * float(i.catqty4) * float(bq[0]), 2)
                                                totalinventincome += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[1]:
                                                totalcost = round(float(bprice[1]) * float(i.catqty4) * float(bq[1]), 2)
                                                totalinventincome += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[2]:
                                                totalcost = round(float(bprice[2]) * float(i.catqty4) * float(bq[2]), 2)
                                                totalinventincome += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[3]:
                                                totalcost = round(float(bprice[3]) * float(i.catqty4) * float(bq[3]), 2)
                                                totalinventincome += totalcost
                                        except:
                                            pass
                        except:
                            pass
        except:
            pass

        try:
            totalnoincome = 0.0
            noninvento = noninventory.objects.filter(cid=cmp1)
            noninventor = []
            for i in noninvento:
                noninventor.append(i.name)
            invoc = invoice.objects.raw('select * from app1_invoice where invoicedate between %s and %s',
                                        [fromdate, todate, ])
            for i in invoc:
                for j in noninventor:
                    if i.cid == cmp1:
                        try:
                            if i.product == j:
                                totalnoincome += float(i.total)
                            elif bundle.objects.get(name=i.product, cid=cmp1):
                                for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                    if i.product == b:
                                        try:
                                            if j == bp[0]:
                                                totalcost = round(float(bprice[0]) * float(i.qty) * float(bq[0]), 2)
                                                totalnoincome += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[1]:
                                                totalcost = round(float(bprice[1]) * float(i.qty) * float(bq[1]), 2)
                                                totalnoincome += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[2]:
                                                totalcost = round(float(bprice[2]) * float(i.qty) * float(bq[2]), 2)
                                                totalnoincome += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[3]:
                                                totalcost = round(float(bprice[3]) * float(i.qty) * float(bq[3]), 2)
                                                totalnoincome += totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.product2 == j:
                                totalnoincome += float(i.total2)
                            elif bundle.objects.get(name=i.product2, cid=cmp1):
                                for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                    if i.product2 == b:
                                        try:
                                            if j == bp[0]:
                                                totalcost = round(float(bprice[0]) * float(i.qty2) * float(bq[0]), 2)
                                                totalnoincome += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[1]:
                                                totalcost = round(float(bprice[1]) * float(i.qty2) * float(bq[1]), 2)
                                                totalnoincome += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[2]:
                                                totalcost = round(float(bprice[2]) * float(i.qty2) * float(bq[2]), 2)
                                                totalnoincome += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[3]:
                                                totalcost = round(float(bprice[3]) * float(i.qty2) * float(bq[3]), 2)
                                                totalnoincome += totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.product3 == j:
                                totalnoincome += float(i.total3)
                            elif bundle.objects.get(name=i.product3, cid=cmp1):
                                for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                    if i.product3 == b:
                                        try:
                                            if j == bp[0]:
                                                totalcost = round(float(bprice[0]) * float(i.qty3) * float(bq[0]), 2)
                                                totalnoincome += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[1]:
                                                totalcost = round(float(bprice[1]) * float(i.qty3) * float(bq[1]), 2)
                                                totalnoincome += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[2]:
                                                totalcost = round(float(bprice[2]) * float(i.qty3) * float(bq[2]), 2)
                                                totalnoincome += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[3]:
                                                totalcost = round(float(bprice[3]) * float(i.qty3) * float(bq[3]), 2)
                                                totalnoincome += totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.product4 == j:
                                totalnoincome += float(i.total4)
                            elif bundle.objects.get(name=i.product4, cid=cmp1):
                                for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                    if i.product4 == b:
                                        try:
                                            if j == bp[0]:
                                                totalcost = round(float(bprice[0]) * float(i.qty4) * float(bq[0]), 2)
                                                totalnoincome += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[1]:
                                                totalcost = round(float(bprice[1]) * float(i.qty4) * float(bq[1]), 2)
                                                totalnoincome += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[2]:
                                                totalcost = round(float(bprice[2]) * float(i.qty4) * float(bq[2]), 2)
                                                totalnoincome += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[3]:
                                                totalcost = round(float(bprice[3]) * float(i.qty4) * float(bq[3]), 2)
                                                totalnoincome += totalcost
                                        except:
                                            pass
                        except:
                            pass
            creditnot = credit.objects.raw('select * from app1_credit where creditdate between %s and %s',
                                           [fromdate, todate, ])
            for i in creditnot:
                for j in noninventor:
                    if i.cid == cmp1:
                        try:
                            if i.product == j:
                                totalnoincome -= float(i.total)
                            elif bundle.objects.get(name=i.product, cid=cmp1):
                                for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                    if i.product == b:
                                        try:
                                            if j == bp[0]:
                                                totalcost = round(float(bprice[0]) * float(i.qty) * float(bq[0]), 2)
                                                totalnoincome -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[1]:
                                                totalcost = round(float(bprice[1]) * float(i.qty) * float(bq[1]), 2)
                                                totalnoincome -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[2]:
                                                totalcost = round(float(bprice[2]) * float(i.qty) * float(bq[2]), 2)
                                                totalnoincome -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[3]:
                                                totalcost = round(float(bprice[3]) * float(i.qty) * float(bq[3]), 2)
                                                totalnoincome -= totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.product1 == j:
                                totalnoincome -= float(i.total1)
                            elif bundle.objects.get(name=i.product1, cid=cmp1):
                                for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                    if i.product1 == b:
                                        try:
                                            if j == bp[0]:
                                                totalcost = round(float(bprice[0]) * float(i.qty1) * float(bq[0]), 2)
                                                totalnoincome -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[1]:
                                                totalcost = round(float(bprice[1]) * float(i.qty1) * float(bq[1]), 2)
                                                totalnoincome -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[2]:
                                                totalcost = round(float(bprice[2]) * float(i.qty1) * float(bq[2]), 2)
                                                totalnoincome -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[3]:
                                                totalcost = round(float(bprice[3]) * float(i.qty1) * float(bq[3]), 2)
                                                totalnoincome -= totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.product2 == j:
                                totalnoincome -= float(i.total2)
                            elif bundle.objects.get(name=i.product2, cid=cmp1):
                                for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                    if i.product2 == b:
                                        try:
                                            if j == bp[0]:
                                                totalcost = round(float(bprice[0]) * float(i.qty2) * float(bq[0]), 2)
                                                totalnoincome -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[1]:
                                                totalcost = round(float(bprice[1]) * float(i.qty2) * float(bq[1]), 2)
                                                totalnoincome -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[2]:
                                                totalcost = round(float(bprice[2]) * float(i.qty2) * float(bq[2]), 2)
                                                totalnoincome -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[3]:
                                                totalcost = round(float(bprice[3]) * float(i.qty2) * float(bq[3]), 2)
                                                totalnoincome -= totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.product3 == j:
                                totalnoincome -= float(i.total3)
                            elif bundle.objects.get(name=i.product3, cid=cmp1):
                                for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                    if i.product3 == b:
                                        try:
                                            if j == bp[0]:
                                                totalcost = round(float(bprice[0]) * float(i.qty3) * float(bq[0]), 2)
                                                totalnoincome -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[1]:
                                                totalcost = round(float(bprice[1]) * float(i.qty3) * float(bq[1]), 2)
                                                totalnoincome -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[2]:
                                                totalcost = round(float(bprice[2]) * float(i.qty3) * float(bq[2]), 2)
                                                totalnoincome -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[3]:
                                                totalcost = round(float(bprice[3]) * float(i.qty3) * float(bq[3]), 2)
                                                totalnoincome -= totalcost
                                        except:
                                            pass
                        except:
                            pass
            salesrecpt = salesrecpts.objects.raw('select * from app1_salesrecpts where saledate between %s and %s',
                                                 [fromdate, todate, ])
            for i in salesrecpt:
                for j in noninventor:
                    if i.cid == cmp1:
                        try:
                            if i.salepro == j:
                                totalnoincome += float(i.saaletotal)
                            elif bundle.objects.get(name=i.salepro, cid=cmp1):
                                for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                    if i.salepro == b:
                                        try:
                                            if j == bp[0]:
                                                totalcost = round(float(bprice[0]) * float(i.saleqty) * float(bq[0]), 2)
                                                totalnoincome += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[1]:
                                                totalcost = round(float(bprice[1]) * float(i.saleqty) * float(bq[1]), 2)
                                                totalnoincome += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[2]:
                                                totalcost = round(float(bprice[2]) * float(i.saleqty) * float(bq[2]), 2)
                                                totalnoincome += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[3]:
                                                totalcost = round(float(bprice[3]) * float(i.saleqty) * float(bq[3]), 2)
                                                totalnoincome += totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.category2 == j:
                                totalnoincome += float(i.cattotal2)
                            elif bundle.objects.get(name=i.category2, cid=cmp1):
                                for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                    if i.category2 == b:
                                        try:
                                            if j == bp[0]:
                                                totalcost = round(float(bprice[0]) * float(i.catqty2) * float(bq[0]), 2)
                                                totalnoincome += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[1]:
                                                totalcost = round(float(bprice[1]) * float(i.catqty2) * float(bq[1]), 2)
                                                totalnoincome += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[2]:
                                                totalcost = round(float(bprice[2]) * float(i.catqty2) * float(bq[2]), 2)
                                                totalnoincome += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[3]:
                                                totalcost = round(float(bprice[3]) * float(i.catqty2) * float(bq[3]), 2)
                                                totalnoincome += totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.category3 == j:
                                totalnoincome += float(i.cattotal3)
                            elif bundle.objects.get(name=i.category3, cid=cmp1):
                                for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                    if i.category3 == b:
                                        try:
                                            if j == bp[0]:
                                                totalcost = round(float(bprice[0]) * float(i.catqty3) * float(bq[0]), 2)
                                                totalnoincome += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[1]:
                                                totalcost = round(float(bprice[1]) * float(i.catqty3) * float(bq[1]), 2)
                                                totalnoincome += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[2]:
                                                totalcost = round(float(bprice[2]) * float(i.catqty3) * float(bq[2]), 2)
                                                totalnoincome += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[3]:
                                                totalcost = round(float(bprice[3]) * float(i.catqty3) * float(bq[3]), 2)
                                                totalnoincome += totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.category4 == j:
                                totalnoincome += float(i.cattotal4)
                            elif bundle.objects.get(name=i.category4, cid=cmp1):
                                for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                    if i.category4 == b:
                                        try:
                                            if j == bp[0]:
                                                totalcost = round(float(bprice[0]) * float(i.catqty4) * float(bq[0]), 2)
                                                totalnoincome += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[1]:
                                                totalcost = round(float(bprice[1]) * float(i.catqty4) * float(bq[1]), 2)
                                                totalnoincome += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[2]:
                                                totalcost = round(float(bprice[2]) * float(i.catqty4) * float(bq[2]), 2)
                                                totalnoincome += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[3]:
                                                totalcost = round(float(bprice[3]) * float(i.catqty4) * float(bq[3]), 2)
                                                totalnoincome += totalcost
                                        except:
                                            pass
                        except:
                            pass
        except:
            pass

        try:
            totalinventexpence = 0.0
            invento = inventory.objects.filter(cid=cmp1)
            inventor = []
            for i in invento:
                inventor.append([i.name, i.cost])
            invoc = invoice.objects.raw('select * from app1_invoice where invoicedate between %s and %s',
                                        [fromdate, todate, ])
            for i in invoc:
                for j in inventor:
                    if i.cid == cmp1:
                        try:
                            if i.product == j[0]:
                                totalcost = round(
                                    float(j[1]) * float(i.qty), 2)
                                totalinventexpence += totalcost
                            elif bundle.objects.get(name=i.product, cid=cmp1):
                                for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                    if i.product == b:
                                        try:
                                            if j[0] == bp[0]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty) * float(bq[0]), 2)
                                                totalinventexpence += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[1]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty) * float(bq[1]), 2)
                                                totalinventexpence += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[2]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty) * float(bq[2]), 2)
                                                totalinventexpence += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[3]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty) * float(bq[3]), 2)
                                                totalinventexpence += totalcost
                                        except:
                                            pass
                                    else:
                                        pass
                        except:
                            pass
                        try:
                            if i.product2 == j[0]:
                                totalcost = round(
                                    float(j[1]) * float(i.qty2), 2)
                                totalinventexpence += totalcost
                            elif bundle.objects.get(name=i.product2, cid=cmp1):
                                for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                    if i.product2 == b:
                                        try:
                                            if j[0] == bp[0]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty2) * float(bq[0]), 2)
                                                totalinventexpence += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[1]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty2) * float(bq[1]), 2)
                                                totalinventexpence += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[2]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty2) * float(bq[2]), 2)
                                                totalinventexpence += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[3]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty2) * float(bq[3]), 2)
                                                totalinventexpence += totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.product3 == j[0]:
                                totalcost = round(
                                    float(j[1]) * float(i.qty3), 2)
                                totalinventexpence += totalcost
                            elif bundle.objects.get(name=i.product3, cid=cmp1):
                                for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                    if i.product3 == b:
                                        try:
                                            if j[0] == bp[0]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty3) * float(bq[0]), 2)
                                                totalinventexpence += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[1]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty3) * float(bq[1]), 2)
                                                totalinventexpence += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[2]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty3) * float(bq[2]), 2)
                                                totalinventexpence += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[3]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty3) * float(bq[3]), 2)
                                                totalinventexpence += totalcost
                                        except:
                                            pass
                                    else:
                                        pass
                        except:
                            pass
                        try:
                            if i.product4 == j[0]:
                                totalcost = round(
                                    float(j[1]) * float(i.qty4), 2)
                                totalinventexpence += totalcost
                            elif bundle.objects.get(name=i.product4, cid=cmp1):
                                for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                    if i.product4 == b:
                                        try:
                                            if j[0] == bp[0]:
                                                totalcost = round(float(j[1]) * float(i.qty4) * float(bq[0]), 2)
                                                totalinventexpence += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[1]:
                                                totalcost = round(float(j[1]) * float(i.qty4) * float(bq[1]), 2)
                                                totalinventexpence += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[2]:
                                                totalcost = round(float(j[1]) * float(i.qty4) * float(bq[2]), 2)
                                                totalinventexpence += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[3]:
                                                totalcost = round(float(j[1]) * float(i.qty4) * float(bq[3]), 2)
                                                totalinventexpence += totalcost
                                        except:
                                            pass
                                    else:
                                        pass
                        except:
                            pass
            creditnot = credit.objects.raw('select * from app1_credit where creditdate between %s and %s',
                                           [fromdate, todate, ])
            for i in creditnot:
                for j in inventor:
                    if i.cid == cmp1:
                        try:
                            if i.product == j[0]:
                                totalcost = round(
                                    float(j[1]) * float(i.qty), 2)
                                totalinventexpence -= totalcost
                            elif bundle.objects.get(name=i.product, cid=cmp1):
                                for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                    if i.product == b:
                                        try:
                                            if j[0] == bp[0]:
                                                totalcost = round(float(j[1]) * float(i.qty) * float(bq[0]), 2)
                                                totalinventexpence -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[1]:
                                                totalcost = round(float(j[1]) * float(i.qty) * float(bq[1]), 2)
                                                totalinventexpence -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[2]:
                                                totalcost = round(float(j[1]) * float(i.qty) * float(bq[2]), 2)
                                                totalinventexpence -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[3]:
                                                totalcost = round(float(j[1]) * float(i.qty) * float(bq[3]), 2)
                                                totalinventexpence -= totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.product1 == j[0]:
                                totalcost = round(
                                    float(j[1]) * float(i.qty1), 2)
                                totalinventexpence -= totalcost
                            elif bundle.objects.get(name=i.product1, cid=cmp1):
                                for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                    if i.product1 == b:
                                        try:
                                            if j[0] == bp[0]:
                                                totalcost = round(float(j[1]) * float(i.qty1) * float(bq[0]), 2)
                                                totalinventexpence -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[1]:
                                                totalcost = round(float(j[1]) * float(i.qty1) * float(bq[1]), 2)
                                                totalinventexpence -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[2]:
                                                totalcost = round(float(j[1]) * float(i.qty1) * float(bq[2]), 2)
                                                totalinventexpence -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[3]:
                                                totalcost = round(float(j[1]) * float(i.qty1) * float(bq[3]), 2)
                                                totalinventexpence -= totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.product2 == j[0]:
                                totalcost = round(
                                    float(j[1]) * float(i.qty2), 2)
                                totalinventexpence -= totalcost
                            elif bundle.objects.get(name=i.product2, cid=cmp1):
                                for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                    if i.product2 == b:
                                        try:
                                            if j[0] == bp[0]:
                                                totalcost = round(float(j[1]) * float(i.qty2) * float(bq[0]), 2)
                                                totalinventexpence -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[1]:
                                                totalcost = round(float(j[1]) * float(i.qty2) * float(bq[1]), 2)
                                                totalinventexpence -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[2]:
                                                totalcost = round(float(j[1]) * float(i.qty2) * float(bq[2]), 2)
                                                totalinventexpence -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[3]:
                                                totalcost = round(float(j[1]) * float(i.qty2) * float(bq[3]), 2)
                                                totalinventexpence -= totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.product3 == j[0]:
                                totalcost = round(
                                    float(j[1]) * float(i.qty3), 2)
                                totalinventexpence -= totalcost
                            elif bundle.objects.get(name=i.product3, cid=cmp1):
                                for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                    if i.product3 == b:
                                        try:
                                            if j[0] == bp[0]:
                                                totalcost = round(float(j[1]) * float(i.qty3) * float(bq[0]), 2)
                                                totalinventexpence -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[1]:
                                                totalcost = round(float(j[1]) * float(i.qty3) * float(bq[1]), 2)
                                                totalinventexpence -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[2]:
                                                totalcost = round(float(j[1]) * float(i.qty3) * float(bq[2]), 2)
                                                totalinventexpence -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[3]:
                                                totalcost = round(float(j[1]) * float(i.qty3) * float(bq[3]), 2)
                                                totalinventexpence -= totalcost
                                        except:
                                            pass
                        except:
                            pass
            salesrecpt = salesrecpts.objects.raw('select * from app1_salesrecpts where saledate between %s and %s',
                                                 [fromdate, todate, ])
            for i in salesrecpt:
                for j in inventor:
                    if i.cid == cmp1:
                        try:
                            if i.salepro == j[0]:
                                totalcost = round(
                                    float(j[1]) * float(i.saleqty), 2)
                                totalinventexpence += totalcost
                            elif bundle.objects.get(name=i.salepro, cid=cmp1):
                                for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                    if i.salepro == b:
                                        try:
                                            if j[0] == bp[0]:
                                                totalcost = round(float(j[1]) * float(i.saleqty) * float(bq[0]), 2)
                                                totalinventexpence += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[1]:
                                                totalcost = round(float(j[1]) * float(i.saleqty) * float(bq[1]), 2)
                                                totalinventexpence += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[2]:
                                                totalcost = round(float(j[1]) * float(i.saleqty) * float(bq[2]), 2)
                                                totalinventexpence += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[3]:
                                                totalcost = round(float(j[1]) * float(i.saleqty) * float(bq[3]), 2)
                                                totalinventexpence += totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.category2 == j[0]:
                                totalcost = round(
                                    float(j[1]) * float(i.catqty2), 2)
                                totalinventexpence += totalcost
                            elif bundle.objects.get(name=i.category2, cid=cmp1):
                                for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                    if i.category2 == b:
                                        try:
                                            if j[0] == bp[0]:
                                                totalcost = round(float(j[1]) * float(i.catqty2) * float(bq[0]), 2)
                                                totalinventexpence += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[1]:
                                                totalcost = round(float(j[1]) * float(i.catqty2) * float(bq[1]), 2)
                                                totalinventexpence += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[2]:
                                                totalcost = round(float(j[1]) * float(i.catqty2) * float(bq[2]), 2)
                                                totalinventexpence += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[3]:
                                                totalcost = round(float(j[1]) * float(i.catqty2) * float(bq[3]), 2)
                                                totalinventexpence += totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.category3 == j[0]:
                                totalcost = round(
                                    float(j[1]) * float(i.catqty3), 2)
                                totalinventexpence += totalcost
                            elif bundle.objects.get(name=i.category3, cid=cmp1):
                                for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                    if i.category3 == b:
                                        try:
                                            if j[0] == bp[0]:
                                                totalcost = round(float(j[1]) * float(i.catqty3) * float(bq[0]), 2)
                                                totalinventexpence += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[1]:
                                                totalcost = round(float(j[1]) * float(i.catqty3) * float(bq[1]), 2)
                                                totalinventexpence += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[2]:
                                                totalcost = round(float(j[1]) * float(i.catqty3) * float(bq[2]), 2)
                                                totalinventexpence += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[3]:
                                                totalcost = round(float(j[1]) * float(i.catqty3) * float(bq[3]), 2)
                                                totalinventexpence += totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.category4 == j[0]:
                                totalcost = round(
                                    float(j[1]) * float(i.catqty4), 2)
                                totalinventexpence += totalcost
                            elif bundle.objects.get(name=i.category4, cid=cmp1):
                                for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                    if i.category4 == b:
                                        try:
                                            if j[0] == bp[0]:
                                                totalcost = round(float(j[1]) * float(i.catqty4) * float(bq[0]), 2)
                                                totalinventexpence += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[1]:
                                                totalcost = round(float(j[1]) * float(i.catqty4) * float(bq[1]), 2)
                                                totalinventexpence += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[2]:
                                                totalcost = round(float(j[1]) * float(i.catqty4) * float(bq[2]), 2)
                                                totalinventexpence += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[3]:
                                                totalcost = round(float(j[1]) * float(i.catqty4) * float(bq[3]), 2)
                                                totalinventexpence += totalcost
                                        except:
                                            pass
                        except:
                            pass
        except:
            pass
        try:
            totalnonexpence = 0.0
            noninvento = noninventory.objects.filter(cid=cmp1)
            noninventor = []
            for i in noninvento:
                noninventor.append(i.name)
            expen = expences.objects.raw('select * from app1_expences where paymdate between %s and %s',
                                         [fromdate, todate, ])
            for i in expen:
                for j in noninventor:
                    if i.cid == cmp1:
                        try:
                            if i.product == j:
                                totalnonexpence += float(i.total)
                        except:
                            pass
                        try:
                            if i.product2 == j:
                                totalnonexpence += float(i.total2)
                        except:
                            pass
                        try:
                            if i.product3 == j:
                                totalnonexpence += float(i.total3)
                        except:
                            pass
                        try:
                            if i.product4 == j:
                                totalnonexpence += float(i.total4)
                        except:
                            pass
            debi = suplrcredit.objects.raw('select * from app1_suplrcredit where paymdate between %s and %s',
                                           [fromdate, todate, ])
            for i in debi:
                for j in noninventor:
                    if i.cid == cmp1:
                        try:
                            if i.product == j:
                                totalnonexpence -= float(i.total)
                        except:
                            pass
                        try:
                            if i.product2 == j:
                                totalnonexpence -= float(i.total2)
                        except:
                            pass
                        try:
                            if i.product3 == j:
                                totalnonexpence -= float(i.total3)
                        except:
                            pass
                        try:
                            if i.product4 == j:
                                totalnonexpence -= float(i.total4)
                        except:
                            pass
        except:
            pass
        context['totalincome'] = (totalinventincome + totalnoincome)
        context['costofgoods'] = totalinventexpence
        totalnonexpences = totalnonexpence + totalama
        context['totaloexpense'] = totalnonexpences
        grosprofit = (totalinventincome + totalnoincome) - totalinventexpence
        context['gropro'] = grosprofit
        profandloss = ((totalinventincome + totalnoincome) - totalinventexpence) - (totalnonexpence + totalama)
        context['proanloss'] = profandloss
        return render(request, 'app1/profitandlossfilter.html', context)
    except:
        return redirect('profitandloss')


@login_required(login_url='regcomp')
def accreceivables(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        inv = invoice.objects.filter(cid=cmp1).values(
            'customername').annotate(t1=Sum('baldue'))
        cre = credit.objects.filter(cid=cmp1).values(
            'customer').annotate(t1=Coalesce(Sum('grndtot'), 0))
        tot = invoice.objects.filter(
            cid=cmp1).all().aggregate(t2=Sum('baldue'))
        tot1 = credit.objects.filter(
            cid=cmp1).all().aggregate(t2=Sum('grndtot'))
        context = {'invoice': inv, 'cmp1': cmp1,
                   'tot': tot, 'tot1': tot1, 'cre': cre}
        return render(request, 'app1/accreceivables.html', context)
    except:
        return redirect('godash')


@login_required(login_url='regcomp')
def accreceivables1(request):
    try:
        toda = date.today()
        tod = toda.strftime("%Y-%m-%d")
        filmeth = request.POST['reportperiod']
        if filmeth == 'Today':
            fromdate = tod
            todate = tod
        elif filmeth == 'Custom':
            fromdate = request.POST['fper']
            todate = request.POST['tper']
        elif filmeth == 'This month':
            fromdate = toda.strftime("%Y-%m-01")
            todate = toda.strftime("%Y-%m-31")
        elif filmeth == 'This financial year':
            if int(toda.strftime("%m")) >= 1 and int(toda.strftime("%m")) <= 3:
                pyear = int(toda.strftime("%Y")) - 1
                fromdate = f'{pyear}-03-01'
                todate = f'{toda.strftime("%Y")}-03-31'
            else:
                pyear = int(toda.strftime("%Y")) + 1
                fromdate = f'{toda.strftime("%Y")}-03-01'
                todate = f'{pyear}-03-31'
        else:
            return redirect('accreceivables')
        cmp1 = company.objects.get(id=request.session["uid"])
        inv = invoice.objects.filter(cid=cmp1, invoicedate__gte=fromdate, invoicedate__lte=todate).values(
            'customername').annotate(t1=Sum('baldue'))
        cre = credit.objects.filter(cid=cmp1, creditdate__gte=fromdate, creditdate__lte=todate).values(
            'customer').annotate(t1=Coalesce(Sum('grndtot'), 0))
        tot = invoice.objects.filter(cid=cmp1, invoicedate__gte=fromdate, invoicedate__lte=todate).aggregate(
            t2=Sum('baldue'))
        tot1 = credit.objects.filter(cid=cmp1, creditdate__gte=fromdate, creditdate__lte=todate).aggregate(
            t2=Sum('grndtot'))
        context = {'invoice': inv, 'cmp1': cmp1,
                   'tot': tot, 'tot1': tot1, 'cre': cre}
        return render(request, 'app1/accreceivables.html', context)
    except:
        return redirect('accreceivables')


@login_required(login_url='regcomp')
def accpayables(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        ex = expences.objects.filter(cid=cmp1).values(
            'payee').annotate(t1=Sum('grandtotal'))
        cre = suplrcredit.objects.filter(cid=cmp1).values(
            'supplier').annotate(t1=Sum('creditamount'))
        op = bills.objects.filter(cid=cmp1, payornot='openbalance').values(
            'payee').annotate(t1=Sum('grandtotal'))
        bi = bills.objects.filter(cid=cmp1, payornot='debit').values(
            'payee').annotate(t1=Sum('grandtotal'))
        bi1 = bills.objects.filter(cid=cmp1, payornot='').values(
            'payee').annotate(t1=Sum('grandtotal'))
        tot = expences.objects.filter(
            cid=cmp1).all().aggregate(t2=Sum('grandtotal'))
        tot1 = suplrcredit.objects.filter(
            cid=cmp1).all().aggregate(t2=Sum('creditamount'))
        tot2 = bills.objects.filter(
            cid=cmp1, payornot='debit').all().aggregate(t2=Sum('grandtotal'))
        tot3 = bills.objects.filter(
            cid=cmp1, payornot='').all().aggregate(t2=Sum('grandtotal'))
        tot4 = bills.objects.filter(
            cid=cmp1, payornot='openbalance').all().aggregate(t2=Sum('grandtotal'))
        context = {'expence': ex, 'cmp1': cmp1, 'tot': tot, 'tot1': tot1, 'cre': cre, 'op': op, 'bi': bi, 'bi1': bi1,
                   'tot2': tot2, 'tot3': tot3, 'tot4': tot4}
        return render(request, 'app1/accpayables.html', context)
    except:
        return redirect('godash')


@login_required(login_url='regcomp')
def accpayables1(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        toda = date.today()
        tod = toda.strftime("%Y-%m-%d")
        filmeth = request.POST['reportperiod']
        if filmeth == 'Today':
            fromdate = tod
            todate = tod
        elif filmeth == 'Custom':
            fromdate = request.POST['fper']
            todate = request.POST['tper']
        elif filmeth == 'This month':
            fromdate = toda.strftime("%Y-%m-01")
            todate = toda.strftime("%Y-%m-31")
        elif filmeth == 'This financial year':
            if int(toda.strftime("%m")) >= 1 and int(toda.strftime("%m")) <= 3:
                pyear = int(toda.strftime("%Y")) - 1
                fromdate = f'{pyear}-03-01'
                todate = f'{toda.strftime("%Y")}-03-31'
            else:
                pyear = int(toda.strftime("%Y")) + 1
                fromdate = f'{toda.strftime("%Y")}-03-01'
                todate = f'{pyear}-03-31'
        else:
            return redirect('accpayables')
        ex = expences.objects.filter(cid=cmp1, paymdate__gte=fromdate, paymdate__lte=todate).values('payee').annotate(
            t1=Sum('grandtotal'))
        cre = suplrcredit.objects.filter(cid=cmp1, paymdate__gte=fromdate, paymdate__lte=todate).values(
            'supplier').annotate(t1=Sum('creditamount'))
        op = bills.objects.filter(cid=cmp1, payornot='openbalance', paymdate__gte=fromdate,
                                  paymdate__lte=todate).values('payee').annotate(t1=Sum('grandtotal'))
        bi = bills.objects.filter(cid=cmp1, payornot='debit', paymdate__gte=fromdate, paymdate__lte=todate).values(
            'payee').annotate(t1=Sum('grandtotal'))
        bi1 = bills.objects.filter(cid=cmp1, payornot='', paymdate__gte=fromdate, paymdate__lte=todate).values(
            'payee').annotate(t1=Sum('grandtotal'))
        tot = expences.objects.filter(cid=cmp1, paymdate__gte=fromdate, paymdate__lte=todate).aggregate(
            t2=Sum('grandtotal'))
        tot1 = suplrcredit.objects.filter(cid=cmp1, paymdate__gte=fromdate, paymdate__lte=todate).aggregate(
            t2=Sum('creditamount'))
        tot2 = bills.objects.filter(cid=cmp1, payornot='debit', paymdate__gte=fromdate, paymdate__lte=todate).aggregate(
            t2=Sum('grandtotal'))
        tot3 = bills.objects.filter(cid=cmp1, payornot='', paymdate__gte=fromdate, paymdate__lte=todate).aggregate(
            t2=Sum('grandtotal'))
        tot4 = bills.objects.filter(cid=cmp1, payornot='openbalance', paymdate__gte=fromdate,
                                    paymdate__lte=todate).aggregate(t2=Sum('grandtotal'))
        context = {'expence': ex, 'cmp1': cmp1, 'tot': tot, 'tot1': tot1, 'cre': cre, 'op': op, 'bi': bi, 'bi1': bi1,
                   'tot2': tot2, 'tot3': tot3, 'tot4': tot4}
        return render(request, 'app1/accpayables.html', context)
    except:
        return redirect('accpayables')


def customisereport(request):
    return render(request, 'app1/customisereport.html')


@login_required(login_url='regcomp')
def customisereport(request):
    cmp1 = company.objects.get(id=request.session['uid'])
    return render(request, 'app1/customisereport.html', {'cmp1': cmp1})


@login_required(login_url='regcomp')
def runreport(request, accounts1id):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        account = accounts1.objects.get(accounts1id=accounts1id, cid=cmp1)
        bal = account.balance
        context = {'cmp1': cmp1, 'account': account, 'accbal': bal}
        if account.name == 'Account Receivable(Debtors)':
            invoic = invoice.objects.filter(cid=cmp1)
            creditnote = credit.objects.filter(cid=cmp1)
            paymen = payment.objects.filter(cid=cmp1)
            salesofline = salesrecpts.objects.filter(cid=cmp1)
            context = {'cmp1': cmp1, 'invoic': invoic, 'creditnote': creditnote, 'salesoffline': salesofline,
                       'payment': paymen, 'account': account,
                       'accbal': bal}
        elif account.name == 'Accounts Payable(Creditors)':
            bill = bills.objects.filter(cid=cmp1, payornot='openbalance')
            bill2 = bills.objects.filter(cid=cmp1, payornot='')
            bill3 = bills.objects.filter(cid=cmp1, payornot='debit')
            debit = suplrcredit.objects.filter(cid=cmp1)
            expence = expences.objects.filter(cid=cmp1)
            context = {'cmp1': cmp1, 'bill': bill, 'bill2': bill2, 'billdebit': bill3, 'debit': debit,
                       'expence': expence,
                       'account': account,
                       'accbal': bal}
        elif account.name == 'Input CGST':
            deb = suplrcredit.objects.filter(cid=cmp1)
            debit = []
            for i in deb:
                name = i.supplier
                x = name.split()
                if len(x) == 3:
                    firstname = x[0]
                    lastname = x[1] + ' ' + x[2]
                    supp = supplier.objects.get(
                        firstname=firstname, lastname=lastname, cid=cmp1)
                else:
                    supp = supplier.objects.get(
                        firstname=x[0], lastname=x[1], cid=cmp1)
                if supp.state == cmp1.state:
                    debit.append(
                        [i.paymdate, i.refno, i.supplier, float(i.taxamount) / 2])
            expen = expences.objects.filter(cid=cmp1)
            expence = []
            for i in expen:
                name = i.payee
                x = name.split()
                if len(x) == 3:
                    firstname = x[0]
                    lastname = x[1] + ' ' + x[2]
                    supp = supplier.objects.get(
                        firstname=firstname, lastname=lastname, cid=cmp1)
                else:
                    supp = supplier.objects.get(
                        firstname=x[0], lastname=x[1], cid=cmp1)
                if supp.state == cmp1.state:
                    expence.append([i.paymdate, i.refno, (i.payee).replace(
                        u'\xa0', u''), float(i.taxamount) / 2])
            context = {'cmp1': cmp1, 'debit1': debit,
                       'expence1': expence, 'account': account, 'accbal': bal}
        elif account.name == 'Input SGST':
            deb = suplrcredit.objects.filter(cid=cmp1)
            debit = []
            for i in deb:
                name = i.supplier
                x = name.split()
                if len(x) == 3:
                    firstname = x[0]
                    lastname = x[1] + ' ' + x[2]
                    supp = supplier.objects.get(
                        firstname=firstname, lastname=lastname, cid=cmp1)
                else:
                    supp = supplier.objects.get(
                        firstname=x[0], lastname=x[1], cid=cmp1)
                if supp.state == cmp1.state:
                    debit.append(
                        [i.paymdate, i.refno, i.supplier, float(i.taxamount) / 2])
            expen = expences.objects.filter(cid=cmp1)
            expence = []
            for i in expen:
                name = i.payee
                x = name.split()
                if len(x) == 3:
                    firstname = x[0]
                    lastname = x[1] + ' ' + x[2]
                    supp = supplier.objects.get(
                        firstname=firstname, lastname=lastname, cid=cmp1)
                else:
                    supp = supplier.objects.get(
                        firstname=x[0], lastname=x[1], cid=cmp1)
                if supp.state == cmp1.state:
                    expence.append([i.paymdate, i.refno, (i.payee).replace(
                        u'\xa0', u''), float(i.taxamount) / 2])
            context = {'cmp1': cmp1, 'debit2': debit,
                       'expence2': expence, 'account': account, 'accbal': bal}
        elif account.name == 'Input IGST':
            deb = suplrcredit.objects.filter(cid=cmp1)
            debit = []
            for i in deb:
                name = i.supplier
                x = name.split()
                if len(x) == 3:
                    firstname = x[0]
                    lastname = x[1] + ' ' + x[2]
                    supp = supplier.objects.get(
                        firstname=firstname, lastname=lastname, cid=cmp1)
                else:
                    supp = supplier.objects.get(
                        firstname=x[0], lastname=x[1], cid=cmp1)
                if supp.state != cmp1.state:
                    debit.append(
                        [i.paymdate, i.refno, i.supplier, float(i.taxamount)])
            expen = expences.objects.filter(cid=cmp1)
            expence = []
            for i in expen:
                name = i.payee
                x = name.split()
                if len(x) == 3:
                    firstname = x[0]
                    lastname = x[1] + ' ' + x[2]
                    supp = supplier.objects.get(
                        firstname=firstname, lastname=lastname, cid=cmp1)
                else:
                    supp = supplier.objects.get(
                        firstname=x[0], lastname=x[1], cid=cmp1)
                if supp.state != cmp1.state:
                    expence.append([i.paymdate, i.refno, (i.payee).replace(
                        u'\xa0', u''), float(i.taxamount)])
            context = {'cmp1': cmp1, 'debit3': debit,
                       'expence3': expence, 'account': account, 'accbal': bal}
        elif account.name == 'Output CGST':
            invoi = invoice.objects.filter(cid=cmp1)
            invoic = []
            for i in invoi:
                if i.placosupply == cmp1.state:
                    invoic.append(
                        [i.invoicedate, i.invoiceno, (i.customername).replace(u'\xa0', u''), float(i.taxamount) / 2])
            creditnot = credit.objects.filter(cid=cmp1)
            creditnote = []
            for i in creditnot:
                if i.place == cmp1.state:
                    creditnote.append(
                        [i.creditdate, i.creditno, (i.customer).replace(u'\xa0', u''), float(i.taxamnt) / 2])
            salesrcpt = salesrecpts.objects.filter(cid=cmp1)
            salesrecipt = []
            for i in salesrcpt:
                if i.salesplace == cmp1.state:
                    salesrecipt.append(
                        [i.saledate, i.saleno, (i.salename).replace(u'\xa0', u''), float(i.saletaxamount) / 2])
            context = {'cmp1': cmp1, 'invoic1': invoic, 'creditnote1': creditnote, 'salesrecipt1': salesrecipt,
                       'account': account, 'accbal': bal}
        elif account.name == 'Output SGST':
            invoi = invoice.objects.filter(cid=cmp1)
            invoic = []
            for i in invoi:
                if i.placosupply == cmp1.state:
                    invoic.append(
                        [i.invoicedate, i.invoiceno, (i.customername).replace(u'\xa0', u''), float(i.taxamount) / 2])
            creditnot = credit.objects.filter(cid=cmp1)
            creditnote = []
            for i in creditnot:
                if i.place == cmp1.state:
                    creditnote.append(
                        [i.creditdate, i.creditno, (i.customer).replace(u'\xa0', u''), float(i.taxamnt) / 2])
            salesrcpt = salesrecpts.objects.filter(cid=cmp1)
            salesrecipt = []
            for i in salesrcpt:
                if i.salesplace == cmp1.state:
                    salesrecipt.append(
                        [i.saledate, i.saleno, (i.salename).replace(u'\xa0', u''), float(i.saletaxamount) / 2])
            context = {'cmp1': cmp1, 'invoic2': invoic, 'creditnote2': creditnote, 'salesrecipt2': salesrecipt,
                       'account': account, 'accbal': bal}
        elif account.name == 'Output IGST':
            invoi = invoice.objects.filter(cid=cmp1)
            invoic = []
            for i in invoi:
                if i.placosupply != cmp1.state:
                    invoic.append(
                        [i.invoicedate, i.invoiceno, (i.customername).replace(u'\xa0', u''), float(i.taxamount)])
            creditnot = credit.objects.filter(cid=cmp1)
            creditnote = []
            for i in creditnot:
                if i.place != cmp1.state:
                    creditnote.append(
                        [i.creditdate, i.creditno, (i.customer).replace(u'\xa0', u''), float(i.taxamnt)])
            salesrcpt = salesrecpts.objects.filter(cid=cmp1)
            salesrecipt = []
            for i in salesrcpt:
                if i.salesplace != cmp1.state:
                    salesrecipt.append(
                        [i.saledate, i.saleno, (i.salename).replace(u'\xa0', u''), float(i.saletaxamount)])
            context = {'cmp1': cmp1, 'invoic3': invoic, 'creditnote3': creditnote, 'salesrecipt3': salesrecipt,
                       'account': account, 'accbal': bal}
        elif account.name == 'Opening Balance Equity':
            inventori = inventory.objects.filter(cid=cmp1)
            account1 = accounts.objects.filter(cid=cmp1)
            context = {'cmp1': cmp1, 'account': account,
                       'inventory': inventori, 'accbal': bal, 'account1': account1}
        elif account.name == 'Ask My Accountant':
            bill = bills.objects.filter(cid=cmp1, payornot='openbalance')
            context = {'cmp1': cmp1, 'account': account,
                       'bill3': bill, 'accbal': account.balance}
        else:
            context = {'cmp1': cmp1, 'account': account,
                       'accbal': account.balance}
            if inventory.objects.filter(invacnt=account.name, cid=cmp1):
                total = 0.0
                invento = inventory.objects.filter(invacnt=account.name, cid=cmp1)
                inventor = []
                inventor1 = []
                for i in invento:
                    inventor.append([i.date, i.cxq])
                    inventor1.append([i.name, i.cost])
                bundl = bundle.objects.filter(cid=cmp1)
                bundles = []
                bundlpro = []
                bundlqty = []
                for i in bundl:
                    bundles.append(i.name)
                    bundlpro.append(
                        [i.product1, i.product2, i.product3, i.product4])
                    bundlqty.append([i.qty1, i.qty2, i.qty3, i.qty4])
                invoc = invoice.objects.filter(cid=cmp1)
                invoic = []
                for i in invoc:
                    invotot = 0.0
                    for j in inventor1:
                        try:
                            if i.product == j[0]:
                                totalcost = round(float(j[1]) * float(i.qty), 2)
                                invotot += totalcost
                            elif bundle.objects.get(name=i.product, cid=cmp1):
                                for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                    if i.product == b:
                                        try:
                                            if j[0] == bp[0]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty) * float(bq[0]), 2)
                                                invotot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[1]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty) * float(bq[1]), 2)
                                                invotot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[2]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty) * float(bq[2]), 2)
                                                invotot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[3]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty) * float(bq[3]), 2)
                                                invotot += totalcost
                                        except:
                                            pass
                                    else:
                                        pass
                        except:
                            pass
                        try:
                            if i.product2 == j[0]:
                                totalcost = round(
                                    float(j[1]) * float(i.qty2), 2)
                                invotot += totalcost
                            elif bundle.objects.get(name=i.product2, cid=cmp1):
                                for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                    if i.product2 == b:
                                        try:
                                            if j[0] == bp[0]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty2) * float(bq[0]), 2)
                                                invotot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[1]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty2) * float(bq[1]), 2)
                                                invotot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[2]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty2) * float(bq[2]), 2)
                                                invotot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[3]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty2) * float(bq[3]), 2)
                                                invotot += totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.product3 == j[0]:
                                totalcost = round(
                                    float(j[1]) * float(i.qty3), 2)
                                invotot += totalcost
                            elif bundle.objects.get(name=i.product3, cid=cmp1):
                                for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                    if i.product3 == b:
                                        try:
                                            if j[0] == bp[0]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty3) * float(bq[0]), 2)
                                                invotot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[1]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty3) * float(bq[1]), 2)
                                                invotot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[2]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty3) * float(bq[2]), 2)
                                                invotot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[3]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty3) * float(bq[3]), 2)
                                                invotot += totalcost
                                        except:
                                            pass
                                    else:
                                        pass
                        except:
                            pass
                        try:
                            if i.product4 == j[0]:
                                totalcost = round(
                                    float(j[1]) * float(i.qty4), 2)
                                invotot += totalcost
                            elif bundle.objects.get(name=i.product4, cid=cmp1):
                                for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                    if i.product4 == b:
                                        try:
                                            if j[0] == bp[0]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty4) * float(bq[0]), 2)
                                                invotot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[1]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty4) * float(bq[1]), 2)
                                                invotot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[2]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty4) * float(bq[2]), 2)
                                                invotot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[3]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty4) * float(bq[3]), 2)
                                                invotot += totalcost
                                        except:
                                            pass
                                    else:
                                        pass
                        except:
                            pass
                    invoic.append(
                        [i.invoicedate, i.invoiceno, (i.customername).replace(u'\xa0', u''), invotot])
                context['invoice5'] = invoic
                creditnot = credit.objects.filter(cid=cmp1)
                creditnote5 = []
                for i in creditnot:
                    credtot = 0.0
                    for j in inventor1:
                        try:
                            if i.product == j[0]:
                                totalcost = round(
                                    float(j[1]) * float(i.qty), 2)
                                credtot += totalcost
                            elif bundle.objects.get(name=i.product, cid=cmp1):
                                for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                    if i.product == b:
                                        try:
                                            if j[0] == bp[0]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty) * float(bq[0]), 2)
                                                credtot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[1]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty) * float(bq[1]), 2)
                                                credtot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[2]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty) * float(bq[2]), 2)
                                                credtot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[3]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty) * float(bq[3]), 2)
                                                credtot += totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.product1 == j[0]:
                                totalcost = round(
                                    float(j[1]) * float(i.qty1), 2)
                                credtot += totalcost
                            elif bundle.objects.get(name=i.product1, cid=cmp1):
                                for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                    if i.product1 == b:
                                        try:
                                            if j[0] == bp[0]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty1) * float(bq[0]), 2)
                                                credtot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[1]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty1) * float(bq[1]), 2)
                                                credtot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[2]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty1) * float(bq[2]), 2)
                                                credtot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[3]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty1) * float(bq[3]), 2)
                                                credtot += totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.product2 == j[0]:
                                totalcost = round(
                                    float(j[1]) * float(i.qty2), 2)
                                credtot += totalcost
                            elif bundle.objects.get(name=i.product2, cid=cmp1):
                                for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                    if i.product2 == b:
                                        try:
                                            if j[0] == bp[0]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty2) * float(bq[0]), 2)
                                                credtot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[1]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty2) * float(bq[1]), 2)
                                                credtot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[2]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty2) * float(bq[2]), 2)
                                                credtot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[3]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty2) * float(bq[3]), 2)
                                                credtot += totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.product3 == j[0]:
                                totalcost = round(
                                    float(j[1]) * float(i.qty3), 2)
                                credtot += totalcost
                            elif bundle.objects.get(name=i.product3, cid=cmp1):
                                for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                    if i.product3 == b:
                                        try:
                                            if j[0] == bp[0]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty3) * float(bq[0]), 2)
                                                credtot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[1]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty3) * float(bq[1]), 2)
                                                credtot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[2]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty3) * float(bq[2]), 2)
                                                credtot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[3]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty3) * float(bq[3]), 2)
                                                credtot += totalcost
                                        except:
                                            pass
                        except:
                            pass
                    creditnote5.append(
                        [i.creditdate, i.creditno, (i.customer).replace(u'\xa0', u''), credtot])
                context['creditnote5'] = creditnote5

                salesrecpt = salesrecpts.objects.filter(cid=cmp1)
                salesrecipt5 = []
                for i in salesrecpt:
                    saletot = 0.0
                    for j in inventor1:
                        try:
                            if i.salepro == j[0]:
                                totalcost = round(
                                    float(j[1]) * float(i.saleqty), 2)
                                saletot += totalcost
                            elif bundle.objects.get(name=i.salepro, cid=cmp1):
                                for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                    if i.salepro == b:
                                        try:
                                            if j[0] == bp[0]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.saleqty) * float(bq[0]), 2)
                                                saletot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[1]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.saleqty) * float(bq[1]), 2)
                                                saletot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[2]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.saleqty) * float(bq[2]), 2)
                                                saletot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[3]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.saleqty) * float(bq[3]), 2)
                                                saletot += totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.category2 == j[0]:
                                totalcost = round(
                                    float(j[1]) * float(i.catqty2), 2)
                                saletot += totalcost
                            elif bundle.objects.get(name=i.category2, cid=cmp1):
                                for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                    if i.category2 == b:
                                        try:
                                            if j[0] == bp[0]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.catqty2) * float(bq[0]), 2)
                                                saletot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[1]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.catqty2) * float(bq[1]), 2)
                                                saletot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[2]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.catqty2) * float(bq[2]), 2)
                                                saletot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[3]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.catqty2) * float(bq[3]), 2)
                                                saletot += totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.category3 == j[0]:
                                totalcost = round(
                                    float(j[1]) * float(i.catqty3), 2)
                                saletot += totalcost
                            elif bundle.objects.get(name=i.category3, cid=cmp1):
                                for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                    if i.category3 == b:
                                        try:
                                            if j[0] == bp[0]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.catqty3) * float(bq[0]), 2)
                                                saletot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[1]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.catqty3) * float(bq[1]), 2)
                                                saletot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[2]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.catqty3) * float(bq[2]), 2)
                                                saletot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[3]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.catqty3) * float(bq[3]), 2)
                                                saletot += totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.category4 == j[0]:
                                totalcost = round(float(j[1]) * float(i.catqty4), 2)
                                saletot += totalcost
                            elif bundle.objects.get(name=i.category4, cid=cmp1):
                                for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                    if i.category4 == b:
                                        try:
                                            if j[0] == bp[0]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.catqty4) * float(bq[0]), 2)
                                                saletot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[1]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.catqty4) * float(bq[1]), 2)
                                                saletot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[2]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.catqty4) * float(bq[2]), 2)
                                                saletot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[3]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.catqty4) * float(bq[3]), 2)
                                                saletot += totalcost
                                        except:
                                            pass
                        except:
                            pass
                    salesrecipt5.append(
                        [i.saledate, i.saleno, (i.salename).replace(u'\xa0', u''), saletot])
                context['salesrecipt5'] = salesrecipt5
                expen = expences.objects.filter(cid=cmp1)
                expence = []
                for i in expen:
                    for j in inventor1:
                        if i.product == j[0]:
                            totalcost = round(float(i.price) * float(i.qty), 2)
                            expence.append(
                                [i.paymdate, i.refno, (i.payee).replace(u'\xa0', u''), totalcost])

                        try:
                            if i.product2 == j[0]:
                                totalcost = round(
                                    float(i.price2) * float(i.qty2), 2)
                                expence.append(
                                    [i.paymdate, i.refno, (i.payee).replace(u'\xa0', u''), totalcost])
                        except:
                            pass
                        try:
                            if i.product3 == j[0]:
                                totalcost = round(
                                    float(i.price3) * float(i.qty3), 2)
                                expence.append(
                                    [i.paymdate, i.refno, (i.payee).replace(u'\xa0', u''), totalcost])
                        except:
                            pass
                        try:
                            if i.product4 == j[0]:
                                totalcost = round(
                                    float(i.price4) * float(i.qty4), 2)
                                expence.append(
                                    [i.paymdate, i.refno, (i.payee).replace(u'\xa0', u''), totalcost])
                        except:
                            pass
                context['expence6'] = expence
                debi = suplrcredit.objects.filter(cid=cmp1)
                debit = []
                for i in debi:
                    for j in inventor1:
                        try:
                            if i.product == j[0]:
                                totalcost = round(
                                    float(i.price) * float(i.qty), 2)
                                debit.append(
                                    [i.paymdate, i.refno, (i.supplier).replace(u'\xa0', u''), totalcost])
                        except:
                            pass
                        try:
                            if i.product2 == j[0]:
                                totalcost = round(
                                    float(i.price2) * float(i.qty2), 2)
                                debit.append(
                                    [i.paymdate, i.refno, (i.supplier).replace(u'\xa0', u''), totalcost])
                        except:
                            pass
                        try:
                            if i.product3 == j[0]:
                                totalcost = round(
                                    float(i.price3) * float(i.qty3), 2)
                                debit.append(
                                    [i.paymdate, i.refno, (i.supplier).replace(u'\xa0', u''), totalcost])
                        except:
                            pass
                        try:
                            if i.product4 == j[0]:
                                totalcost = round(
                                    float(i.price4) * float(i.qty4), 2)
                                debit.append(
                                    [i.paymdate, i.refno, (i.supplier).replace(u'\xa0', u''), totalcost])
                        except:
                            pass
                context['debit6'] = debit
                context['inventory1'] = inventor
            else:
                pass
            if inventory.objects.filter(incomeacnt=account.name, cid=cmp1):
                invento = inventory.objects.filter(
                    incomeacnt=account.name, cid=cmp1)
                inventor = []
                for i in invento:
                    inventor.append(i.name)
                bundl = bundle.objects.filter(cid=cmp1)
                bundles = []
                bundlpro = []
                bundlqty = []
                bundlprice = []
                for i in bundl:
                    bundles.append(i.name)
                    bundlpro.append(
                        [i.product1, i.product2, i.product3, i.product4])
                    bundlqty.append([i.qty1, i.qty2, i.qty3, i.qty4])
                    bundlprice.append([i.price1, i.price2, i.price3, i.price4])
                invoc = invoice.objects.filter(cid=cmp1)
                invoic = []
                for i in invoc:
                    invotot = 0.0
                    for j in inventor:
                        try:
                            if i.product == j:
                                invotot += float(i.total)
                            elif bundle.objects.get(name=i.product, cid=cmp1):
                                for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                    if i.product == b:
                                        try:
                                            if j == bp[0]:
                                                totalcost = round(
                                                    float(bprice[0]) * float(i.qty) * float(bq[0]), 2)
                                                invotot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[1]:
                                                totalcost = round(
                                                    float(bprice[1]) * float(i.qty) * float(bq[1]), 2)
                                                invotot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[2]:
                                                totalcost = round(
                                                    float(bprice[2]) * float(i.qty) * float(bq[2]), 2)
                                                invotot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[3]:
                                                totalcost = round(
                                                    float(bprice[3]) * float(i.qty) * float(bq[3]), 2)
                                                invotot += totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.product2 == j:
                                invotot += float(i.total2)
                            elif bundle.objects.get(name=i.product2, cid=cmp1):
                                for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                    if i.product2 == b:
                                        try:
                                            if j == bp[0]:
                                                totalcost = round(
                                                    float(bprice[0]) * float(i.qty2) * float(bq[0]), 2)
                                                invotot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[1]:
                                                totalcost = round(
                                                    float(bprice[1]) * float(i.qty2) * float(bq[1]), 2)
                                                invotot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[2]:
                                                totalcost = round(
                                                    float(bprice[2]) * float(i.qty2) * float(bq[2]), 2)
                                                invotot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[3]:
                                                totalcost = round(
                                                    float(bprice[3]) * float(i.qty2) * float(bq[3]), 2)
                                                invotot += totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.product3 == j:
                                invotot += float(i.total3)
                            elif bundle.objects.get(name=i.product3, cid=cmp1):
                                for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                    if i.product3 == b:
                                        try:
                                            if j == bp[0]:
                                                totalcost = round(
                                                    float(bprice[0]) * float(i.qty3) * float(bq[0]), 2)
                                                invotot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[1]:
                                                totalcost = round(
                                                    float(bprice[1]) * float(i.qty3) * float(bq[1]), 2)
                                                invotot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[2]:
                                                totalcost = round(
                                                    float(bprice[2]) * float(i.qty3) * float(bq[2]), 2)
                                                invotot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[3]:
                                                totalcost = round(
                                                    float(bprice[3]) * float(i.qty3) * float(bq[3]), 2)
                                                invotot += totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.product4 == j:
                                invotot += float(i.total4)
                            elif bundle.objects.get(name=i.product4, cid=cmp1):
                                for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                    if i.product4 == b:
                                        try:
                                            if j == bp[0]:
                                                totalcost = round(
                                                    float(bprice[0]) * float(i.qty4) * float(bq[0]), 2)
                                                invotot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[1]:
                                                totalcost = round(
                                                    float(bprice[1]) * float(i.qty4) * float(bq[1]), 2)
                                                invotot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[2]:
                                                totalcost = round(
                                                    float(bprice[2]) * float(i.qty4) * float(bq[2]), 2)
                                                invotot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[3]:
                                                totalcost = round(
                                                    float(bprice[3]) * float(i.qty4) * float(bq[3]), 2)
                                                invotot += totalcost
                                        except:
                                            pass
                        except:
                            pass
                    invoic.append(
                        [i.invoicedate, i.invoiceno, (i.customername).replace(u'\xa0', u''),
                         invotot])
                context['invoice4'] = invoic
                creditnot = credit.objects.filter(cid=cmp1)
                creditnote4 = []
                for i in creditnot:
                    credtot = 0.0
                    for j in inventor:
                        try:
                            if i.product == j:
                                credtot += float(i.total)
                            elif bundle.objects.get(name=i.product, cid=cmp1):
                                for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                    if i.product == b:
                                        try:
                                            if j == bp[0]:
                                                totalcost = round(
                                                    float(bprice[0]) * float(i.qty) * float(bq[0]), 2)
                                                credtot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[1]:
                                                totalcost = round(
                                                    float(bprice[1]) * float(i.qty) * float(bq[1]), 2)
                                                credtot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[2]:
                                                totalcost = round(
                                                    float(bprice[2]) * float(i.qty) * float(bq[2]), 2)
                                                credtot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[3]:
                                                totalcost = round(
                                                    float(bprice[3]) * float(i.qty) * float(bq[3]), 2)
                                                credtot += totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.product1 == j:
                                credtot += float(i.total1)
                            elif bundle.objects.get(name=i.product1, cid=cmp1):
                                for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                    if i.product1 == b:
                                        try:
                                            if j == bp[0]:
                                                totalcost = round(
                                                    float(bprice[0]) * float(i.qty1) * float(bq[0]), 2)
                                                credtot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[1]:
                                                totalcost = round(
                                                    float(bprice[1]) * float(i.qty1) * float(bq[1]), 2)
                                                credtot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[2]:
                                                totalcost = round(
                                                    float(bprice[2]) * float(i.qty1) * float(bq[2]), 2)
                                                credtot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[3]:
                                                totalcost = round(
                                                    float(bprice[3]) * float(i.qty1) * float(bq[3]), 2)
                                                credtot += totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.product2 == j:
                                credtot += float(i.total2)
                            elif bundle.objects.get(name=i.product2, cid=cmp1):
                                for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                    if i.product2 == b:
                                        try:
                                            if j == bp[0]:
                                                totalcost = round(
                                                    float(bprice[0]) * float(i.qty2) * float(bq[0]), 2)
                                                credtot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[1]:
                                                totalcost = round(
                                                    float(bprice[1]) * float(i.qty2) * float(bq[1]), 2)
                                                credtot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[2]:
                                                totalcost = round(
                                                    float(bprice[2]) * float(i.qty2) * float(bq[2]), 2)
                                                credtot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[3]:
                                                totalcost = round(
                                                    float(bprice[3]) * float(i.qty2) * float(bq[3]), 2)
                                                credtot += totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.product3 == j:
                                credtot += float(i.total3)
                            elif bundle.objects.get(name=i.product3, cid=cmp1):
                                for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                    if i.product3 == b:
                                        try:
                                            if j == bp[0]:
                                                totalcost = round(
                                                    float(bprice[0]) * float(i.qty3) * float(bq[0]), 2)
                                                credtot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[1]:
                                                totalcost = round(
                                                    float(bprice[1]) * float(i.qty3) * float(bq[1]), 2)
                                                credtot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[2]:
                                                totalcost = round(
                                                    float(bprice[2]) * float(i.qty3) * float(bq[2]), 2)
                                                credtot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[3]:
                                                totalcost = round(
                                                    float(bprice[3]) * float(i.qty3) * float(bq[3]), 2)
                                                credtot += totalcost
                                        except:
                                            pass
                        except:
                            pass
                    creditnote4.append(
                        [i.creditdate, i.creditno, (i.customer).replace(u'\xa0', u''), float(credtot)])
                context['creditnote4'] = creditnote4
                salesrecpt = salesrecpts.objects.filter(cid=cmp1)
                salesrecipt4 = []
                for i in salesrecpt:
                    saletot = 0.0
                    for j in inventor:
                        try:
                            if i.salepro == j:
                                saletot += float(i.saaletotal)
                            elif bundle.objects.get(name=i.salepro, cid=cmp1):
                                for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                    if i.salepro == b:
                                        try:
                                            if j == bp[0]:
                                                totalcost = round(
                                                    float(bprice[0]) * float(i.saleqty) * float(bq[0]), 2)
                                                saletot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[1]:
                                                totalcost = round(
                                                    float(bprice[1]) * float(i.saleqty) * float(bq[1]), 2)
                                                saletot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[2]:
                                                totalcost = round(
                                                    float(bprice[2]) * float(i.saleqty) * float(bq[2]), 2)
                                                saletot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[3]:
                                                totalcost = round(
                                                    float(bprice[3]) * float(i.saleqty) * float(bq[3]), 2)
                                                saletot += totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.category2 == j:
                                saletot += float(i.cattotal2)
                            elif bundle.objects.get(name=i.category2, cid=cmp1):
                                for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                    if i.category2 == b:
                                        try:
                                            if j == bp[0]:
                                                totalcost = round(
                                                    float(bprice[0]) * float(i.catqty2) * float(bq[0]), 2)
                                                saletot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[1]:
                                                totalcost = round(
                                                    float(bprice[1]) * float(i.catqty2) * float(bq[1]), 2)
                                                saletot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[2]:
                                                totalcost = round(
                                                    float(bprice[2]) * float(i.catqty2) * float(bq[2]), 2)
                                                saletot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[3]:
                                                totalcost = round(
                                                    float(bprice[3]) * float(i.catqty2) * float(bq[3]), 2)
                                                saletot += totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.category3 == j:
                                saletot += float(i.cattotal3)
                            elif bundle.objects.get(name=i.category3, cid=cmp1):
                                for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                    if i.category3 == b:
                                        try:
                                            if j == bp[0]:
                                                totalcost = round(
                                                    float(bprice[0]) * float(i.catqty3) * float(bq[0]), 2)
                                                saletot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[1]:
                                                totalcost = round(
                                                    float(bprice[1]) * float(i.catqty3) * float(bq[1]), 2)
                                                saletot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[2]:
                                                totalcost = round(
                                                    float(bprice[2]) * float(i.catqty3) * float(bq[2]), 2)
                                                saletot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[3]:
                                                totalcost = round(
                                                    float(bprice[3]) * float(i.catqty3) * float(bq[3]), 2)
                                                saletot += totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.category4 == j:
                                saletot += float(i.cattotal4)
                            elif bundle.objects.get(name=i.category4, cid=cmp1):
                                for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                    if i.category4 == b:
                                        try:
                                            if j == bp[0]:
                                                totalcost = round(
                                                    float(bprice[0]) * float(i.catqty4) * float(bq[0]), 2)
                                                saletot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[1]:
                                                totalcost = round(
                                                    float(bprice[1]) * float(i.catqty4) * float(bq[1]), 2)
                                                saletot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[2]:
                                                totalcost = round(
                                                    float(bprice[2]) * float(i.catqty4) * float(bq[2]), 2)
                                                saletot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[3]:
                                                totalcost = round(
                                                    float(bprice[3]) * float(i.catqty4) * float(bq[3]), 2)
                                                saletot += totalcost
                                        except:
                                            pass
                        except:
                            pass
                    salesrecipt4.append(
                        [i.saledate, i.saleno, (i.salename).replace(u'\xa0', u''), float(saletot)])
                context['salesrecipt4'] = salesrecipt4
            else:
                pass
            if noninventory.objects.filter(income=account.name, cid=cmp1):
                noninvento = noninventory.objects.filter(
                    income=account.name, cid=cmp1)
                noninventor = []
                for i in noninvento:
                    noninventor.append(i.name)
                bundl = bundle.objects.filter(cid=cmp1)
                bundles = []
                bundlpro = []
                bundlqty = []
                bundlprice = []
                for i in bundl:
                    bundles.append(i.name)
                    bundlpro.append(
                        [i.product1, i.product2, i.product3, i.product4])
                    bundlqty.append([i.qty1, i.qty2, i.qty3, i.qty4])
                    bundlprice.append([i.price1, i.price2, i.price3, i.price4])
                invoc = invoice.objects.filter(cid=cmp1)
                invoic = []
                for i in invoc:
                    invotot = 0.0
                    for j in noninventor:
                        try:
                            if i.product == j:
                                invotot += float(i.total)
                            elif bundle.objects.get(name=i.product, cid=cmp1):
                                for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                    if i.product == b:
                                        try:
                                            if j == bp[0]:
                                                totalcost = round(
                                                    float(bprice[0]) * float(i.qty) * float(bq[0]), 2)
                                                invotot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[1]:
                                                totalcost = round(
                                                    float(bprice[1]) * float(i.qty) * float(bq[1]), 2)
                                                invotot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[2]:
                                                totalcost = round(
                                                    float(bprice[2]) * float(i.qty) * float(bq[2]), 2)
                                                invotot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[3]:
                                                totalcost = round(
                                                    float(bprice[3]) * float(i.qty) * float(bq[3]), 2)
                                                invotot += totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.product2 == j:
                                invotot += float(i.total2)
                            elif bundle.objects.get(name=i.product2, cid=cmp1):
                                for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                    if i.product2 == b:
                                        try:
                                            if j == bp[0]:
                                                totalcost = round(
                                                    float(bprice[0]) * float(i.qty2) * float(bq[0]), 2)
                                                invotot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[1]:
                                                totalcost = round(
                                                    float(bprice[1]) * float(i.qty2) * float(bq[1]), 2)
                                                invotot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[2]:
                                                totalcost = round(
                                                    float(bprice[2]) * float(i.qty2) * float(bq[2]), 2)
                                                invotot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[3]:
                                                totalcost = round(
                                                    float(bprice[3]) * float(i.qty2) * float(bq[3]), 2)
                                                invotot += totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.product3 == j:
                                invotot += float(i.total3)
                            elif bundle.objects.get(name=i.product3, cid=cmp1):
                                for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                    if i.product3 == b:
                                        try:
                                            if j == bp[0]:
                                                totalcost = round(
                                                    float(bprice[0]) * float(i.qty3) * float(bq[0]), 2)
                                                invotot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[1]:
                                                totalcost = round(
                                                    float(bprice[1]) * float(i.qty3) * float(bq[1]), 2)
                                                invotot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[2]:
                                                totalcost = round(
                                                    float(bprice[2]) * float(i.qty3) * float(bq[2]), 2)
                                                invotot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[3]:
                                                totalcost = round(
                                                    float(bprice[3]) * float(i.qty3) * float(bq[3]), 2)
                                                invotot += totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.product4 == j:
                                invotot += float(i.total4)
                            elif bundle.objects.get(name=i.product4, cid=cmp1):
                                for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                    if i.product4 == b:
                                        try:
                                            if j == bp[0]:
                                                totalcost = round(
                                                    float(bprice[0]) * float(i.qty4) * float(bq[0]), 2)
                                                invotot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[1]:
                                                totalcost = round(
                                                    float(bprice[1]) * float(i.qty4) * float(bq[1]), 2)
                                                invotot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[2]:
                                                totalcost = round(
                                                    float(bprice[2]) * float(i.qty4) * float(bq[2]), 2)
                                                invotot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[3]:
                                                totalcost = round(
                                                    float(bprice[3]) * float(i.qty4) * float(bq[3]), 2)
                                                invotot += totalcost
                                        except:
                                            pass
                        except:
                            pass
                    invoic.append(
                        [i.invoicedate, i.invoiceno, (i.customername).replace(u'\xa0', u''),
                         float(invotot)])
                context['invoice6'] = invoic
                creditnot = credit.objects.filter(cid=cmp1)
                creditnote4 = []
                for i in creditnot:
                    credtot = 0.0
                    for j in noninventor:
                        try:
                            if i.product == j:
                                credtot += float(i.total)
                            elif bundle.objects.get(name=i.product, cid=cmp1):
                                for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                    if i.product == b:
                                        try:
                                            if j == bp[0]:
                                                totalcost = round(
                                                    float(bprice[0]) * float(i.qty) * float(bq[0]), 2)
                                                credtot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[1]:
                                                totalcost = round(
                                                    float(bprice[1]) * float(i.qty) * float(bq[1]), 2)
                                                credtot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[2]:
                                                totalcost = round(
                                                    float(bprice[2]) * float(i.qty) * float(bq[2]), 2)
                                                credtot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[3]:
                                                totalcost = round(
                                                    float(bprice[3]) * float(i.qty) * float(bq[3]), 2)
                                                credtot += totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.product1 == j:
                                credtot += float(i.total1)
                            elif bundle.objects.get(name=i.product1, cid=cmp1):
                                for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                    if i.product1 == b:
                                        try:
                                            if j == bp[0]:
                                                totalcost = round(
                                                    float(bprice[0]) * float(i.qty1) * float(bq[0]), 2)
                                                credtot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[1]:
                                                totalcost = round(
                                                    float(bprice[1]) * float(i.qty1) * float(bq[1]), 2)
                                                credtot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[2]:
                                                totalcost = round(
                                                    float(bprice[2]) * float(i.qty1) * float(bq[2]), 2)
                                                credtot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[3]:
                                                totalcost = round(
                                                    float(bprice[3]) * float(i.qty1) * float(bq[3]), 2)
                                                credtot += totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.product2 == j:
                                credtot += float(i.total2)
                            elif bundle.objects.get(name=i.product2, cid=cmp1):
                                for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                    if i.product2 == b:
                                        try:
                                            if j == bp[0]:
                                                totalcost = round(
                                                    float(bprice[0]) * float(i.qty2) * float(bq[0]), 2)
                                                credtot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[1]:
                                                totalcost = round(
                                                    float(bprice[1]) * float(i.qty2) * float(bq[1]), 2)
                                                credtot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[2]:
                                                totalcost = round(
                                                    float(bprice[2]) * float(i.qty2) * float(bq[2]), 2)
                                                credtot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[3]:
                                                totalcost = round(
                                                    float(bprice[3]) * float(i.qty2) * float(bq[3]), 2)
                                                credtot += totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.product3 == j:
                                credtot += float(i.total3)
                            elif bundle.objects.get(name=i.product3, cid=cmp1):
                                for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                    if i.product3 == b:
                                        try:
                                            if j == bp[0]:
                                                totalcost = round(
                                                    float(bprice[0]) * float(i.qty3) * float(bq[0]), 2)
                                                credtot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[1]:
                                                totalcost = round(
                                                    float(bprice[1]) * float(i.qty3) * float(bq[1]), 2)
                                                credtot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[2]:
                                                totalcost = round(
                                                    float(bprice[2]) * float(i.qty3) * float(bq[2]), 2)
                                                credtot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[3]:
                                                totalcost = round(
                                                    float(bprice[3]) * float(i.qty3) * float(bq[3]), 2)
                                                credtot += totalcost
                                        except:
                                            pass
                        except:
                            pass
                    creditnote4.append(
                        [i.creditdate, i.creditno, (i.customer).replace(u'\xa0', u''), float(credtot)])
                context['creditnote6'] = creditnote4
                salesrecpt = salesrecpts.objects.filter(cid=cmp1)
                salesrecipt4 = []
                for i in salesrecpt:
                    saletot = 0.0
                    for j in noninventor:
                        try:
                            if i.salepro == j:
                                saletot += float(i.saaletotal)
                            elif bundle.objects.get(name=i.salepro, cid=cmp1):
                                for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                    if i.salepro == b:
                                        try:
                                            if j == bp[0]:
                                                totalcost = round(
                                                    float(bprice[0]) * float(i.saleqty) * float(bq[0]), 2)
                                                saletot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[1]:
                                                totalcost = round(
                                                    float(bprice[1]) * float(i.saleqty) * float(bq[1]), 2)
                                                saletot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[2]:
                                                totalcost = round(
                                                    float(bprice[2]) * float(i.saleqty) * float(bq[2]), 2)
                                                saletot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[3]:
                                                totalcost = round(
                                                    float(bprice[3]) * float(i.saleqty) * float(bq[3]), 2)
                                                saletot += totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.category2 == j:
                                saletot += float(i.cattotal2)
                            elif bundle.objects.get(name=i.category2, cid=cmp1):
                                for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                    if i.category2 == b:
                                        try:
                                            if j == bp[0]:
                                                totalcost = round(
                                                    float(bprice[0]) * float(i.catqty2) * float(bq[0]), 2)
                                                saletot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[1]:
                                                totalcost = round(
                                                    float(bprice[1]) * float(i.catqty2) * float(bq[1]), 2)
                                                saletot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[2]:
                                                totalcost = round(
                                                    float(bprice[2]) * float(i.catqty2) * float(bq[2]), 2)
                                                saletot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[3]:
                                                totalcost = round(
                                                    float(bprice[3]) * float(i.catqty2) * float(bq[3]), 2)
                                                saletot += totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.category3 == j:
                                saletot += float(i.cattotal3)
                            elif bundle.objects.get(name=i.category3, cid=cmp1):
                                for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                    if i.category3 == b:
                                        try:
                                            if j == bp[0]:
                                                totalcost = round(
                                                    float(bprice[0]) * float(i.catqty3) * float(bq[0]), 2)
                                                saletot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[1]:
                                                totalcost = round(
                                                    float(bprice[1]) * float(i.catqty3) * float(bq[1]), 2)
                                                saletot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[2]:
                                                totalcost = round(
                                                    float(bprice[2]) * float(i.catqty3) * float(bq[2]), 2)
                                                saletot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[3]:
                                                totalcost = round(
                                                    float(bprice[3]) * float(i.catqty3) * float(bq[3]), 2)
                                                saletot += totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.category4 == j:
                                saletot += float(i.cattotal4)
                            elif bundle.objects.get(name=i.category4, cid=cmp1):
                                for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                    if i.category4 == b:
                                        try:
                                            if j == bp[0]:
                                                totalcost = round(
                                                    float(bprice[0]) * float(i.catqty4) * float(bq[0]), 2)
                                                saletot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[1]:
                                                totalcost = round(
                                                    float(bprice[1]) * float(i.catqty4) * float(bq[1]), 2)
                                                saletot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[2]:
                                                totalcost = round(
                                                    float(bprice[2]) * float(i.catqty4) * float(bq[2]), 2)
                                                saletot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[3]:
                                                totalcost = round(
                                                    float(bprice[3]) * float(i.catqty4) * float(bq[3]), 2)
                                                saletot += totalcost
                                        except:
                                            pass
                        except:
                            pass
                    salesrecipt4.append(
                        [i.saledate, i.saleno, (i.salename).replace(u'\xa0', u''), float(saletot)])
                context['salesrecipt6'] = salesrecipt4
            else:
                pass
            if inventory.objects.filter(expacnt=account.name, cid=cmp1):
                invento = inventory.objects.filter(expacnt=account.name, cid=cmp1)
                inventor = []
                for i in invento:
                    inventor.append([i.name, i.cost])
                bundl = bundle.objects.filter(cid=cmp1)
                bundles = []
                bundlpro = []
                bundlqty = []
                bundlprice = []
                for i in bundl:
                    bundles.append(i.name)
                    bundlpro.append(
                        [i.product1, i.product2, i.product3, i.product4])
                    bundlqty.append([i.qty1, i.qty2, i.qty3, i.qty4])
                    # bundlprice.append([i.price1, i.price2, i.price3, i.price4])
                invoc = invoice.objects.filter(cid=cmp1)
                invoic = []
                for i in invoc:
                    invotot = 0.0
                    for j in inventor:
                        try:
                            if i.product == j[0]:
                                totalcost = round(float(j[1]) * float(i.qty), 2)
                                invotot += totalcost
                            elif bundle.objects.get(name=i.product, cid=cmp1):
                                for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                    if i.product == b:
                                        try:
                                            if j[0] == bp[0]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty) * float(bq[0]), 2)
                                                invotot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[1]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty) * float(bq[1]), 2)
                                                invotot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[2]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty) * float(bq[2]), 2)
                                                invotot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[3]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty) * float(bq[3]), 2)
                                                invotot += totalcost
                                        except:
                                            pass
                                    else:
                                        pass
                        except:
                            pass
                        try:
                            if i.product2 == j[0]:
                                totalcost = round(
                                    float(j[1]) * float(i.qty2), 2)
                                invotot += totalcost
                            elif bundle.objects.get(name=i.product2, cid=cmp1):
                                for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                    if i.product2 == b:
                                        try:
                                            if j[0] == bp[0]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty2) * float(bq[0]), 2)
                                                invotot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[1]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty2) * float(bq[1]), 2)
                                                invotot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[2]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty2) * float(bq[2]), 2)
                                                invotot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[3]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty2) * float(bq[3]), 2)
                                                invotot += totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.product3 == j[0]:
                                totalcost = round(
                                    float(j[1]) * float(i.qty3), 2)
                                invotot += totalcost
                            elif bundle.objects.get(name=i.product3, cid=cmp1):
                                for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                    if i.product3 == b:
                                        try:
                                            if j[0] == bp[0]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty3) * float(bq[0]), 2)
                                                invotot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[1]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty3) * float(bq[1]), 2)
                                                invotot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[2]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty3) * float(bq[2]), 2)
                                                invotot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[3]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty3) * float(bq[3]), 2)
                                                invotot += totalcost
                                        except:
                                            pass
                                    else:
                                        pass
                        except:
                            pass
                        try:
                            if i.product4 == j[0]:
                                totalcost = round(
                                    float(j[1]) * float(i.qty4), 2)
                                invotot += totalcost
                            elif bundle.objects.get(name=i.product4, cid=cmp1):
                                for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                    if i.product4 == b:
                                        try:
                                            if j[0] == bp[0]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty4) * float(bq[0]), 2)
                                                invotot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[1]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty4) * float(bq[1]), 2)
                                                invotot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[2]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty4) * float(bq[2]), 2)
                                                invotot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[3]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty4) * float(bq[3]), 2)
                                                invotot += totalcost
                                        except:
                                            pass
                                    else:
                                        pass
                        except:
                            pass
                    invoic.append(
                        [i.invoicedate, i.invoiceno, (i.customername).replace(u'\xa0', u''), invotot])
                context['invoiceexpacnt'] = invoic
                creditnot = credit.objects.filter(cid=cmp1)
                creditnote5 = []
                for i in creditnot:
                    credtot = 0.0
                    for j in inventor:
                        try:
                            if i.product == j[0]:
                                totalcost = round(
                                    float(j[1]) * float(i.qty), 2)
                                credtot += totalcost
                            elif bundle.objects.get(name=i.product, cid=cmp1):
                                for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                    if i.product == b:
                                        try:
                                            if j[0] == bp[0]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty) * float(bq[0]), 2)
                                                credtot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[1]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty) * float(bq[1]), 2)
                                                credtot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[2]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty) * float(bq[2]), 2)
                                                credtot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[3]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty) * float(bq[3]), 2)
                                                credtot += totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.product1 == j[0]:
                                totalcost = round(
                                    float(j[1]) * float(i.qty1), 2)
                                credtot += totalcost
                            elif bundle.objects.get(name=i.product1, cid=cmp1):
                                for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                    if i.product1 == b:
                                        try:
                                            if j[0] == bp[0]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty1) * float(bq[0]), 2)
                                                credtot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[1]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty1) * float(bq[1]), 2)
                                                credtot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[2]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty1) * float(bq[2]), 2)
                                                credtot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[3]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty1) * float(bq[3]), 2)
                                                credtot += totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.product2 == j[0]:
                                totalcost = round(
                                    float(j[1]) * float(i.qty2), 2)
                                credtot += totalcost
                            elif bundle.objects.get(name=i.product2, cid=cmp1):
                                for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                    if i.product2 == b:
                                        try:
                                            if j[0] == bp[0]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty2) * float(bq[0]), 2)
                                                credtot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[1]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty2) * float(bq[1]), 2)
                                                credtot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[2]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty2) * float(bq[2]), 2)
                                                credtot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[3]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty2) * float(bq[3]), 2)
                                                credtot += totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.product3 == j[0]:
                                totalcost = round(
                                    float(j[1]) * float(i.qty3), 2)
                                credtot += totalcost
                            elif bundle.objects.get(name=i.product3, cid=cmp1):
                                for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                    if i.product3 == b:
                                        try:
                                            if j[0] == bp[0]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty3) * float(bq[0]), 2)
                                                credtot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[1]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty3) * float(bq[1]), 2)
                                                credtot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[2]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty3) * float(bq[2]), 2)
                                                credtot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[3]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty3) * float(bq[3]), 2)
                                                credtot += totalcost
                                        except:
                                            pass
                        except:
                            pass
                    creditnote5.append(
                        [i.creditdate, i.creditno, (i.customer).replace(u'\xa0', u''), credtot])
                context['creditnoteexpacnt'] = creditnote5
                salesrecpt = salesrecpts.objects.filter(cid=cmp1)
                salesrecipt5 = []
                for i in salesrecpt:
                    saletot = 0.0
                    for j in inventor:
                        try:
                            if i.salepro == j[0]:
                                totalcost = round(
                                    float(j[1]) * float(i.saleqty), 2)
                                saletot += totalcost
                            elif bundle.objects.get(name=i.salepro, cid=cmp1):
                                for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                    if i.salepro == b:
                                        try:
                                            if j[0] == bp[0]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.saleqty) * float(bq[0]), 2)
                                                saletot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[1]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.saleqty) * float(bq[1]), 2)
                                                saletot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[2]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.saleqty) * float(bq[2]), 2)
                                                saletot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[3]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.saleqty) * float(bq[3]), 2)
                                                saletot += totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.category2 == j[0]:
                                totalcost = round(
                                    float(j[1]) * float(i.catqty2), 2)
                                saletot += totalcost
                            elif bundle.objects.get(name=i.category2, cid=cmp1):
                                for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                    if i.category2 == b:
                                        try:
                                            if j[0] == bp[0]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.catqty2) * float(bq[0]), 2)
                                                saletot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[1]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.catqty2) * float(bq[1]), 2)
                                                saletot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[2]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.catqty2) * float(bq[2]), 2)
                                                saletot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[3]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.catqty2) * float(bq[3]), 2)
                                                saletot += totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.category3 == j[0]:
                                totalcost = round(
                                    float(j[1]) * float(i.catqty3), 2)
                                saletot += totalcost
                            elif bundle.objects.get(name=i.category3, cid=cmp1):
                                for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                    if i.category3 == b:
                                        try:
                                            if j[0] == bp[0]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.catqty3) * float(bq[0]), 2)
                                                saletot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[1]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.catqty3) * float(bq[1]), 2)
                                                saletot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[2]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.catqty3) * float(bq[2]), 2)
                                                saletot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[3]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.catqty3) * float(bq[3]), 2)
                                                saletot += totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.category4 == j[0]:
                                totalcost = round(
                                    float(j[1]) * float(i.catqty4), 2)
                                saletot += totalcost
                            elif bundle.objects.get(name=i.category4, cid=cmp1):
                                for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                    if i.category4 == b:
                                        try:
                                            if j[0] == bp[0]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.catqty4) * float(bq[0]), 2)
                                                saletot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[1]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.catqty4) * float(bq[1]), 2)
                                                saletot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[2]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.catqty4) * float(bq[2]), 2)
                                                saletot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[3]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.catqty4) * float(bq[3]), 2)
                                                saletot += totalcost
                                        except:
                                            pass
                        except:
                            pass
                    salesrecipt5.append(
                        [i.saledate, i.saleno, (i.salename).replace(u'\xa0', u''), saletot])
                context['salesreciptexpacnt'] = salesrecipt5
            else:
                pass
            if noninventory.objects.filter(expenseaccount=account.name, cid=cmp1):
                noninvento = noninventory.objects.filter(
                    expenseaccount=account.name, cid=cmp1)
                noninventor = []
                for i in noninvento:
                    noninventor.append(i.name)
                print(noninventor)
                expen = expences.objects.filter(cid=cmp1)
                expence = []
                for i in expen:
                    for j in noninventor:
                        if i.product == j:
                            expence.append(
                                [i.paymdate, i.refno, (i.payee).replace(u'\xa0', u''), float(i.total)])

                        try:
                            if i.product2 == j:
                                expence.append(
                                    [i.paymdate, i.refno, (i.payee).replace(u'\xa0', u''), float(i.total2)])
                        except:
                            pass
                        try:
                            if i.product3 == j:
                                expence.append(
                                    [i.paymdate, i.refno, (i.payee).replace(u'\xa0', u''), float(i.total3)])
                        except:
                            pass
                        try:
                            if i.product4 == j:
                                expence.append(
                                    [i.paymdate, i.refno, (i.payee).replace(u'\xa0', u''), float(i.total4)])
                        except:
                            pass
                context['expence5'] = expence
                debi = suplrcredit.objects.filter(cid=cmp1)
                debit = []
                for i in debi:
                    for j in noninventor:
                        try:
                            if i.product == j:
                                debit.append(
                                    [i.paymdate, i.refno, (i.supplier).replace(u'\xa0', u''), float(i.total)])
                        except:
                            pass
                        try:
                            if i.product2 == j:
                                debit.append(
                                    [i.paymdate, i.refno, (i.supplier).replace(u'\xa0', u''), float(i.total2)])
                        except:
                            pass
                        try:
                            if i.product3 == j:
                                debit.append(
                                    [i.paymdate, i.refno, (i.supplier).replace(u'\xa0', u''), float(i.total3)])
                        except:
                            pass
                        try:
                            if i.product4 == j:
                                debit.append(
                                    [i.paymdate, i.refno, (i.supplier).replace(u'\xa0', u''), float(i.total4)])
                        except:
                            pass
                context['debit5'] = debit
            else:
                pass
            if salesrecpts.objects.filter(saledeposit=account.name, cid=cmp1):
                salesrecpt = salesrecpts.objects.filter(
                    saledeposit=account.name, cid=cmp1)
                context['salesrecipt7'] = salesrecpt
            else:
                pass
            if payment.objects.filter(depto=account.name, cid=cmp1):
                payment1 = payment.objects.filter(depto=account.name, cid=cmp1)
                context['payment1'] = payment1
            else:
                pass
            if bills.objects.filter(paymacnt=account.name, cid=cmp1):
                bill = bills.objects.filter(paymacnt=account.name, cid=cmp1)
                context['bill1'] = bill
            else:
                pass
        return render(request, 'app1/runreport.html', context)
    except:
        pass


def runreports(request, accountsid):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        account = accounts.objects.get(accountsid=accountsid, cid=cmp1)
        context = {'cmp1': cmp1, 'account': account, 'accbal': account.balance}
        if inventory.objects.filter(invacnt=account.name, cid=cmp1):
            invento = inventory.objects.filter(invacnt=account.name, cid=cmp1)
            inventor = []
            inventor1 = []
            for i in invento:
                inventor.append([i.date, i.cxq])
                inventor1.append([i.name, i.cost])
            invoc = invoice.objects.filter(cid=cmp1)
            invoic = []
            for i in invoc:
                invotot = 0.0
                for j in inventor1:
                    try:
                        if i.product == j[0]:
                            totalcost = round(float(j[1]) * float(i.qty), 2)
                            invotot += totalcost
                        elif bundle.objects.get(name=i.product, cid=cmp1):
                            for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                if i.product == b:
                                    try:
                                        if j[0] == bp[0]:
                                            totalcost = round(
                                                float(j[1]) * float(i.qty) * float(bq[0]), 2)
                                            invotot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j[0] == bp[1]:
                                            totalcost = round(
                                                float(j[1]) * float(i.qty) * float(bq[1]), 2)
                                            invotot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j[0] == bp[2]:
                                            totalcost = round(
                                                float(j[1]) * float(i.qty) * float(bq[2]), 2)
                                            invotot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j[0] == bp[3]:
                                            totalcost = round(
                                                float(j[1]) * float(i.qty) * float(bq[3]), 2)
                                            invotot += totalcost
                                    except:
                                        pass
                                else:
                                    pass
                    except:
                        pass
                    try:
                        if i.product2 == j[0]:
                            totalcost = round(
                                float(j[1]) * float(i.qty2), 2)
                            invotot += totalcost
                        elif bundle.objects.get(name=i.product2, cid=cmp1):
                            for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                if i.product2 == b:
                                    try:
                                        if j[0] == bp[0]:
                                            totalcost = round(
                                                float(j[1]) * float(i.qty2) * float(bq[0]), 2)
                                            invotot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j[0] == bp[1]:
                                            totalcost = round(
                                                float(j[1]) * float(i.qty2) * float(bq[1]), 2)
                                            invotot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j[0] == bp[2]:
                                            totalcost = round(
                                                float(j[1]) * float(i.qty2) * float(bq[2]), 2)
                                            invotot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j[0] == bp[3]:
                                            totalcost = round(
                                                float(j[1]) * float(i.qty2) * float(bq[3]), 2)
                                            invotot += totalcost
                                    except:
                                        pass
                    except:
                        pass
                    try:
                        if i.product3 == j[0]:
                            totalcost = round(
                                float(j[1]) * float(i.qty3), 2)
                            invotot += totalcost
                        elif bundle.objects.get(name=i.product3, cid=cmp1):
                            for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                if i.product3 == b:
                                    try:
                                        if j[0] == bp[0]:
                                            totalcost = round(
                                                float(j[1]) * float(i.qty3) * float(bq[0]), 2)
                                            invotot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j[0] == bp[1]:
                                            totalcost = round(
                                                float(j[1]) * float(i.qty3) * float(bq[1]), 2)
                                            invotot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j[0] == bp[2]:
                                            totalcost = round(
                                                float(j[1]) * float(i.qty3) * float(bq[2]), 2)
                                            invotot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j[0] == bp[3]:
                                            totalcost = round(
                                                float(j[1]) * float(i.qty3) * float(bq[3]), 2)
                                            invotot += totalcost
                                    except:
                                        pass
                                else:
                                    pass
                    except:
                        pass
                    try:
                        if i.product4 == j[0]:
                            totalcost = round(
                                float(j[1]) * float(i.qty4), 2)
                            invotot += totalcost
                        elif bundle.objects.get(name=i.product4, cid=cmp1):
                            for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                if i.product4 == b:
                                    try:
                                        if j[0] == bp[0]:
                                            totalcost = round(
                                                float(j[1]) * float(i.qty4) * float(bq[0]), 2)
                                            invotot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j[0] == bp[1]:
                                            totalcost = round(
                                                float(j[1]) * float(i.qty4) * float(bq[1]), 2)
                                            invotot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j[0] == bp[2]:
                                            totalcost = round(
                                                float(j[1]) * float(i.qty4) * float(bq[2]), 2)
                                            invotot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j[0] == bp[3]:
                                            totalcost = round(
                                                float(j[1]) * float(i.qty4) * float(bq[3]), 2)
                                            invotot += totalcost
                                    except:
                                        pass
                                else:
                                    pass
                    except:
                        pass
                invoic.append(
                    [i.invoicedate, i.invoiceno, (i.customername).replace(u'\xa0', u''), invotot])
            context['invoice5'] = invoic
            creditnot = credit.objects.filter(cid=cmp1)
            creditnote5 = []
            for i in creditnot:
                credtot = 0.0
                for j in inventor1:
                    try:
                        if i.product == j[0]:
                            totalcost = round(
                                float(j[1]) * float(i.qty), 2)
                            credtot += totalcost
                        elif bundle.objects.get(name=i.product, cid=cmp1):
                            for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                if i.product == b:
                                    try:
                                        if j[0] == bp[0]:
                                            totalcost = round(
                                                float(j[1]) * float(i.qty) * float(bq[0]), 2)
                                            credtot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j[0] == bp[1]:
                                            totalcost = round(
                                                float(j[1]) * float(i.qty) * float(bq[1]), 2)
                                            credtot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j[0] == bp[2]:
                                            totalcost = round(
                                                float(j[1]) * float(i.qty) * float(bq[2]), 2)
                                            credtot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j[0] == bp[3]:
                                            totalcost = round(
                                                float(j[1]) * float(i.qty) * float(bq[3]), 2)
                                            credtot += totalcost
                                    except:
                                        pass
                    except:
                        pass
                    try:
                        if i.product1 == j[0]:
                            totalcost = round(
                                float(j[1]) * float(i.qty1), 2)
                            credtot += totalcost
                        elif bundle.objects.get(name=i.product1, cid=cmp1):
                            for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                if i.product1 == b:
                                    try:
                                        if j[0] == bp[0]:
                                            totalcost = round(
                                                float(j[1]) * float(i.qty1) * float(bq[0]), 2)
                                            credtot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j[0] == bp[1]:
                                            totalcost = round(
                                                float(j[1]) * float(i.qty1) * float(bq[1]), 2)
                                            credtot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j[0] == bp[2]:
                                            totalcost = round(
                                                float(j[1]) * float(i.qty1) * float(bq[2]), 2)
                                            credtot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j[0] == bp[3]:
                                            totalcost = round(
                                                float(j[1]) * float(i.qty1) * float(bq[3]), 2)
                                            credtot += totalcost
                                    except:
                                        pass
                    except:
                        pass
                    try:
                        if i.product2 == j[0]:
                            totalcost = round(
                                float(j[1]) * float(i.qty2), 2)
                            credtot += totalcost
                        elif bundle.objects.get(name=i.product2, cid=cmp1):
                            for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                if i.product2 == b:
                                    try:
                                        if j[0] == bp[0]:
                                            totalcost = round(
                                                float(j[1]) * float(i.qty2) * float(bq[0]), 2)
                                            credtot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j[0] == bp[1]:
                                            totalcost = round(
                                                float(j[1]) * float(i.qty2) * float(bq[1]), 2)
                                            credtot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j[0] == bp[2]:
                                            totalcost = round(
                                                float(j[1]) * float(i.qty2) * float(bq[2]), 2)
                                            credtot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j[0] == bp[3]:
                                            totalcost = round(
                                                float(j[1]) * float(i.qty2) * float(bq[3]), 2)
                                            credtot += totalcost
                                    except:
                                        pass
                    except:
                        pass
                    try:
                        if i.product3 == j[0]:
                            totalcost = round(
                                float(j[1]) * float(i.qty3), 2)
                            credtot += totalcost
                        elif bundle.objects.get(name=i.product3, cid=cmp1):
                            for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                if i.product3 == b:
                                    try:
                                        if j[0] == bp[0]:
                                            totalcost = round(
                                                float(j[1]) * float(i.qty3) * float(bq[0]), 2)
                                            credtot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j[0] == bp[1]:
                                            totalcost = round(
                                                float(j[1]) * float(i.qty3) * float(bq[1]), 2)
                                            credtot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j[0] == bp[2]:
                                            totalcost = round(
                                                float(j[1]) * float(i.qty3) * float(bq[2]), 2)
                                            credtot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j[0] == bp[3]:
                                            totalcost = round(
                                                float(j[1]) * float(i.qty3) * float(bq[3]), 2)
                                            credtot += totalcost
                                    except:
                                        pass
                    except:
                        pass
                creditnote5.append(
                    [i.creditdate, i.creditno, (i.customer).replace(u'\xa0', u''), credtot])
            context['creditnote5'] = creditnote5

            salesrecpt = salesrecpts.objects.filter(cid=cmp1)
            salesrecipt5 = []
            for i in salesrecpt:
                saletot = 0.0
                for j in inventor1:
                    try:
                        if i.salepro == j[0]:
                            totalcost = round(
                                float(j[1]) * float(i.saleqty), 2)
                            saletot += totalcost
                        elif bundle.objects.get(name=i.salepro, cid=cmp1):
                            for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                if i.salepro == b:
                                    try:
                                        if j[0] == bp[0]:
                                            totalcost = round(
                                                float(j[1]) * float(i.saleqty) * float(bq[0]), 2)
                                            saletot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j[0] == bp[1]:
                                            totalcost = round(
                                                float(j[1]) * float(i.saleqty) * float(bq[1]), 2)
                                            saletot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j[0] == bp[2]:
                                            totalcost = round(
                                                float(j[1]) * float(i.saleqty) * float(bq[2]), 2)
                                            saletot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j[0] == bp[3]:
                                            totalcost = round(
                                                float(j[1]) * float(i.saleqty) * float(bq[3]), 2)
                                            saletot += totalcost
                                    except:
                                        pass
                    except:
                        pass
                    try:
                        if i.category2 == j[0]:
                            totalcost = round(
                                float(j[1]) * float(i.catqty2), 2)
                            saletot += totalcost
                        elif bundle.objects.get(name=i.category2, cid=cmp1):
                            for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                if i.category2 == b:
                                    try:
                                        if j[0] == bp[0]:
                                            totalcost = round(
                                                float(j[1]) * float(i.catqty2) * float(bq[0]), 2)
                                            saletot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j[0] == bp[1]:
                                            totalcost = round(
                                                float(j[1]) * float(i.catqty2) * float(bq[1]), 2)
                                            saletot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j[0] == bp[2]:
                                            totalcost = round(
                                                float(j[1]) * float(i.catqty2) * float(bq[2]), 2)
                                            saletot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j[0] == bp[3]:
                                            totalcost = round(
                                                float(j[1]) * float(i.catqty2) * float(bq[3]), 2)
                                            saletot += totalcost
                                    except:
                                        pass
                    except:
                        pass
                    try:
                        if i.category3 == j[0]:
                            totalcost = round(
                                float(j[1]) * float(i.catqty3), 2)
                            saletot += totalcost
                        elif bundle.objects.get(name=i.category3, cid=cmp1):
                            for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                if i.category3 == b:
                                    try:
                                        if j[0] == bp[0]:
                                            totalcost = round(
                                                float(j[1]) * float(i.catqty3) * float(bq[0]), 2)
                                            saletot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j[0] == bp[1]:
                                            totalcost = round(
                                                float(j[1]) * float(i.catqty3) * float(bq[1]), 2)
                                            saletot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j[0] == bp[2]:
                                            totalcost = round(
                                                float(j[1]) * float(i.catqty3) * float(bq[2]), 2)
                                            saletot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j[0] == bp[3]:
                                            totalcost = round(
                                                float(j[1]) * float(i.catqty3) * float(bq[3]), 2)
                                            saletot += totalcost
                                    except:
                                        pass
                    except:
                        pass
                    try:
                        if i.category4 == j[0]:
                            totalcost = round(
                                float(j[1]) * float(i.catqty4), 2)
                            saletot += totalcost
                        elif bundle.objects.get(name=i.category4, cid=cmp1):
                            for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                if i.category4 == b:
                                    try:
                                        if j[0] == bp[0]:
                                            totalcost = round(
                                                float(j[1]) * float(i.catqty4) * float(bq[0]), 2)
                                            saletot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j[0] == bp[1]:
                                            totalcost = round(
                                                float(j[1]) * float(i.catqty4) * float(bq[1]), 2)
                                            saletot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j[0] == bp[2]:
                                            totalcost = round(
                                                float(j[1]) * float(i.catqty4) * float(bq[2]), 2)
                                            saletot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j[0] == bp[3]:
                                            totalcost = round(
                                                float(j[1]) * float(i.catqty4) * float(bq[3]), 2)
                                            saletot += totalcost
                                    except:
                                        pass
                    except:
                        pass
                salesrecipt5.append(
                    [i.saledate, i.saleno, (i.salename).replace(u'\xa0', u''), saletot])
            context['salesrecipt5'] = salesrecipt5
            expen = expences.objects.filter(cid=cmp1)
            expence = []
            for i in expen:
                for j in inventor1:
                    if i.product == j[0]:
                        totalcost = round(float(i.price) * float(i.qty), 2)
                        expence.append(
                            [i.paymdate, i.refno, (i.payee).replace(u'\xa0', u''), totalcost])

                    try:
                        if i.product2 == j[0]:
                            totalcost = round(
                                float(i.price2) * float(i.qty2), 2)
                            expence.append(
                                [i.paymdate, i.refno, (i.payee).replace(u'\xa0', u''), totalcost])
                    except:
                        pass
                    try:
                        if i.product3 == j[0]:
                            totalcost = round(
                                float(i.price3) * float(i.qty3), 2)
                            expence.append(
                                [i.paymdate, i.refno, (i.payee).replace(u'\xa0', u''), totalcost])
                    except:
                        pass
                    try:
                        if i.product4 == j[0]:
                            totalcost = round(
                                float(i.price4) * float(i.qty4), 2)
                            expence.append(
                                [i.paymdate, i.refno, (i.payee).replace(u'\xa0', u''), totalcost])
                    except:
                        pass
            context['expence6'] = expence
            debi = suplrcredit.objects.filter(cid=cmp1)
            debit = []
            for i in debi:
                for j in inventor1:
                    try:
                        if i.product == j[0]:
                            totalcost = round(float(i.price) * float(i.qty), 2)
                            debit.append(
                                [i.paymdate, i.refno, (i.supplier).replace(u'\xa0', u''), totalcost])
                    except:
                        pass
                    try:
                        if i.product2 == j[0]:
                            totalcost = round(
                                float(i.price2) * float(i.qty2), 2)
                            debit.append(
                                [i.paymdate, i.refno, (i.supplier).replace(u'\xa0', u''), totalcost])
                    except:
                        pass
                    try:
                        if i.product3 == j[0]:
                            totalcost = round(
                                float(i.price3) * float(i.qty3), 2)
                            debit.append(
                                [i.paymdate, i.refno, (i.supplier).replace(u'\xa0', u''), totalcost])
                    except:
                        pass
                    try:
                        if i.product4 == j[0]:
                            totalcost = round(
                                float(i.price4) * float(i.qty4), 2)
                            debit.append(
                                [i.paymdate, i.refno, (i.supplier).replace(u'\xa0', u''), totalcost])
                    except:
                        pass
            context['debit6'] = debit
            context['inventory1'] = inventor
        else:
            pass
        if inventory.objects.filter(incomeacnt=account.name, cid=cmp1):
            invento = inventory.objects.filter(
                incomeacnt=account.name, cid=cmp1)
            inventor = []
            for i in invento:
                inventor.append(i.name)
            bundl = bundle.objects.filter(cid=cmp1)
            bundles = []
            bundlpro = []
            bundlqty = []
            bundlprice = []
            for i in bundl:
                bundles.append(i.name)
                bundlpro.append(
                    [i.product1, i.product2, i.product3, i.product4])
                bundlqty.append([i.qty1, i.qty2, i.qty3, i.qty4])
                bundlprice.append([i.price1, i.price2, i.price3, i.price4])
            invoc = invoice.objects.filter(cid=cmp1)
            invoic = []
            for i in invoc:
                invotot = 0.0
                for j in inventor:
                    if i.product == j:
                        invotot += float(i.total)
                    elif bundle.objects.get(name=i.product, cid=cmp1):
                        for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                            if i.product == b:
                                try:
                                    if j == bp[0]:
                                        totalcost = round(
                                            float(bprice[0]) * float(i.qty) * float(bq[0]), 2)
                                        invotot += totalcost
                                except:
                                    pass
                                try:
                                    if j == bp[1]:
                                        totalcost = round(
                                            float(bprice[1]) * float(i.qty) * float(bq[1]), 2)
                                        invotot += totalcost
                                except:
                                    pass
                                try:
                                    if j == bp[2]:
                                        totalcost = round(
                                            float(bprice[2]) * float(i.qty) * float(bq[2]), 2)
                                        invotot += totalcost
                                except:
                                    pass
                                try:
                                    if j == bp[3]:
                                        totalcost = round(
                                            float(bprice[3]) * float(i.qty) * float(bq[3]), 2)
                                        invotot += totalcost
                                except:
                                    pass
                    try:
                        if i.product2 == j:
                            invotot += float(i.total2)
                        elif bundle.objects.get(name=i.product2, cid=cmp1):
                            for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                if i.product2 == b:
                                    try:
                                        if j == bp[0]:
                                            totalcost = round(
                                                float(bprice[0]) * float(i.qty2) * float(bq[0]), 2)
                                            invotot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j == bp[1]:
                                            totalcost = round(
                                                float(bprice[1]) * float(i.qty2) * float(bq[1]), 2)
                                            invotot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j == bp[2]:
                                            totalcost = round(
                                                float(bprice[2]) * float(i.qty2) * float(bq[2]), 2)
                                            invotot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j == bp[3]:
                                            totalcost = round(
                                                float(bprice[3]) * float(i.qty2) * float(bq[3]), 2)
                                            invotot += totalcost
                                    except:
                                        pass
                    except:
                        pass
                    try:
                        if i.product3 == j:
                            invotot += float(i.total3)
                        elif bundle.objects.get(name=i.product3, cid=cmp1):
                            for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                if i.product3 == b:
                                    try:
                                        if j == bp[0]:
                                            totalcost = round(
                                                float(bprice[0]) * float(i.qty3) * float(bq[0]), 2)
                                            invotot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j == bp[1]:
                                            totalcost = round(
                                                float(bprice[1]) * float(i.qty3) * float(bq[1]), 2)
                                            invotot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j == bp[2]:
                                            totalcost = round(
                                                float(bprice[2]) * float(i.qty3) * float(bq[2]), 2)
                                            invotot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j == bp[3]:
                                            totalcost = round(
                                                float(bprice[3]) * float(i.qty3) * float(bq[3]), 2)
                                            invotot += totalcost
                                    except:
                                        pass
                    except:
                        pass
                    try:
                        if i.product4 == j:
                            invotot += float(i.total4)
                        elif bundle.objects.get(name=i.product4, cid=cmp1):
                            for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                if i.product4 == b:
                                    try:
                                        if j == bp[0]:
                                            totalcost = round(
                                                float(bprice[0]) * float(i.qty4) * float(bq[0]), 2)
                                            invotot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j == bp[1]:
                                            totalcost = round(
                                                float(bprice[1]) * float(i.qty4) * float(bq[1]), 2)
                                            invotot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j == bp[2]:
                                            totalcost = round(
                                                float(bprice[2]) * float(i.qty4) * float(bq[2]), 2)
                                            invotot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j == bp[3]:
                                            totalcost = round(
                                                float(bprice[3]) * float(i.qty4) * float(bq[3]), 2)
                                            invotot += totalcost
                                    except:
                                        pass
                    except:
                        pass
                invoic.append(
                    [i.invoicedate, i.invoiceno, (i.customername).replace(u'\xa0', u''),
                     invotot])
            context['invoice4'] = invoic
            creditnot = credit.objects.filter(cid=cmp1)
            creditnote4 = []
            for i in creditnot:
                credtot = 0.0
                for j in inventor:
                    try:
                        if i.product == j:
                            credtot += float(i.total)
                        elif bundle.objects.get(name=i.product, cid=cmp1):
                            for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                if i.product == b:
                                    try:
                                        if j == bp[0]:
                                            totalcost = round(
                                                float(bprice[0]) * float(i.qty) * float(bq[0]), 2)
                                            credtot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j == bp[1]:
                                            totalcost = round(
                                                float(bprice[1]) * float(i.qty) * float(bq[1]), 2)
                                            credtot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j == bp[2]:
                                            totalcost = round(
                                                float(bprice[2]) * float(i.qty) * float(bq[2]), 2)
                                            credtot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j == bp[3]:
                                            totalcost = round(
                                                float(bprice[3]) * float(i.qty) * float(bq[3]), 2)
                                            credtot += totalcost
                                    except:
                                        pass
                    except:
                        pass
                    try:
                        if i.product1 == j:
                            credtot += float(i.total1)
                        elif bundle.objects.get(name=i.product1, cid=cmp1):
                            for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                if i.product1 == b:
                                    try:
                                        if j == bp[0]:
                                            totalcost = round(
                                                float(bprice[0]) * float(i.qty1) * float(bq[0]), 2)
                                            credtot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j == bp[1]:
                                            totalcost = round(
                                                float(bprice[1]) * float(i.qty1) * float(bq[1]), 2)
                                            credtot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j == bp[2]:
                                            totalcost = round(
                                                float(bprice[2]) * float(i.qty1) * float(bq[2]), 2)
                                            credtot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j == bp[3]:
                                            totalcost = round(
                                                float(bprice[3]) * float(i.qty1) * float(bq[3]), 2)
                                            credtot += totalcost
                                    except:
                                        pass
                    except:
                        pass
                    try:
                        if i.product2 == j:
                            credtot += float(i.total2)
                        elif bundle.objects.get(name=i.product2, cid=cmp1):
                            for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                if i.product2 == b:
                                    try:
                                        if j == bp[0]:
                                            totalcost = round(
                                                float(bprice[0]) * float(i.qty2) * float(bq[0]), 2)
                                            credtot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j == bp[1]:
                                            totalcost = round(
                                                float(bprice[1]) * float(i.qty2) * float(bq[1]), 2)
                                            credtot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j == bp[2]:
                                            totalcost = round(
                                                float(bprice[2]) * float(i.qty2) * float(bq[2]), 2)
                                            credtot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j == bp[3]:
                                            totalcost = round(
                                                float(bprice[3]) * float(i.qty2) * float(bq[3]), 2)
                                            credtot += totalcost
                                    except:
                                        pass
                    except:
                        pass
                    try:
                        if i.product3 == j:
                            credtot += float(i.total3)
                        elif bundle.objects.get(name=i.product3, cid=cmp1):
                            for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                if i.product3 == b:
                                    try:
                                        if j == bp[0]:
                                            totalcost = round(
                                                float(bprice[0]) * float(i.qty3) * float(bq[0]), 2)
                                            credtot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j == bp[1]:
                                            totalcost = round(
                                                float(bprice[1]) * float(i.qty3) * float(bq[1]), 2)
                                            credtot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j == bp[2]:
                                            totalcost = round(
                                                float(bprice[2]) * float(i.qty3) * float(bq[2]), 2)
                                            credtot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j == bp[3]:
                                            totalcost = round(
                                                float(bprice[3]) * float(i.qty3) * float(bq[3]), 2)
                                            credtot += totalcost
                                    except:
                                        pass
                    except:
                        pass
                creditnote4.append(
                    [i.creditdate, i.creditno, (i.customer).replace(u'\xa0', u''), float(credtot)])
            context['creditnote4'] = creditnote4
            salesrecpt = salesrecpts.objects.filter(cid=cmp1)
            salesrecipt4 = []
            for i in salesrecpt:
                saletot = 0.0
                for j in inventor:
                    try:
                        if i.salepro == j:
                            saletot += float(i.saaletotal)
                        elif bundle.objects.get(name=i.salepro, cid=cmp1):
                            for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                if i.salepro == b:
                                    try:
                                        if j == bp[0]:
                                            totalcost = round(
                                                float(bprice[0]) * float(i.saleqty) * float(bq[0]), 2)
                                            saletot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j == bp[1]:
                                            totalcost = round(
                                                float(bprice[1]) * float(i.saleqty) * float(bq[1]), 2)
                                            saletot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j == bp[2]:
                                            totalcost = round(
                                                float(bprice[2]) * float(i.saleqty) * float(bq[2]), 2)
                                            saletot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j == bp[3]:
                                            totalcost = round(
                                                float(bprice[3]) * float(i.saleqty) * float(bq[3]), 2)
                                            saletot += totalcost
                                    except:
                                        pass
                    except:
                        pass
                    try:
                        if i.category2 == j:
                            saletot += float(i.cattotal2)
                        elif bundle.objects.get(name=i.category2, cid=cmp1):
                            for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                if i.category2 == b:
                                    try:
                                        if j == bp[0]:
                                            totalcost = round(
                                                float(bprice[0]) * float(i.catqty2) * float(bq[0]), 2)
                                            saletot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j == bp[1]:
                                            totalcost = round(
                                                float(bprice[1]) * float(i.catqty2) * float(bq[1]), 2)
                                            saletot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j == bp[2]:
                                            totalcost = round(
                                                float(bprice[2]) * float(i.catqty2) * float(bq[2]), 2)
                                            saletot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j == bp[3]:
                                            totalcost = round(
                                                float(bprice[3]) * float(i.catqty2) * float(bq[3]), 2)
                                            saletot += totalcost
                                    except:
                                        pass
                    except:
                        pass
                    try:
                        if i.category3 == j:
                            saletot += float(i.cattotal3)
                        elif bundle.objects.get(name=i.category3, cid=cmp1):
                            for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                if i.category3 == b:
                                    try:
                                        if j == bp[0]:
                                            totalcost = round(
                                                float(bprice[0]) * float(i.catqty3) * float(bq[0]), 2)
                                            saletot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j == bp[1]:
                                            totalcost = round(
                                                float(bprice[1]) * float(i.catqty3) * float(bq[1]), 2)
                                            saletot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j == bp[2]:
                                            totalcost = round(
                                                float(bprice[2]) * float(i.catqty3) * float(bq[2]), 2)
                                            saletot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j == bp[3]:
                                            totalcost = round(
                                                float(bprice[3]) * float(i.catqty3) * float(bq[3]), 2)
                                            saletot += totalcost
                                    except:
                                        pass
                    except:
                        pass
                    try:
                        if i.category4 == j:
                            saletot += float(i.cattotal4)
                        elif bundle.objects.get(name=i.category4, cid=cmp1):
                            for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                if i.category4 == b:
                                    try:
                                        if j == bp[0]:
                                            totalcost = round(
                                                float(bprice[0]) * float(i.catqty4) * float(bq[0]), 2)
                                            saletot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j == bp[1]:
                                            totalcost = round(
                                                float(bprice[1]) * float(i.catqty4) * float(bq[1]), 2)
                                            saletot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j == bp[2]:
                                            totalcost = round(
                                                float(bprice[2]) * float(i.catqty4) * float(bq[2]), 2)
                                            saletot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j == bp[3]:
                                            totalcost = round(
                                                float(bprice[3]) * float(i.catqty4) * float(bq[3]), 2)
                                            saletot += totalcost
                                    except:
                                        pass
                    except:
                        pass
                salesrecipt4.append(
                    [i.saledate, i.saleno, (i.salename).replace(u'\xa0', u''), float(saletot)])
            context['salesrecipt4'] = salesrecipt4
        else:
            pass
        if noninventory.objects.filter(income=account.name, cid=cmp1):
            noninvento = noninventory.objects.filter(
                income=account.name, cid=cmp1)
            noninventor = []
            for i in noninvento:
                noninventor.append(i.name)
            bundl = bundle.objects.filter(cid=cmp1)
            bundles = []
            bundlpro = []
            bundlqty = []
            bundlprice = []
            for i in bundl:
                bundles.append(i.name)
                bundlpro.append(
                    [i.product1, i.product2, i.product3, i.product4])
                bundlqty.append([i.qty1, i.qty2, i.qty3, i.qty4])
                bundlprice.append([i.price1, i.price2, i.price3, i.price4])
            invoc = invoice.objects.filter(cid=cmp1)
            invoic = []
            for i in invoc:
                invotot = 0.0
                for j in noninventor:
                    try:
                        if i.product == j:
                            invotot += float(i.total)
                        elif bundle.objects.get(name=i.product, cid=cmp1):
                            for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                if i.product == b:
                                    try:
                                        if j == bp[0]:
                                            totalcost = round(
                                                float(bprice[0]) * float(i.qty) * float(bq[0]), 2)
                                            invotot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j == bp[1]:
                                            totalcost = round(
                                                float(bprice[1]) * float(i.qty) * float(bq[1]), 2)
                                            invotot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j == bp[2]:
                                            totalcost = round(
                                                float(bprice[2]) * float(i.qty) * float(bq[2]), 2)
                                            invotot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j == bp[3]:
                                            totalcost = round(
                                                float(bprice[3]) * float(i.qty) * float(bq[3]), 2)
                                            invotot += totalcost
                                    except:
                                        pass
                    except:
                        pass
                    try:
                        if i.product2 == j:
                            invotot += float(i.total2)
                        elif bundle.objects.get(name=i.product2, cid=cmp1):
                            for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                if i.product2 == b:
                                    try:
                                        if j == bp[0]:
                                            totalcost = round(
                                                float(bprice[0]) * float(i.qty2) * float(bq[0]), 2)
                                            invotot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j == bp[1]:
                                            totalcost = round(
                                                float(bprice[1]) * float(i.qty2) * float(bq[1]), 2)
                                            invotot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j == bp[2]:
                                            totalcost = round(
                                                float(bprice[2]) * float(i.qty2) * float(bq[2]), 2)
                                            invotot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j == bp[3]:
                                            totalcost = round(
                                                float(bprice[3]) * float(i.qty2) * float(bq[3]), 2)
                                            invotot += totalcost
                                    except:
                                        pass
                    except:
                        pass
                    try:
                        if i.product3 == j:
                            invotot += float(i.total3)
                        elif bundle.objects.get(name=i.product3, cid=cmp1):
                            for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                if i.product3 == b:
                                    try:
                                        if j == bp[0]:
                                            totalcost = round(
                                                float(bprice[0]) * float(i.qty3) * float(bq[0]), 2)
                                            invotot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j == bp[1]:
                                            totalcost = round(
                                                float(bprice[1]) * float(i.qty3) * float(bq[1]), 2)
                                            invotot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j == bp[2]:
                                            totalcost = round(
                                                float(bprice[2]) * float(i.qty3) * float(bq[2]), 2)
                                            invotot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j == bp[3]:
                                            totalcost = round(
                                                float(bprice[3]) * float(i.qty3) * float(bq[3]), 2)
                                            invotot += totalcost
                                    except:
                                        pass
                    except:
                        pass
                    try:
                        if i.product4 == j:
                            invotot += float(i.total4)
                        elif bundle.objects.get(name=i.product4, cid=cmp1):
                            for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                if i.product4 == b:
                                    try:
                                        if j == bp[0]:
                                            totalcost = round(
                                                float(bprice[0]) * float(i.qty4) * float(bq[0]), 2)
                                            invotot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j == bp[1]:
                                            totalcost = round(
                                                float(bprice[1]) * float(i.qty4) * float(bq[1]), 2)
                                            invotot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j == bp[2]:
                                            totalcost = round(
                                                float(bprice[2]) * float(i.qty4) * float(bq[2]), 2)
                                            invotot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j == bp[3]:
                                            totalcost = round(
                                                float(bprice[3]) * float(i.qty4) * float(bq[3]), 2)
                                            invotot += totalcost
                                    except:
                                        pass
                    except:
                        pass
                invoic.append(
                    [i.invoicedate, i.invoiceno, (i.customername).replace(u'\xa0', u''),
                     float(invotot)])
            context['invoice6'] = invoic
            creditnot = credit.objects.filter(cid=cmp1)
            creditnote4 = []
            for i in creditnot:
                credtot = 0.0
                for j in noninventor:
                    try:
                        if i.product == j:
                            credtot += float(i.total)
                        elif bundle.objects.get(name=i.product, cid=cmp1):
                            for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                if i.product == b:
                                    try:
                                        if j == bp[0]:
                                            totalcost = round(
                                                float(bprice[0]) * float(i.qty) * float(bq[0]), 2)
                                            credtot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j == bp[1]:
                                            totalcost = round(
                                                float(bprice[1]) * float(i.qty) * float(bq[1]), 2)
                                            credtot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j == bp[2]:
                                            totalcost = round(
                                                float(bprice[2]) * float(i.qty) * float(bq[2]), 2)
                                            credtot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j == bp[3]:
                                            totalcost = round(
                                                float(bprice[3]) * float(i.qty) * float(bq[3]), 2)
                                            credtot += totalcost
                                    except:
                                        pass
                    except:
                        pass
                    try:
                        if i.product1 == j:
                            credtot += float(i.total1)
                        elif bundle.objects.get(name=i.product1, cid=cmp1):
                            for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                if i.product1 == b:
                                    try:
                                        if j == bp[0]:
                                            totalcost = round(
                                                float(bprice[0]) * float(i.qty1) * float(bq[0]), 2)
                                            credtot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j == bp[1]:
                                            totalcost = round(
                                                float(bprice[1]) * float(i.qty1) * float(bq[1]), 2)
                                            credtot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j == bp[2]:
                                            totalcost = round(
                                                float(bprice[2]) * float(i.qty1) * float(bq[2]), 2)
                                            credtot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j == bp[3]:
                                            totalcost = round(
                                                float(bprice[3]) * float(i.qty1) * float(bq[3]), 2)
                                            credtot += totalcost
                                    except:
                                        pass
                    except:
                        pass
                    try:
                        if i.product2 == j:
                            credtot += float(i.total2)
                        elif bundle.objects.get(name=i.product2, cid=cmp1):
                            for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                if i.product2 == b:
                                    try:
                                        if j == bp[0]:
                                            totalcost = round(
                                                float(bprice[0]) * float(i.qty2) * float(bq[0]), 2)
                                            credtot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j == bp[1]:
                                            totalcost = round(
                                                float(bprice[1]) * float(i.qty2) * float(bq[1]), 2)
                                            credtot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j == bp[2]:
                                            totalcost = round(
                                                float(bprice[2]) * float(i.qty2) * float(bq[2]), 2)
                                            credtot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j == bp[3]:
                                            totalcost = round(
                                                float(bprice[3]) * float(i.qty2) * float(bq[3]), 2)
                                            credtot += totalcost
                                    except:
                                        pass
                    except:
                        pass
                    try:
                        if i.product3 == j:
                            credtot += float(i.total3)
                        elif bundle.objects.get(name=i.product3, cid=cmp1):
                            for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                if i.product3 == b:
                                    try:
                                        if j == bp[0]:
                                            totalcost = round(
                                                float(bprice[0]) * float(i.qty3) * float(bq[0]), 2)
                                            credtot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j == bp[1]:
                                            totalcost = round(
                                                float(bprice[1]) * float(i.qty3) * float(bq[1]), 2)
                                            credtot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j == bp[2]:
                                            totalcost = round(
                                                float(bprice[2]) * float(i.qty3) * float(bq[2]), 2)
                                            credtot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j == bp[3]:
                                            totalcost = round(
                                                float(bprice[3]) * float(i.qty3) * float(bq[3]), 2)
                                            credtot += totalcost
                                    except:
                                        pass
                    except:
                        pass
                creditnote4.append(
                    [i.creditdate, i.creditno, (i.customer).replace(u'\xa0', u''), float(credtot)])
            context['creditnote6'] = creditnote4
            salesrecpt = salesrecpts.objects.filter(cid=cmp1)
            salesrecipt4 = []
            for i in salesrecpt:
                saletot = 0.0
                for j in noninventor:
                    try:
                        if i.salepro == j:
                            saletot += float(i.saaletotal)
                        elif bundle.objects.get(name=i.salepro, cid=cmp1):
                            for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                if i.salepro == b:
                                    try:
                                        if j == bp[0]:
                                            totalcost = round(
                                                float(bprice[0]) * float(i.saleqty) * float(bq[0]), 2)
                                            saletot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j == bp[1]:
                                            totalcost = round(
                                                float(bprice[1]) * float(i.saleqty) * float(bq[1]), 2)
                                            saletot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j == bp[2]:
                                            totalcost = round(
                                                float(bprice[2]) * float(i.saleqty) * float(bq[2]), 2)
                                            saletot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j == bp[3]:
                                            totalcost = round(
                                                float(bprice[3]) * float(i.saleqty) * float(bq[3]), 2)
                                            saletot += totalcost
                                    except:
                                        pass
                    except:
                        pass
                    try:
                        if i.category2 == j:
                            saletot += float(i.cattotal2)
                        elif bundle.objects.get(name=i.category2, cid=cmp1):
                            for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                if i.category2 == b:
                                    try:
                                        if j == bp[0]:
                                            totalcost = round(
                                                float(bprice[0]) * float(i.catqty2) * float(bq[0]), 2)
                                            saletot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j == bp[1]:
                                            totalcost = round(
                                                float(bprice[1]) * float(i.catqty2) * float(bq[1]), 2)
                                            saletot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j == bp[2]:
                                            totalcost = round(
                                                float(bprice[2]) * float(i.catqty2) * float(bq[2]), 2)
                                            saletot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j == bp[3]:
                                            totalcost = round(
                                                float(bprice[3]) * float(i.catqty2) * float(bq[3]), 2)
                                            saletot += totalcost
                                    except:
                                        pass
                    except:
                        pass
                    try:
                        if i.category3 == j:
                            saletot += float(i.cattotal3)
                        elif bundle.objects.get(name=i.category3, cid=cmp1):
                            for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                if i.category3 == b:
                                    try:
                                        if j == bp[0]:
                                            totalcost = round(
                                                float(bprice[0]) * float(i.catqty3) * float(bq[0]), 2)
                                            saletot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j == bp[1]:
                                            totalcost = round(
                                                float(bprice[1]) * float(i.catqty3) * float(bq[1]), 2)
                                            saletot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j == bp[2]:
                                            totalcost = round(
                                                float(bprice[2]) * float(i.catqty3) * float(bq[2]), 2)
                                            saletot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j == bp[3]:
                                            totalcost = round(
                                                float(bprice[3]) * float(i.catqty3) * float(bq[3]), 2)
                                            saletot += totalcost
                                    except:
                                        pass
                    except:
                        pass
                    try:
                        if i.category4 == j:
                            saletot += float(i.cattotal4)
                        elif bundle.objects.get(name=i.category4, cid=cmp1):
                            for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                if i.category4 == b:
                                    try:
                                        if j == bp[0]:
                                            totalcost = round(
                                                float(bprice[0]) * float(i.catqty4) * float(bq[0]), 2)
                                            saletot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j == bp[1]:
                                            totalcost = round(
                                                float(bprice[1]) * float(i.catqty4) * float(bq[1]), 2)
                                            saletot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j == bp[2]:
                                            totalcost = round(
                                                float(bprice[2]) * float(i.catqty4) * float(bq[2]), 2)
                                            saletot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j == bp[3]:
                                            totalcost = round(
                                                float(bprice[3]) * float(i.catqty4) * float(bq[3]), 2)
                                            saletot += totalcost
                                    except:
                                        pass
                    except:
                        pass
                salesrecipt4.append(
                    [i.saledate, i.saleno, (i.salename).replace(u'\xa0', u''), float(saletot)])
            context['salesrecipt6'] = salesrecipt4
        else:
            pass
        if inventory.objects.filter(expacnt=account.name, cid=cmp1):
            invento = inventory.objects.filter(expacnt=account.name, cid=cmp1)
            inventor = []
            for i in invento:
                inventor.append([i.name, i.cost])
            bundl = bundle.objects.filter(cid=cmp1)
            bundles = []
            bundlpro = []
            bundlqty = []
            bundlprice = []
            for i in bundl:
                bundles.append(i.name)
                bundlpro.append(
                    [i.product1, i.product2, i.product3, i.product4])
                bundlqty.append([i.qty1, i.qty2, i.qty3, i.qty4])
                # bundlprice.append([i.price1, i.price2, i.price3, i.price4])
            invoc = invoice.objects.filter(cid=cmp1)
            invoic = []
            for i in invoc:
                invotot = 0.0
                for j in inventor:
                    try:
                        if i.product == j[0]:
                            totalcost = round(float(j[1]) * float(i.qty), 2)
                            invotot += totalcost
                        elif bundle.objects.get(name=i.product, cid=cmp1):
                            for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                if i.product == b:
                                    try:
                                        if j[0] == bp[0]:
                                            totalcost = round(
                                                float(j[1]) * float(i.qty) * float(bq[0]), 2)
                                            invotot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j[0] == bp[1]:
                                            totalcost = round(
                                                float(j[1]) * float(i.qty) * float(bq[1]), 2)
                                            invotot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j[0] == bp[2]:
                                            totalcost = round(
                                                float(j[1]) * float(i.qty) * float(bq[2]), 2)
                                            invotot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j[0] == bp[3]:
                                            totalcost = round(
                                                float(j[1]) * float(i.qty) * float(bq[3]), 2)
                                            invotot += totalcost
                                    except:
                                        pass
                                else:
                                    pass
                    except:
                        pass
                    try:
                        if i.product2 == j[0]:
                            totalcost = round(
                                float(j[1]) * float(i.qty2), 2)
                            invotot += totalcost
                        elif bundle.objects.get(name=i.product2, cid=cmp1):
                            for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                if i.product2 == b:
                                    try:
                                        if j[0] == bp[0]:
                                            totalcost = round(
                                                float(j[1]) * float(i.qty2) * float(bq[0]), 2)
                                            invotot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j[0] == bp[1]:
                                            totalcost = round(
                                                float(j[1]) * float(i.qty2) * float(bq[1]), 2)
                                            invotot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j[0] == bp[2]:
                                            totalcost = round(
                                                float(j[1]) * float(i.qty2) * float(bq[2]), 2)
                                            invotot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j[0] == bp[3]:
                                            totalcost = round(
                                                float(j[1]) * float(i.qty2) * float(bq[3]), 2)
                                            invotot += totalcost
                                    except:
                                        pass
                    except:
                        pass
                    try:
                        if i.product3 == j[0]:
                            totalcost = round(
                                float(j[1]) * float(i.qty3), 2)
                            invotot += totalcost
                        elif bundle.objects.get(name=i.product3, cid=cmp1):
                            for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                if i.product3 == b:
                                    try:
                                        if j[0] == bp[0]:
                                            totalcost = round(
                                                float(j[1]) * float(i.qty3) * float(bq[0]), 2)
                                            invotot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j[0] == bp[1]:
                                            totalcost = round(
                                                float(j[1]) * float(i.qty3) * float(bq[1]), 2)
                                            invotot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j[0] == bp[2]:
                                            totalcost = round(
                                                float(j[1]) * float(i.qty3) * float(bq[2]), 2)
                                            invotot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j[0] == bp[3]:
                                            totalcost = round(
                                                float(j[1]) * float(i.qty3) * float(bq[3]), 2)
                                            invotot += totalcost
                                    except:
                                        pass
                                else:
                                    pass
                    except:
                        pass
                    try:
                        if i.product4 == j[0]:
                            totalcost = round(
                                float(j[1]) * float(i.qty4), 2)
                            invotot += totalcost
                        elif bundle.objects.get(name=i.product4, cid=cmp1):
                            for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                if i.product4 == b:
                                    try:
                                        if j[0] == bp[0]:
                                            totalcost = round(
                                                float(j[1]) * float(i.qty4) * float(bq[0]), 2)
                                            invotot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j[0] == bp[1]:
                                            totalcost = round(
                                                float(j[1]) * float(i.qty4) * float(bq[1]), 2)
                                            invotot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j[0] == bp[2]:
                                            totalcost = round(
                                                float(j[1]) * float(i.qty4) * float(bq[2]), 2)
                                            invotot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j[0] == bp[3]:
                                            totalcost = round(
                                                float(j[1]) * float(i.qty4) * float(bq[3]), 2)
                                            invotot += totalcost
                                    except:
                                        pass
                                else:
                                    pass
                    except:
                        pass
                invoic.append(
                    [i.invoicedate, i.invoiceno, (i.customername).replace(u'\xa0', u''), invotot])
            context['invoiceexpacnt'] = invoic
            creditnot = credit.objects.filter(cid=cmp1)
            creditnote5 = []
            for i in creditnot:
                credtot = 0.0
                for j in inventor:
                    try:
                        if i.product == j[0]:
                            totalcost = round(
                                float(j[1]) * float(i.qty), 2)
                            credtot += totalcost
                        elif bundle.objects.get(name=i.product, cid=cmp1):
                            for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                if i.product == b:
                                    try:
                                        if j[0] == bp[0]:
                                            totalcost = round(
                                                float(j[1]) * float(i.qty) * float(bq[0]), 2)
                                            credtot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j[0] == bp[1]:
                                            totalcost = round(
                                                float(j[1]) * float(i.qty) * float(bq[1]), 2)
                                            credtot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j[0] == bp[2]:
                                            totalcost = round(
                                                float(j[1]) * float(i.qty) * float(bq[2]), 2)
                                            credtot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j[0] == bp[3]:
                                            totalcost = round(
                                                float(j[1]) * float(i.qty) * float(bq[3]), 2)
                                            credtot += totalcost
                                    except:
                                        pass
                    except:
                        pass
                    try:
                        if i.product1 == j[0]:
                            totalcost = round(
                                float(j[1]) * float(i.qty1), 2)
                            credtot += totalcost
                        elif bundle.objects.get(name=i.product1, cid=cmp1):
                            for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                if i.product1 == b:
                                    try:
                                        if j[0] == bp[0]:
                                            totalcost = round(
                                                float(j[1]) * float(i.qty1) * float(bq[0]), 2)
                                            credtot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j[0] == bp[1]:
                                            totalcost = round(
                                                float(j[1]) * float(i.qty1) * float(bq[1]), 2)
                                            credtot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j[0] == bp[2]:
                                            totalcost = round(
                                                float(j[1]) * float(i.qty1) * float(bq[2]), 2)
                                            credtot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j[0] == bp[3]:
                                            totalcost = round(
                                                float(j[1]) * float(i.qty1) * float(bq[3]), 2)
                                            credtot += totalcost
                                    except:
                                        pass
                    except:
                        pass
                    try:
                        if i.product2 == j[0]:
                            totalcost = round(
                                float(j[1]) * float(i.qty2), 2)
                            credtot += totalcost
                        elif bundle.objects.get(name=i.product2, cid=cmp1):
                            for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                if i.product2 == b:
                                    try:
                                        if j[0] == bp[0]:
                                            totalcost = round(
                                                float(j[1]) * float(i.qty2) * float(bq[0]), 2)
                                            credtot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j[0] == bp[1]:
                                            totalcost = round(
                                                float(j[1]) * float(i.qty2) * float(bq[1]), 2)
                                            credtot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j[0] == bp[2]:
                                            totalcost = round(
                                                float(j[1]) * float(i.qty2) * float(bq[2]), 2)
                                            credtot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j[0] == bp[3]:
                                            totalcost = round(
                                                float(j[1]) * float(i.qty2) * float(bq[3]), 2)
                                            credtot += totalcost
                                    except:
                                        pass
                    except:
                        pass
                    try:
                        if i.product3 == j[0]:
                            totalcost = round(
                                float(j[1]) * float(i.qty3), 2)
                            credtot += totalcost
                        elif bundle.objects.get(name=i.product3, cid=cmp1):
                            for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                if i.product3 == b:
                                    try:
                                        if j[0] == bp[0]:
                                            totalcost = round(
                                                float(j[1]) * float(i.qty3) * float(bq[0]), 2)
                                            credtot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j[0] == bp[1]:
                                            totalcost = round(
                                                float(j[1]) * float(i.qty3) * float(bq[1]), 2)
                                            credtot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j[0] == bp[2]:
                                            totalcost = round(
                                                float(j[1]) * float(i.qty3) * float(bq[2]), 2)
                                            credtot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j[0] == bp[3]:
                                            totalcost = round(
                                                float(j[1]) * float(i.qty3) * float(bq[3]), 2)
                                            credtot += totalcost
                                    except:
                                        pass
                    except:
                        pass
                creditnote5.append(
                    [i.creditdate, i.creditno, (i.customer).replace(u'\xa0', u''), credtot])
            context['creditnoteexpacnt'] = creditnote5
            salesrecpt = salesrecpts.objects.filter(cid=cmp1)
            salesrecipt5 = []
            for i in salesrecpt:
                saletot = 0.0
                for j in inventor:
                    try:
                        if i.salepro == j[0]:
                            totalcost = round(
                                float(j[1]) * float(i.saleqty), 2)
                            saletot += totalcost
                        elif bundle.objects.get(name=i.salepro, cid=cmp1):
                            for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                if i.salepro == b:
                                    try:
                                        if j[0] == bp[0]:
                                            totalcost = round(
                                                float(j[1]) * float(i.saleqty) * float(bq[0]), 2)
                                            saletot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j[0] == bp[1]:
                                            totalcost = round(
                                                float(j[1]) * float(i.saleqty) * float(bq[1]), 2)
                                            saletot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j[0] == bp[2]:
                                            totalcost = round(
                                                float(j[1]) * float(i.saleqty) * float(bq[2]), 2)
                                            saletot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j[0] == bp[3]:
                                            totalcost = round(
                                                float(j[1]) * float(i.saleqty) * float(bq[3]), 2)
                                            saletot += totalcost
                                    except:
                                        pass
                    except:
                        pass
                    try:
                        if i.category2 == j[0]:
                            totalcost = round(
                                float(j[1]) * float(i.catqty2), 2)
                            saletot += totalcost
                        elif bundle.objects.get(name=i.category2, cid=cmp1):
                            for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                if i.category2 == b:
                                    try:
                                        if j[0] == bp[0]:
                                            totalcost = round(
                                                float(j[1]) * float(i.catqty2) * float(bq[0]), 2)
                                            saletot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j[0] == bp[1]:
                                            totalcost = round(
                                                float(j[1]) * float(i.catqty2) * float(bq[1]), 2)
                                            saletot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j[0] == bp[2]:
                                            totalcost = round(
                                                float(j[1]) * float(i.catqty2) * float(bq[2]), 2)
                                            saletot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j[0] == bp[3]:
                                            totalcost = round(
                                                float(j[1]) * float(i.catqty2) * float(bq[3]), 2)
                                            saletot += totalcost
                                    except:
                                        pass
                    except:
                        pass
                    try:
                        if i.category3 == j[0]:
                            totalcost = round(
                                float(j[1]) * float(i.catqty3), 2)
                            saletot += totalcost
                        elif bundle.objects.get(name=i.category3, cid=cmp1):
                            for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                if i.category3 == b:
                                    try:
                                        if j[0] == bp[0]:
                                            totalcost = round(
                                                float(j[1]) * float(i.catqty3) * float(bq[0]), 2)
                                            saletot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j[0] == bp[1]:
                                            totalcost = round(
                                                float(j[1]) * float(i.catqty3) * float(bq[1]), 2)
                                            saletot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j[0] == bp[2]:
                                            totalcost = round(
                                                float(j[1]) * float(i.catqty3) * float(bq[2]), 2)
                                            saletot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j[0] == bp[3]:
                                            totalcost = round(
                                                float(j[1]) * float(i.catqty3) * float(bq[3]), 2)
                                            saletot += totalcost
                                    except:
                                        pass
                    except:
                        pass
                    try:
                        if i.category4 == j[0]:
                            totalcost = round(
                                float(j[1]) * float(i.catqty4), 2)
                            saletot += totalcost
                        elif bundle.objects.get(name=i.category4, cid=cmp1):
                            for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                if i.category4 == b:
                                    try:
                                        if j[0] == bp[0]:
                                            totalcost = round(
                                                float(j[1]) * float(i.catqty4) * float(bq[0]), 2)
                                            saletot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j[0] == bp[1]:
                                            totalcost = round(
                                                float(j[1]) * float(i.catqty4) * float(bq[1]), 2)
                                            saletot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j[0] == bp[2]:
                                            totalcost = round(
                                                float(j[1]) * float(i.catqty4) * float(bq[2]), 2)
                                            saletot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j[0] == bp[3]:
                                            totalcost = round(
                                                float(j[1]) * float(i.catqty4) * float(bq[3]), 2)
                                            saletot += totalcost
                                    except:
                                        pass
                    except:
                        pass
                salesrecipt5.append(
                    [i.saledate, i.saleno, (i.salename).replace(u'\xa0', u''), saletot])
            context['salesreciptexpacnt'] = salesrecipt5
        else:
            pass
        if noninventory.objects.filter(expenseaccount=account.name, cid=cmp1):
            noninvento = noninventory.objects.filter(
                expenseaccount=account.name, cid=cmp1)
            noninventor = []
            for i in noninvento:
                noninventor.append(i.name)
            expen = expences.objects.filter(cid=cmp1)
            expence = []
            for i in expen:
                for j in noninventor:
                    if i.product == j:
                        expence.append(
                            [i.paymdate, i.refno, (i.payee).replace(u'\xa0', u''), float(i.total)])

                    try:
                        if i.product2 == j:
                            expence.append(
                                [i.paymdate, i.refno, (i.payee).replace(u'\xa0', u''), float(i.total2)])
                    except:
                        pass
                    try:
                        if i.product3 == j:
                            expence.append(
                                [i.paymdate, i.refno, (i.payee).replace(u'\xa0', u''), float(i.total3)])
                    except:
                        pass
                    try:
                        if i.product4 == j:
                            expence.append(
                                [i.paymdate, i.refno, (i.payee).replace(u'\xa0', u''), float(i.total4)])
                    except:
                        pass
            context['expence5'] = expence
            debi = suplrcredit.objects.filter(cid=cmp1)
            debit = []
            for i in debi:
                for j in noninventor:
                    try:
                        if i.product == j:
                            debit.append(
                                [i.paymdate, i.refno, (i.supplier).replace(u'\xa0', u''), float(i.total)])
                    except:
                        pass
                    try:
                        if i.product2 == j:
                            debit.append(
                                [i.paymdate, i.refno, (i.supplier).replace(u'\xa0', u''), float(i.total2)])
                    except:
                        pass
                    try:
                        if i.product3 == j:
                            debit.append(
                                [i.paymdate, i.refno, (i.supplier).replace(u'\xa0', u''), float(i.total3)])
                    except:
                        pass
                    try:
                        if i.product4 == j:
                            debit.append(
                                [i.paymdate, i.refno, (i.supplier).replace(u'\xa0', u''), float(i.total4)])
                    except:
                        pass
            context['debit5'] = debit
        else:
            pass
        if salesrecpts.objects.filter(saledeposit=account.name, cid=cmp1):
            salesrecpt = salesrecpts.objects.filter(
                saledeposit=account.name, cid=cmp1)
            context['salesrecipt7'] = salesrecpt
        else:
            pass
        if payment.objects.filter(depto=account.name, cid=cmp1):
            payment1 = payment.objects.filter(depto=account.name, cid=cmp1)
            context['payment1'] = payment1
        else:
            pass
        if bills.objects.filter(paymacnt=account.name, cid=cmp1):
            bill = bills.objects.filter(paymacnt=account.name, cid=cmp1)
            context['bill1'] = bill
        else:
            pass
        return render(request, 'app1/runreportnew.html', context)
    except:
        return redirect('gocoa')


@login_required(login_url='regcomp')
def runreportfiltered(request, accounts1id):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        account = accounts1.objects.get(accounts1id=accounts1id, cid=cmp1)
        toda = date.today()
        tod = toda.strftime("%Y-%m-%d")
        filmeth = request.POST['reportperiod']
        if filmeth == 'Today':
            fromdate = tod
            todate = tod
        elif filmeth == 'Custom':
            fromdate = request.POST['fper']
            todate = request.POST['tper']
        elif filmeth == 'This month':
            fromdate = toda.strftime("%Y-%m-01")
            todate = toda.strftime("%Y-%m-31")
        elif filmeth == 'This financial year':
            if int(toda.strftime("%m")) >= 1 and int(toda.strftime("%m")) <= 3:
                pyear = int(toda.strftime("%Y")) - 1
                fromdate = f'{pyear}-03-01'
                todate = f'{toda.strftime("%Y")}-03-31'
                print(fromdate, todate)
            else:
                pyear = int(toda.strftime("%Y")) + 1
                fromdate = f'{toda.strftime("%Y")}-03-01'
                todate = f'{pyear}-03-31'
                print(fromdate, todate)
        else:
            return redirect('runreport')
        context = {'cmp1': cmp1, 'accbal': account.balance, 'account': account}
        if account.name == 'Account Receivable(Debtors)':
            invoce = []
            invoi = invoice.objects.raw(
                'select * from app1_invoice where (invoicedate between %s and %s)', [fromdate, todate, ])
            total = 0.0
            for i in invoi:
                if i.cid == cmp1:
                    total += float(i.grandtotal)
                    invoce.append(
                        [i.invoicedate, i.invoiceno, (i.customername).replace(u'\xa0', u''), float(i.grandtotal)])
            creditnot = []
            creditnote = credit.objects.raw('select * from app1_credit where creditdate between %s and %s',
                                            [fromdate, todate, ])
            for i in creditnote:
                if i.cid == cmp1:
                    creditnot.append(
                        [i.creditdate, i.creditno, (i.customer).replace(u'\xa0', u''), float(i.grndtot)])
                    total -= float(i.grndtot)
            payments = []
            paymen = payment.objects.raw('select * from app1_payment where paymdate between %s and %s',
                                         [fromdate, todate, ])
            for i in paymen:
                if i.cid == cmp1:
                    payments.append(
                        [i.paymdate, i.refno, (i.customer).replace(u'\xa0', u''), float(i.amtapply)])
                    total -= float(i.amtapply)
            salesofline = []
            sales = salesrecpts.objects.raw('select * from app1_salesrecpts where saledate between %s and %s',
                                            [fromdate, todate, ])
            for i in sales:
                if i.cid == cmp1 and i.offline == 'True':
                    salesofline.append(
                        [i.saledate, i.salerefno, (i.salename).replace(u'\xa0', u''), float(i.salegrandtotal)])
                    total -= float(i.salegrandtotal)
            context = {'cmp1': cmp1, 'account': account, 'invoic': invoce, 'accbal': total, 'creditnote': creditnot,
                       'payment': payments, 'saleoffline': salesofline}
        elif account.name == 'Accounts Payable(Creditors)':
            total = 0.0
            bil = []
            bill = bills.objects.raw(
                'select * from app1_bills where paymdate between %s and %s', [fromdate, todate, ])
            for b in bill:
                if b.cid == cmp1 and b.payornot == 'openbalance':
                    bil.append(
                        [b.paymdate, b.refno, (b.payee).replace(u'\xa0', u''), float(b.grandtotal)])
                    total = total + float(b.grandtotal)
            bil2 = []
            bill2 = bills.objects.raw(
                'select * from app1_bills where paymdate between %s and %s', [fromdate, todate, ])
            for b in bill2:
                if b.cid == cmp1 and b.payornot != 'openbalance' and b.payornot != 'debit':
                    bil2.append(
                        [b.paymdate, b.refno, (b.payee).replace(u'\xa0', u''), float(b.grandtotal)])
                    total = total - float(b.grandtotal)
            bil3 = []
            for b in bill2:
                if b.cid == cmp1 and b.payornot == 'debit':
                    bil3.append(
                        [b.paymdate, b.refno, (b.payee).replace(u'\xa0', u''), float(b.grandtotal)])
                    total = total - float(b.grandtotal)
            debt = []
            debit = suplrcredit.objects.raw('select * from app1_suplrcredit where paymdate between %s and %s',
                                            [fromdate, todate, ])
            for b in debit:
                if b.cid == cmp1:
                    debt.append(
                        [b.paymdate, b.refno, (b.supplier).replace(u'\xa0', u''), float(b.grandtotal)])
                    total = total - float(b.grandtotal)
            expen = []
            expence = expences.objects.raw('select * from app1_expences where paymdate between %s and %s',
                                           [fromdate, todate, ])
            for b in expence:
                if b.cid == cmp1:
                    expen.append(
                        [b.paymdate, b.refno, (b.payee).replace(u'\xa0', u''), float(b.grandtotal)])
                    total = total + float(b.grandtotal)
            context = {'cmp1': cmp1, 'bill': bil, 'bill2': bil2, 'billdebit': bil3, 'debit': debt, 'expence': expen,
                       'account': account,
                       'accbal': total}
        elif account.name == 'Input CGST':
            total = 0.0
            deb = suplrcredit.objects.raw('select * from app1_suplrcredit where paymdate between %s and %s',
                                          [fromdate, todate, ])
            debit = []
            for i in deb:
                if i.cid == cmp1:
                    name = i.supplier
                    x = name.split()
                    if len(x) == 3:
                        firstname = x[0]
                        lastname = x[1] + ' ' + x[2]
                        supp = supplier.objects.get(
                            firstname=firstname, lastname=lastname, cid=cmp1)
                    else:
                        supp = supplier.objects.get(
                            firstname=x[0], lastname=x[1], cid=cmp1)
                    if supp.state == cmp1.state:
                        total -= float(i.taxamount) / 2
                        debit.append(
                            [i.paymdate, i.refno, i.supplier, float(i.taxamount) / 2])
            expen = expences.objects.raw('select * from app1_expences where paymdate between %s and %s',
                                         [fromdate, todate, ])
            expence = []
            for i in expen:
                if i.cid == cmp1:
                    name = i.payee
                    x = name.split()
                    if len(x) == 3:
                        firstname = x[0]
                        lastname = x[1] + ' ' + x[2]
                        supp = supplier.objects.get(
                            firstname=firstname, lastname=lastname)
                    else:
                        supp = supplier.objects.get(
                            firstname=x[0], lastname=x[1])
                    if supp.state == cmp1.state:
                        total += float(i.taxamount) / 2
                        expence.append([i.paymdate, i.refno, (i.payee).replace(
                            u'\xa0', u''), float(i.taxamount) / 2])
            context = {'cmp1': cmp1, 'debit1': debit,
                       'expence1': expence, 'account': account, 'accbal': total}
        elif account.name == 'Input SGST':
            total = 0.0
            deb = suplrcredit.objects.raw('select * from app1_suplrcredit where paymdate between %s and %s',
                                          [fromdate, todate, ])
            debit = []
            for i in deb:
                if i.cid == cmp1:
                    name = i.supplier
                    x = name.split()
                    if len(x) == 3:
                        firstname = x[0]
                        lastname = x[1] + ' ' + x[2]
                        supp = supplier.objects.get(
                            firstname=firstname, lastname=lastname, cid=cmp1)
                    else:
                        supp = supplier.objects.get(
                            firstname=x[0], lastname=x[1], cid=cmp1)
                    if supp.state == cmp1.state:
                        total -= float(i.taxamount) / 2
                        debit.append(
                            [i.paymdate, i.refno, i.supplier, float(i.taxamount) / 2])
            expen = expences.objects.raw('select * from app1_expences where paymdate between %s and %s',
                                         [fromdate, todate, ])
            expence = []
            for i in expen:
                if i.cid == cmp1:
                    name = i.payee
                    x = name.split()
                    if len(x) == 3:
                        firstname = x[0]
                        lastname = x[1] + ' ' + x[2]
                        supp = supplier.objects.get(
                            firstname=firstname, lastname=lastname, cid=cmp1)
                    else:
                        supp = supplier.objects.get(
                            firstname=x[0], lastname=x[1], cid=cmp1)
                    if supp.state == cmp1.state:
                        total += float(i.taxamount) / 2
                        expence.append([i.paymdate, i.refno, (i.payee).replace(
                            u'\xa0', u''), float(i.taxamount) / 2])
            context = {'cmp1': cmp1, 'debit2': debit,
                       'expence2': expence, 'account': account, 'accbal': total}
        elif account.name == 'Input IGST':
            total = 0.0
            deb = suplrcredit.objects.raw('select * from app1_suplrcredit where paymdate between %s and %s',
                                          [fromdate, todate, ])
            debit = []
            for i in deb:
                if i.cid == cmp1:
                    name = i.supplier
                    x = name.split()
                    if len(x) == 3:
                        firstname = x[0]
                        lastname = x[1] + ' ' + x[2]
                        supp = supplier.objects.get(
                            firstname=firstname, lastname=lastname, cid=cmp1)
                    else:
                        supp = supplier.objects.get(
                            firstname=x[0], lastname=x[1], cid=cmp1)
                    if supp.state != cmp1.state:
                        total -= float(i.taxamount)
                        debit.append(
                            [i.paymdate, i.refno, i.supplier, float(i.taxamount)])
            expen = expences.objects.raw('select * from app1_expences where paymdate between %s and %s',
                                         [fromdate, todate, ])
            expence = []
            for i in expen:
                if i.cid == cmp1:
                    name = i.payee
                    x = name.split()
                    if len(x) == 3:
                        firstname = x[0]
                        lastname = x[1] + ' ' + x[2]
                        supp = supplier.objects.get(
                            firstname=firstname, lastname=lastname, cid=cmp1)
                    else:
                        supp = supplier.objects.get(
                            firstname=x[0], lastname=x[1], cid=cmp1)
                    if supp.state != cmp1.state:
                        total += float(i.taxamount)
                        expence.append([i.paymdate, i.refno, (i.payee).replace(
                            u'\xa0', u''), float(i.taxamount)])
            context = {'cmp1': cmp1, 'debit3': debit,
                       'expence3': expence, 'account': account, 'accbal': total}
        elif account.name == 'Output CGST':
            total = 0.0
            invoi = invoice.objects.raw('select * from app1_invoice where invoicedate between %s and %s',
                                        [fromdate, todate, ])
            invoic = []
            for i in invoi:
                if i.cid == cmp1:
                    if i.placosupply == cmp1.state:
                        total += float(i.taxamount) / 2
                        invoic.append(
                            [i.invoicedate, i.invoiceno, (i.customername).replace(u'\xa0', u''),
                             float(i.taxamount) / 2])
            creditnot = credit.objects.raw('select * from app1_credit where creditdate between %s and %s',
                                           [fromdate, todate, ])
            creditnote = []
            for i in creditnot:
                if i.cid == cmp1:
                    if i.place == cmp1.state:
                        total -= float(i.taxamnt) / 2
                        creditnote.append(
                            [i.creditdate, i.creditno, (i.customer).replace(u'\xa0', u''), float(i.taxamnt) / 2])
            salesrcpt = salesrecpts.objects.raw('select * from app1_salesrecpts where saledate between %s and %s',
                                                [fromdate, todate, ])
            salesrecipt = []
            for i in salesrcpt:
                if i.cid == cmp1:
                    if i.salesplace == cmp1.state:
                        total += float(i.saletaxamount) / 2
                        salesrecipt.append(
                            [i.saledate, i.saleno, (i.salename).replace(u'\xa0', u''), float(i.saletaxamount) / 2])
            context = {'cmp1': cmp1, 'invoic1': invoic, 'creditnote1': creditnote, 'salesrecipt1': salesrecipt,
                       'account': account, 'accbal': total}
        elif account.name == 'Output SGST':
            total = 0.0
            invoi = invoice.objects.raw('select * from app1_invoice where invoicedate between %s and %s',
                                        [fromdate, todate, ])
            invoic = []
            for i in invoi:
                if i.cid == cmp1:
                    if i.placosupply == cmp1.state:
                        total += float(i.taxamount) / 2
                        invoic.append(
                            [i.invoicedate, i.invoiceno, (i.customername).replace(u'\xa0', u''),
                             float(i.taxamount) / 2])
            creditnot = credit.objects.raw('select * from app1_credit where creditdate between %s and %s',
                                           [fromdate, todate, ])
            creditnote = []
            for i in creditnot:
                if i.cid == cmp1:
                    if i.place == cmp1.state:
                        total -= float(i.taxamnt) / 2
                        creditnote.append(
                            [i.creditdate, i.creditno, (i.customer).replace(u'\xa0', u''), float(i.taxamnt) / 2])
            salesrcpt = salesrecpts.objects.raw('select * from app1_salesrecpts where saledate between %s and %s',
                                                [fromdate, todate, ])
            salesrecipt = []
            for i in salesrcpt:
                if i.cid == cmp1:
                    if i.salesplace == cmp1.state:
                        total += float(i.saletaxamount) / 2
                        salesrecipt.append(
                            [i.saledate, i.saleno, (i.salename).replace(u'\xa0', u''), float(i.saletaxamount) / 2])
            context = {'cmp1': cmp1, 'invoic2': invoic, 'creditnote2': creditnote, 'salesrecipt2': salesrecipt,
                       'account': account, 'accbal': total}
        elif account.name == 'Output IGST':
            invoi = invoice.objects.raw('select * from app1_invoice where invoicedate between %s and %s',
                                        [fromdate, todate, ])
            invoic = []
            for i in invoi:
                if i.cid == cmp1:
                    if i.placosupply != cmp1.state:
                        total += float(i.taxamount)
                        invoic.append(
                            [i.invoicedate, i.invoiceno, (i.customername).replace(u'\xa0', u''), float(i.taxamount)])
            creditnot = credit.objects.raw('select * from app1_credit where creditdate between %s and %s',
                                           [fromdate, todate, ])
            creditnote = []
            for i in creditnot:
                if i.cid == cmp1:
                    if i.place != cmp1.state:
                        total -= float(i.taxamnt)
                        creditnote.append(
                            [i.creditdate, i.creditno, (i.customer).replace(u'\xa0', u''), float(i.taxamnt)])
            salesrcpt = salesrecpts.objects.raw('select * from app1_salesrecpts where saledate between %s and %s',
                                                [fromdate, todate, ])
            salesrecipt = []
            for i in salesrcpt:
                if i.cid == cmp1:
                    if i.salesplace == cmp1.state:
                        total += float(i.saletaxamount)
                        salesrecipt.append(
                            [i.saledate, i.saleno, (i.salename).replace(u'\xa0', u''), float(i.saletaxamount)])
            context = {'cmp1': cmp1, 'invoic3': invoic, 'creditnote3': creditnote, 'salesrecipt3': salesrecipt,
                       'account': account, 'accbal': total}
        elif account.name == 'Opening Balance Equity':
            total = 0.0
            inventor = []
            inventori = inventory.objects.raw('select * from app1_inventory where date between %s and %s',
                                              [fromdate, todate, ])
            for inv in inventori:
                if inv.cid == cmp1:
                    inventor.append([inv.date, inv.cxq])
                    total += float(inv.cxq)
            account1 = []
            accoun = accounts.objects.raw('select * from app1_accounts where asof between %s and %s',
                                          [fromdate, todate, ])
            for i in accoun:
                if i.cid == cmp1:
                    account1.append([i.asof, i.balfordisp])
                    total += float(i.balfordisp)
            context = {'cmp1': cmp1, 'account': account,
                       'inventory': inventor, 'accbal': total, 'account1': account1}
        elif account.name == 'Ask My Accountant':
            total = 0.0
            bil = []
            bill = bills.objects.raw('select * from app1_bills where paymdate between %s and %s',
                                     [fromdate, todate, ])
            for i in bill:
                if i.cid == cmp1 and i.payornot == 'openbalance':
                    total += float(i.grandtotal)
                    bil.append([i.paymdate, i.refno, i.payee, i.grandtotal])
            context = {'cmp1': cmp1, 'account': account,
                       'bill3': bil, 'accbal': total}
        else:
            context = {'cmp1': cmp1, 'account': account}
            if inventory.objects.filter(invacnt=account.name, cid=cmp1):
                total = 0.0
                invento = inventory.objects.raw('select * from app1_inventory where date between %s and %s',
                                                [fromdate, todate, ])
                inventor = []
                inventor1 = []
                for i in invento:
                    if i.cid == cmp1 and i.invacnt == account.name:
                        total += i.cxq
                        inventor.append([i.date, i.cxq])
                        inventor1.append([i.name, i.cost])
                bundl = bundle.objects.filter(cid=cmp1)
                bundles = []
                bundlpro = []
                bundlqty = []
                bundlprice = []
                for i in bundl:
                    bundles.append(i.name)
                    bundlpro.append(
                        [i.product1, i.product2, i.product3, i.product4])
                    bundlqty.append([i.qty1, i.qty2, i.qty3, i.qty4])
                    bundlprice.append([i.price1, i.price2, i.price3, i.price4])
                invoc = invoice.objects.raw('select * from app1_invoice where invoicedate between %s and %s',
                                            [fromdate, todate, ])
                invoic = []
                for i in invoc:
                    if i.cid == cmp1:
                        invotot = 0.0
                        for j in inventor1:
                            try:
                                if i.product == j[0]:
                                    totalcost = round(
                                        float(j[1]) * float(i.qty), 2)
                                    invotot += totalcost
                                    total -= totalcost
                                elif bundle.objects.get(name=i.product, cid=cmp1):
                                    for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                        if i.product == b:
                                            try:
                                                if j[0] == bp[0]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty) * float(bq[0]), 2)
                                                    invotot += totalcost
                                                    total -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[1]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty) * float(bq[1]), 2)
                                                    invotot += totalcost
                                                    total -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[2]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty) * float(bq[2]), 2)
                                                    invotot += totalcost
                                                    total -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[3]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty) * float(bq[3]), 2)
                                                    invotot += totalcost
                                                    total -= totalcost
                                            except:
                                                pass
                                        else:
                                            pass
                            except:
                                pass
                            try:
                                if i.product2 == j[0]:
                                    totalcost = round(
                                        float(j[1]) * float(i.qty2), 2)
                                    invotot += totalcost
                                    total -= totalcost
                                elif bundle.objects.get(name=i.product2, cid=cmp1):
                                    for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                        if i.product2 == b:
                                            try:
                                                if j[0] == bp[0]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty2) * float(bq[0]), 2)
                                                    invotot += totalcost
                                                    total -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[1]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty2) * float(bq[1]), 2)
                                                    invotot += totalcost
                                                    total -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[2]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty2) * float(bq[2]), 2)
                                                    invotot += totalcost
                                                    total -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[3]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty2) * float(bq[3]), 2)
                                                    invotot += totalcost
                                                    total -= totalcost
                                            except:
                                                pass
                            except:
                                pass
                            try:
                                if i.product3 == j[0]:
                                    totalcost = round(
                                        float(j[1]) * float(i.qty3), 2)
                                    invotot += totalcost
                                    total -= totalcost
                                elif bundle.objects.get(name=i.product3, cid=cmp1):
                                    for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                        if i.product3 == b:
                                            try:
                                                if j[0] == bp[0]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty3) * float(bq[0]), 2)
                                                    invotot += totalcost
                                                    total -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[1]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty3) * float(bq[1]), 2)
                                                    invotot += totalcost
                                                    total -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[2]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty3) * float(bq[2]), 2)
                                                    invotot += totalcost
                                                    total -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[3]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty3) * float(bq[3]), 2)
                                                    invotot += totalcost
                                                    total -= totalcost
                                            except:
                                                pass
                                        else:
                                            pass
                            except:
                                pass
                            try:
                                if i.product4 == j[0]:
                                    totalcost = round(
                                        float(j[1]) * float(i.qty4), 2)
                                    invotot += totalcost
                                    total -= totalcost
                                elif bundle.objects.get(name=i.product4, cid=cmp1):
                                    for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                        if i.product4 == b:
                                            try:
                                                if j[0] == bp[0]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty4) * float(bq[0]), 2)
                                                    invotot += totalcost
                                                    total -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[1]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty4) * float(bq[1]), 2)
                                                    invotot += totalcost
                                                    total -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[2]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty4) * float(bq[2]), 2)
                                                    invotot += totalcost
                                                    total -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[3]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty4) * float(bq[3]), 2)
                                                    invotot += totalcost
                                                    total -= totalcost
                                            except:
                                                pass
                                        else:
                                            pass
                            except:
                                pass
                        invoic.append(
                            [i.invoicedate, i.invoiceno, (i.customername).replace(u'\xa0', u''), invotot])
                context['invoice5'] = invoic
                creditnot = credit.objects.raw('select * from app1_credit where creditdate between %s and %s',
                                               [fromdate, todate, ])
                creditnote5 = []
                for i in creditnot:
                    if i.cid == cmp1:
                        credtot = 0.0
                        for j in inventor1:
                            try:
                                if i.product == j[0]:
                                    totalcost = round(
                                        float(j[1]) * float(i.qty), 2)
                                    credtot += totalcost
                                    total += totalcost
                                elif bundle.objects.get(name=i.product, cid=cmp1):
                                    for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                        if i.product == b:
                                            try:
                                                if j[0] == bp[0]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty) * float(bq[0]), 2)
                                                    credtot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[1]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty) * float(bq[1]), 2)
                                                    credtot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[2]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty) * float(bq[2]), 2)
                                                    credtot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[3]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty) * float(bq[3]), 2)
                                                    credtot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                            except:
                                pass
                            try:
                                if i.product1 == j[0]:
                                    totalcost = round(
                                        float(j[1]) * float(i.qty1), 2)
                                    credtot += totalcost
                                    total += totalcost
                                elif bundle.objects.get(name=i.product1, cid=cmp1):
                                    for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                        if i.product1 == b:
                                            try:
                                                if j[0] == bp[0]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty1) * float(bq[0]), 2)
                                                    credtot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[1]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty1) * float(bq[1]), 2)
                                                    credtot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[2]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty1) * float(bq[2]), 2)
                                                    credtot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[3]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty1) * float(bq[3]), 2)
                                                    credtot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                            except:
                                pass
                            try:
                                if i.product2 == j[0]:
                                    totalcost = round(
                                        float(j[1]) * float(i.qty2), 2)
                                    credtot += totalcost
                                    total += totalcost
                                elif bundle.objects.get(name=i.product2, cid=cmp1):
                                    for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                        if i.product2 == b:
                                            try:
                                                if j[0] == bp[0]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty2) * float(bq[0]), 2)
                                                    credtot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[1]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty2) * float(bq[1]), 2)
                                                    credtot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[2]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty2) * float(bq[2]), 2)
                                                    credtot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[3]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty2) * float(bq[3]), 2)
                                                    credtot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                            except:
                                pass
                            try:
                                if i.product3 == j[0]:
                                    totalcost = round(
                                        float(j[1]) * float(i.qty3), 2)
                                    credtot += totalcost
                                    total += totalcost
                                elif bundle.objects.get(name=i.product3, cid=cmp1):
                                    for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                        if i.product3 == b:
                                            try:
                                                if j[0] == bp[0]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty3) * float(bq[0]), 2)
                                                    credtot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[1]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty3) * float(bq[1]), 2)
                                                    credtot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[2]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty3) * float(bq[2]), 2)
                                                    credtot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[3]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty3) * float(bq[3]), 2)
                                                    credtot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                            except:
                                pass
                        creditnote5.append(
                            [i.creditdate, i.creditno, (i.customer).replace(u'\xa0', u''), credtot])
                context['creditnote5'] = creditnote5
                salesrecpt = salesrecpts.objects.raw('select * from app1_salesrecpts where saledate between %s and %s',
                                                     [fromdate, todate, ])
                salesrecipt5 = []
                for i in salesrecpt:
                    if i.cid == cmp1:
                        saletot = 0.0
                        for j in inventor1:
                            try:
                                if i.salepro == j[0]:
                                    totalcost = round(
                                        float(j[1]) * float(i.saleqty), 2)
                                    saletot += totalcost
                                    total -= totalcost
                                elif bundle.objects.get(name=i.salepro, cid=cmp1):
                                    for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                        if i.salepro == b:
                                            try:
                                                if j[0] == bp[0]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.saleqty) * float(bq[0]), 2)
                                                    saletot += totalcost
                                                    total -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[1]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.saleqty) * float(bq[1]), 2)
                                                    saletot += totalcost
                                                    total -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[2]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.saleqty) * float(bq[2]), 2)
                                                    saletot += totalcost
                                                    total -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[3]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.saleqty) * float(bq[3]), 2)
                                                    saletot += totalcost
                                                    total -= totalcost
                                            except:
                                                pass
                            except:
                                pass
                            try:
                                if i.category2 == j[0]:
                                    totalcost = round(
                                        float(j[1]) * float(i.catqty2), 2)
                                    saletot += totalcost
                                    total -= totalcost
                                elif bundle.objects.get(name=i.category2, cid=cmp1):
                                    for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                        if i.category2 == b:
                                            try:
                                                if j[0] == bp[0]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.catqty2) * float(bq[0]), 2)
                                                    saletot += totalcost
                                                    total -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[1]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.catqty2) * float(bq[1]), 2)
                                                    saletot += totalcost
                                                    total -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[2]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.catqty2) * float(bq[2]), 2)
                                                    saletot += totalcost
                                                    total -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[3]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.catqty2) * float(bq[3]), 2)
                                                    saletot += totalcost
                                                    total -= totalcost
                                            except:
                                                pass
                            except:
                                pass
                            try:
                                if i.category3 == j[0]:
                                    totalcost = round(
                                        float(j[1]) * float(i.catqty3), 2)
                                    saletot += totalcost
                                    total -= totalcost
                                elif bundle.objects.get(name=i.category3, cid=cmp1):
                                    for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                        if i.category3 == b:
                                            try:
                                                if j[0] == bp[0]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.catqty3) * float(bq[0]), 2)
                                                    saletot += totalcost
                                                    total -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[1]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.catqty3) * float(bq[1]), 2)
                                                    saletot += totalcost
                                                    total -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[2]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.catqty3) * float(bq[2]), 2)
                                                    saletot += totalcost
                                                    total -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[3]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.catqty3) * float(bq[3]), 2)
                                                    saletot += totalcost
                                                    total -= totalcost
                                            except:
                                                pass
                            except:
                                pass
                            try:
                                if i.category4 == j[0]:
                                    totalcost = round(
                                        float(j[1]) * float(i.catqty4), 2)
                                    saletot += totalcost
                                    total -= totalcost
                                elif bundle.objects.get(name=i.category4, cid=cmp1):
                                    for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                        if i.category4 == b:
                                            try:
                                                if j[0] == bp[0]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.catqty4) * float(bq[0]), 2)
                                                    saletot += totalcost
                                                    total -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[1]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.catqty4) * float(bq[1]), 2)
                                                    saletot += totalcost
                                                    total -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[2]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.catqty4) * float(bq[2]), 2)
                                                    saletot += totalcost
                                                    total -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[3]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.catqty4) * float(bq[3]), 2)
                                                    saletot += totalcost
                                                    total -= totalcost
                                            except:
                                                pass
                            except:
                                pass
                        salesrecipt5.append(
                            [i.saledate, i.saleno, (i.salename).replace(u'\xa0', u''), saletot])
                context['salesrecipt5'] = salesrecipt5
                expen = expences.objects.raw('select * from app1_expences where paymdate between %s and %s',
                                             [fromdate, todate, ])
                expence = []
                for i in expen:
                    for j in inventor1:
                        if i.cid == cmp1:
                            if i.product == j[0]:
                                totalcost = round(
                                    float(i.price) * float(i.qty), 2)
                                total += totalcost
                                expence.append(
                                    [i.paymdate, i.refno, (i.payee).replace(u'\xa0', u''), totalcost])

                            try:
                                if i.product2 == j[0]:
                                    totalcost = round(
                                        float(i.price2) * float(i.qty2), 2)
                                    total += totalcost
                                    expence.append(
                                        [i.paymdate, i.refno, (i.payee).replace(u'\xa0', u''), totalcost])
                            except:
                                pass
                            try:
                                if i.product3 == j[0]:
                                    totalcost = round(
                                        float(i.price3) * float(i.qty3), 2)
                                    total += totalcost
                                    expence.append(
                                        [i.paymdate, i.refno, (i.payee).replace(u'\xa0', u''), totalcost])
                            except:
                                pass
                            try:
                                if i.product4 == j[0]:
                                    totalcost = round(
                                        float(i.price4) * float(i.qty4), 2)
                                    total += totalcost
                                    expence.append(
                                        [i.paymdate, i.refno, (i.payee).replace(u'\xa0', u''), totalcost])
                            except:
                                pass
                context['expence6'] = expence
                debi = suplrcredit.objects.raw('select * from app1_suplrcredit where paymdate between %s and %s',
                                               [fromdate, todate, ])

                debit = []
                for i in debi:
                    for j in inventor1:
                        if i.cid == cmp1:
                            try:
                                if i.product == j[0]:
                                    totalcost = round(
                                        float(i.price) * float(i.qty), 2)
                                    total -= totalcost
                                    debit.append(
                                        [i.paymdate, i.refno, (i.supplier).replace(u'\xa0', u''), totalcost])
                            except:
                                pass
                            try:
                                if i.product2 == j[0]:
                                    totalcost = round(
                                        float(i.price2) * float(i.qty2), 2)
                                    total -= totalcost
                                    debit.append(
                                        [i.paymdate, i.refno, (i.supplier).replace(u'\xa0', u''), totalcost])
                            except:
                                pass
                            try:
                                if i.product3 == j[0]:
                                    totalcost = round(
                                        float(i.price3) * float(i.qty3), 2)
                                    total -= totalcost
                                    debit.append(
                                        [i.paymdate, i.refno, (i.supplier).replace(u'\xa0', u''), totalcost])
                            except:
                                pass
                            try:
                                if i.product4 == j[0]:
                                    totalcost = round(
                                        float(i.price4) * float(i.qty4), 2)
                                    total -= totalcost
                                    debit.append(
                                        [i.paymdate, i.refno, (i.supplier).replace(u'\xa0', u''), totalcost])
                            except:
                                pass
                context['debit6'] = debit
                context['inventory1'] = inventor
                context['accbal'] = total
            else:
                pass
            if inventory.objects.filter(incomeacnt=account.name, cid=cmp1):
                total = 0.0
                invento = inventory.objects.filter(
                    incomeacnt=account.name, cid=cmp1)
                inventor = []
                for i in invento:
                    inventor.append(i.name)
                bundl = bundle.objects.filter(cid=cmp1)
                bundles = []
                bundlpro = []
                bundlqty = []
                bundlprice = []
                for i in bundl:
                    bundles.append(i.name)
                    bundlpro.append(
                        [i.product1, i.product2, i.product3, i.product4])
                    bundlqty.append([i.qty1, i.qty2, i.qty3, i.qty4])
                    bundlprice.append([i.price1, i.price2, i.price3, i.price4])
                invoc = invoice.objects.raw('select * from app1_invoice where invoicedate between %s and %s',
                                            [fromdate, todate, ])
                invoic = []
                for i in invoc:
                    if i.cid == cmp1:
                        invotot = 0.0
                        for j in inventor:
                            try:
                                if i.product == j:
                                    invotot += float(i.total)
                                    total += float(i.total)
                                elif bundle.objects.get(name=i.product, cid=cmp1):
                                    for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                        if i.product == b:
                                            try:
                                                if j == bp[0]:
                                                    totalcost = round(
                                                        float(bprice[0]) * float(i.qty) * float(bq[0]), 2)
                                                    invotot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[1]:
                                                    totalcost = round(
                                                        float(bprice[1]) * float(i.qty) * float(bq[1]), 2)
                                                    invotot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[2]:
                                                    totalcost = round(
                                                        float(bprice[2]) * float(i.qty) * float(bq[2]), 2)
                                                    invotot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[3]:
                                                    totalcost = round(
                                                        float(bprice[3]) * float(i.qty) * float(bq[3]), 2)
                                                    invotot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                            except:
                                pass
                            try:
                                if i.product2 == j:
                                    invotot += float(i.total2)
                                    total += float(i.total2)
                                elif bundle.objects.get(name=i.product2, cid=cmp1):
                                    for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                        if i.product2 == b:
                                            try:
                                                if j == bp[0]:
                                                    totalcost = round(
                                                        float(bprice[0]) * float(i.qty2) * float(bq[0]), 2)
                                                    invotot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[1]:
                                                    totalcost = round(
                                                        float(bprice[1]) * float(i.qty2) * float(bq[1]), 2)
                                                    invotot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[2]:
                                                    totalcost = round(
                                                        float(bprice[2]) * float(i.qty2) * float(bq[2]), 2)
                                                    invotot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[3]:
                                                    totalcost = round(
                                                        float(bprice[3]) * float(i.qty2) * float(bq[3]), 2)
                                                    invotot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                            except:
                                pass
                            try:
                                if i.product3 == j:
                                    invotot += float(i.total3)
                                    total += float(i.total3)
                                elif bundle.objects.get(name=i.product3, cid=cmp1):
                                    for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                        if i.product3 == b:
                                            try:
                                                if j == bp[0]:
                                                    totalcost = round(
                                                        float(bprice[0]) * float(i.qty3) * float(bq[0]), 2)
                                                    invotot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[1]:
                                                    totalcost = round(
                                                        float(bprice[1]) * float(i.qty3) * float(bq[1]), 2)
                                                    invotot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[2]:
                                                    totalcost = round(
                                                        float(bprice[2]) * float(i.qty3) * float(bq[2]), 2)
                                                    invotot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[3]:
                                                    totalcost = round(
                                                        float(bprice[3]) * float(i.qty3) * float(bq[3]), 2)
                                                    invotot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                            except:
                                pass
                            try:
                                if i.product4 == j:
                                    invotot += float(i.total4)
                                    total += float(i.total4)
                                elif bundle.objects.get(name=i.product4, cid=cmp1):
                                    for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                        if i.product4 == b:
                                            try:
                                                if j == bp[0]:
                                                    totalcost = round(
                                                        float(bprice[0]) * float(i.qty4) * float(bq[0]), 2)
                                                    invotot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[1]:
                                                    totalcost = round(
                                                        float(bprice[1]) * float(i.qty4) * float(bq[1]), 2)
                                                    invotot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[2]:
                                                    totalcost = round(
                                                        float(bprice[2]) * float(i.qty4) * float(bq[2]), 2)
                                                    invotot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[3]:
                                                    totalcost = round(
                                                        float(bprice[3]) * float(i.qty4) * float(bq[3]), 2)
                                                    invotot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                            except:
                                pass
                        invoic.append(
                            [i.invoicedate, i.invoiceno, (i.customername).replace(u'\xa0', u''),
                             invotot])
                context['invoice4'] = invoic
                creditnot = credit.objects.raw('select * from app1_credit where creditdate between %s and %s',
                                               [fromdate, todate, ])
                creditnote4 = []
                for i in creditnot:
                    if i.cid == cmp1:
                        credtot = 0.0
                        for j in inventor:
                            try:
                                if i.product == j:
                                    credtot += float(i.total)
                                    total -= float(i.total)
                                elif bundle.objects.get(name=i.product, cid=cmp1):
                                    for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                        if i.product == b:
                                            try:
                                                if j == bp[0]:
                                                    totalcost = round(
                                                        float(bprice[0]) * float(i.qty) * float(bq[0]), 2)
                                                    credtot += totalcost
                                                    total -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[1]:
                                                    totalcost = round(
                                                        float(bprice[1]) * float(i.qty) * float(bq[1]), 2)
                                                    credtot += totalcost
                                                    total -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[2]:
                                                    totalcost = round(
                                                        float(bprice[2]) * float(i.qty) * float(bq[2]), 2)
                                                    credtot += totalcost
                                                    total -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[3]:
                                                    totalcost = round(
                                                        float(bprice[3]) * float(i.qty) * float(bq[3]), 2)
                                                    credtot += totalcost
                                                    total -= totalcost
                                            except:
                                                pass
                            except:
                                pass
                            try:
                                if i.product1 == j:
                                    credtot += float(i.total1)
                                    total -= float(i.total1)
                                elif bundle.objects.get(name=i.product1, cid=cmp1):
                                    for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                        if i.product1 == b:
                                            try:
                                                if j == bp[0]:
                                                    totalcost = round(
                                                        float(bprice[0]) * float(i.qty1) * float(bq[0]), 2)
                                                    credtot += totalcost
                                                    total -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[1]:
                                                    totalcost = round(
                                                        float(bprice[1]) * float(i.qty1) * float(bq[1]), 2)
                                                    credtot += totalcost
                                                    total -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[2]:
                                                    totalcost = round(
                                                        float(bprice[2]) * float(i.qty1) * float(bq[2]), 2)
                                                    credtot += totalcost
                                                    total -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[3]:
                                                    totalcost = round(
                                                        float(bprice[3]) * float(i.qty1) * float(bq[3]), 2)
                                                    credtot += totalcost
                                                    total -= totalcost
                                            except:
                                                pass
                            except:
                                pass
                            try:
                                if i.product2 == j:
                                    credtot += float(i.total2)
                                    total -= float(i.total2)
                                elif bundle.objects.get(name=i.product2, cid=cmp1):
                                    for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                        if i.product2 == b:
                                            try:
                                                if j == bp[0]:
                                                    totalcost = round(
                                                        float(bprice[0]) * float(i.qty2) * float(bq[0]), 2)
                                                    credtot += totalcost
                                                    total -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[1]:
                                                    totalcost = round(
                                                        float(bprice[1]) * float(i.qty2) * float(bq[1]), 2)
                                                    credtot += totalcost
                                                    total -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[2]:
                                                    totalcost = round(
                                                        float(bprice[2]) * float(i.qty2) * float(bq[2]), 2)
                                                    credtot += totalcost
                                                    total -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[3]:
                                                    totalcost = round(
                                                        float(bprice[3]) * float(i.qty2) * float(bq[3]), 2)
                                                    credtot += totalcost
                                                    total -= totalcost
                                            except:
                                                pass
                            except:
                                pass
                            try:
                                if i.product3 == j:
                                    credtot += float(i.total3)
                                    total -= float(i.total3)
                                elif bundle.objects.get(name=i.product3, cid=cmp1):
                                    for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                        if i.product3 == b:
                                            try:
                                                if j == bp[0]:
                                                    totalcost = round(
                                                        float(bprice[0]) * float(i.qty3) * float(bq[0]), 2)
                                                    credtot += totalcost
                                                    total -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[1]:
                                                    totalcost = round(
                                                        float(bprice[1]) * float(i.qty3) * float(bq[1]), 2)
                                                    credtot += totalcost
                                                    total -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[2]:
                                                    totalcost = round(
                                                        float(bprice[2]) * float(i.qty3) * float(bq[2]), 2)
                                                    credtot += totalcost
                                                    total -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[3]:
                                                    totalcost = round(
                                                        float(bprice[3]) * float(i.qty3) * float(bq[3]), 2)
                                                    credtot += totalcost
                                                    total -= totalcost
                                            except:
                                                pass
                            except:
                                pass
                        creditnote4.append(
                            [i.creditdate, i.creditno, (i.customer).replace(u'\xa0', u''), float(credtot)])
                context['creditnote4'] = creditnote4
                salesrecpt = salesrecpts.objects.raw('select * from app1_salesrecpts where saledate between %s and %s',
                                                     [fromdate, todate, ])
                salesrecipt4 = []
                for i in salesrecpt:
                    if i.cid == cmp1:
                        saletot = 0.0
                        for j in inventor:
                            try:
                                if i.salepro == j:
                                    saletot += float(i.saaletotal)
                                    total += float(i.saaletotal)
                                elif bundle.objects.get(name=i.salepro, cid=cmp1):
                                    for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                        if i.salepro == b:
                                            try:
                                                if j == bp[0]:
                                                    totalcost = round(
                                                        float(bprice[0]) * float(i.saleqty) * float(bq[0]), 2)
                                                    saletot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[1]:
                                                    totalcost = round(
                                                        float(bprice[1]) * float(i.saleqty) * float(bq[1]), 2)
                                                    saletot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[2]:
                                                    totalcost = round(
                                                        float(bprice[2]) * float(i.saleqty) * float(bq[2]), 2)
                                                    saletot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[3]:
                                                    totalcost = round(
                                                        float(bprice[3]) * float(i.saleqty) * float(bq[3]), 2)
                                                    saletot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                            except:
                                pass
                            try:
                                if i.category2 == j:
                                    saletot += float(i.cattotal2)
                                    total += float(i.cattotal2)
                                elif bundle.objects.get(name=i.category2, cid=cmp1):
                                    for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                        if i.category2 == b:
                                            try:
                                                if j == bp[0]:
                                                    totalcost = round(
                                                        float(bprice[0]) * float(i.catqty2) * float(bq[0]), 2)
                                                    saletot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[1]:
                                                    totalcost = round(
                                                        float(bprice[1]) * float(i.catqty2) * float(bq[1]), 2)
                                                    saletot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[2]:
                                                    totalcost = round(
                                                        float(bprice[2]) * float(i.catqty2) * float(bq[2]), 2)
                                                    saletot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[3]:
                                                    totalcost = round(
                                                        float(bprice[3]) * float(i.catqty2) * float(bq[3]), 2)
                                                    saletot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                            except:
                                pass
                            try:
                                if i.category3 == j:
                                    saletot += float(i.cattotal3)
                                    total += float(i.cattotal3)
                                elif bundle.objects.get(name=i.category3, cid=cmp1):
                                    for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                        if i.category3 == b:
                                            try:
                                                if j == bp[0]:
                                                    totalcost = round(
                                                        float(bprice[0]) * float(i.catqty3) * float(bq[0]), 2)
                                                    saletot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[1]:
                                                    totalcost = round(
                                                        float(bprice[1]) * float(i.catqty3) * float(bq[1]), 2)
                                                    saletot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[2]:
                                                    totalcost = round(
                                                        float(bprice[2]) * float(i.catqty3) * float(bq[2]), 2)
                                                    saletot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[3]:
                                                    totalcost = round(
                                                        float(bprice[3]) * float(i.catqty3) * float(bq[3]), 2)
                                                    saletot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                            except:
                                pass
                            try:
                                if i.category4 == j:
                                    saletot += float(i.cattotal4)
                                    total += float(i.cattotal4)
                                elif bundle.objects.get(name=i.category4, cid=cmp1):
                                    for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                        if i.category4 == b:
                                            try:
                                                if j == bp[0]:
                                                    totalcost = round(
                                                        float(bprice[0]) * float(i.catqty4) * float(bq[0]), 2)
                                                    saletot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[1]:
                                                    totalcost = round(
                                                        float(bprice[1]) * float(i.catqty4) * float(bq[1]), 2)
                                                    saletot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[2]:
                                                    totalcost = round(
                                                        float(bprice[2]) * float(i.catqty4) * float(bq[2]), 2)
                                                    saletot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[3]:
                                                    totalcost = round(
                                                        float(bprice[3]) * float(i.catqty4) * float(bq[3]), 2)
                                                    saletot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                            except:
                                pass
                        salesrecipt4.append(
                            [i.saledate, i.saleno, (i.salename).replace(u'\xa0', u''), float(saletot)])
                context['salesrecipt4'] = salesrecipt4
                context['accbal'] = total
            else:
                pass
            if noninventory.objects.filter(income=account.name, cid=cmp1):
                total = 0.0
                noninvento = noninventory.objects.filter(
                    income=account.name, cid=cmp1)
                noninventor = []
                for i in noninvento:
                    noninventor.append(i.name)
                bundl = bundle.objects.filter(cid=cmp1)
                bundles = []
                bundlpro = []
                bundlqty = []
                bundlprice = []
                for i in bundl:
                    bundles.append(i.name)
                    bundlpro.append(
                        [i.product1, i.product2, i.product3, i.product4])
                    bundlqty.append([i.qty1, i.qty2, i.qty3, i.qty4])
                    bundlprice.append([i.price1, i.price2, i.price3, i.price4])
                invoc = invoice.objects.raw(
                    'select * from app1_invoice where invoicedate between %s and %s', [fromdate, todate, ])
                invoic = []
                for i in invoc:
                    if i.cid == cmp1:
                        invotot = 0.0
                        for j in noninventor:
                            try:
                                if i.product == j:
                                    invotot += float(i.total)
                                    total += float(i.total)
                                elif bundle.objects.get(name=i.product, cid=cmp1):
                                    for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                        if i.product == b:
                                            try:
                                                if j == bp[0]:
                                                    totalcost = round(
                                                        float(bprice[0]) * float(i.qty) * float(bq[0]), 2)
                                                    invotot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[1]:
                                                    totalcost = round(
                                                        float(bprice[1]) * float(i.qty) * float(bq[1]), 2)
                                                    invotot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[2]:
                                                    totalcost = round(
                                                        float(bprice[2]) * float(i.qty) * float(bq[2]), 2)
                                                    invotot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[3]:
                                                    totalcost = round(
                                                        float(bprice[3]) * float(i.qty) * float(bq[3]), 2)
                                                    invotot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                            except:
                                pass
                            try:
                                if i.product2 == j:
                                    invotot += float(i.total2)
                                    total += float(i.total2)
                                elif bundle.objects.get(name=i.product2, cid=cmp1):
                                    for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                        if i.product2 == b:
                                            try:
                                                if j == bp[0]:
                                                    totalcost = round(
                                                        float(bprice[0]) * float(i.qty2) * float(bq[0]), 2)
                                                    invotot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[1]:
                                                    totalcost = round(
                                                        float(bprice[1]) * float(i.qty2) * float(bq[1]), 2)
                                                    invotot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[2]:
                                                    totalcost = round(
                                                        float(bprice[2]) * float(i.qty2) * float(bq[2]), 2)
                                                    invotot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[3]:
                                                    totalcost = round(
                                                        float(bprice[3]) * float(i.qty2) * float(bq[3]), 2)
                                                    invotot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                            except:
                                pass
                            try:
                                if i.product3 == j:
                                    invotot += float(i.total3)
                                    total += float(i.total3)
                                elif bundle.objects.get(name=i.product3, cid=cmp1):
                                    for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                        if i.product3 == b:
                                            try:
                                                if j == bp[0]:
                                                    totalcost = round(
                                                        float(bprice[0]) * float(i.qty3) * float(bq[0]), 2)
                                                    invotot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[1]:
                                                    totalcost = round(
                                                        float(bprice[1]) * float(i.qty3) * float(bq[1]), 2)
                                                    invotot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[2]:
                                                    totalcost = round(
                                                        float(bprice[2]) * float(i.qty3) * float(bq[2]), 2)
                                                    invotot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[3]:
                                                    totalcost = round(
                                                        float(bprice[3]) * float(i.qty3) * float(bq[3]), 2)
                                                    invotot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                            except:
                                pass
                            try:
                                if i.product4 == j:
                                    invotot += float(i.total4)
                                    total += float(i.total4)
                                elif bundle.objects.get(name=i.product4, cid=cmp1):
                                    for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                        if i.product4 == b:
                                            try:
                                                if j == bp[0]:
                                                    totalcost = round(
                                                        float(bprice[0]) * float(i.qty4) * float(bq[0]), 2)
                                                    invotot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[1]:
                                                    totalcost = round(
                                                        float(bprice[1]) * float(i.qty4) * float(bq[1]), 2)
                                                    invotot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[2]:
                                                    totalcost = round(
                                                        float(bprice[2]) * float(i.qty4) * float(bq[2]), 2)
                                                    invotot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[3]:
                                                    totalcost = round(
                                                        float(bprice[3]) * float(i.qty4) * float(bq[3]), 2)
                                                    invotot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                            except:
                                pass
                        invoic.append(
                            [i.invoicedate, i.invoiceno, (i.customername).replace(u'\xa0', u''),
                             float(invotot)])
                context['invoice6'] = invoic
                creditnot = credit.objects.raw('select * from app1_credit where creditdate between %s and %s',
                                               [fromdate, todate, ])
                creditnote4 = []
                for i in creditnot:
                    if i.cid == cmp1:
                        credtot = 0.0
                        for j in noninventor:
                            try:
                                if i.product == j:
                                    credtot += float(i.total)
                                    total -= float(i.total)
                                elif bundle.objects.get(name=i.product, cid=cmp1):
                                    for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                        if i.product == b:
                                            try:
                                                if j == bp[0]:
                                                    totalcost = round(
                                                        float(bprice[0]) * float(i.qty) * float(bq[0]), 2)
                                                    credtot += totalcost
                                                    total -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[1]:
                                                    totalcost = round(
                                                        float(bprice[1]) * float(i.qty) * float(bq[1]), 2)
                                                    credtot += totalcost
                                                    total -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[2]:
                                                    totalcost = round(
                                                        float(bprice[2]) * float(i.qty) * float(bq[2]), 2)
                                                    credtot += totalcost
                                                    total -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[3]:
                                                    totalcost = round(
                                                        float(bprice[3]) * float(i.qty) * float(bq[3]), 2)
                                                    credtot += totalcost
                                                    total -= totalcost
                                            except:
                                                pass
                            except:
                                pass
                            try:
                                if i.product1 == j:
                                    credtot += float(i.total1)
                                    total -= float(i.total1)
                                elif bundle.objects.get(name=i.product1, cid=cmp1):
                                    for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                        if i.product1 == b:
                                            try:
                                                if j == bp[0]:
                                                    totalcost = round(
                                                        float(bprice[0]) * float(i.qty1) * float(bq[0]), 2)
                                                    credtot += totalcost
                                                    total -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[1]:
                                                    totalcost = round(
                                                        float(bprice[1]) * float(i.qty1) * float(bq[1]), 2)
                                                    credtot += totalcost
                                                    total -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[2]:
                                                    totalcost = round(
                                                        float(bprice[2]) * float(i.qty1) * float(bq[2]), 2)
                                                    credtot += totalcost
                                                    total -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[3]:
                                                    totalcost = round(
                                                        float(bprice[3]) * float(i.qty1) * float(bq[3]), 2)
                                                    credtot += totalcost
                                                    total -= totalcost
                                            except:
                                                pass
                            except:
                                pass
                            try:
                                if i.product2 == j:
                                    credtot += float(i.total2)
                                    total -= float(i.total2)
                                elif bundle.objects.get(name=i.product2, cid=cmp1):
                                    for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                        if i.product2 == b:
                                            try:
                                                if j == bp[0]:
                                                    totalcost = round(
                                                        float(bprice[0]) * float(i.qty2) * float(bq[0]), 2)
                                                    credtot += totalcost
                                                    total -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[1]:
                                                    totalcost = round(
                                                        float(bprice[1]) * float(i.qty2) * float(bq[1]), 2)
                                                    credtot += totalcost
                                                    total -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[2]:
                                                    totalcost = round(
                                                        float(bprice[2]) * float(i.qty2) * float(bq[2]), 2)
                                                    credtot += totalcost
                                                    total -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[3]:
                                                    totalcost = round(
                                                        float(bprice[3]) * float(i.qty2) * float(bq[3]), 2)
                                                    credtot += totalcost
                                                    total -= totalcost
                                            except:
                                                pass
                            except:
                                pass
                            try:
                                if i.product3 == j:
                                    credtot += float(i.total3)
                                    total -= float(i.total3)
                                elif bundle.objects.get(name=i.product3, cid=cmp1):
                                    for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                        if i.product3 == b:
                                            try:
                                                if j == bp[0]:
                                                    totalcost = round(
                                                        float(bprice[0]) * float(i.qty3) * float(bq[0]), 2)
                                                    credtot += totalcost
                                                    total -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[1]:
                                                    totalcost = round(
                                                        float(bprice[1]) * float(i.qty3) * float(bq[1]), 2)
                                                    credtot += totalcost
                                                    total -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[2]:
                                                    totalcost = round(
                                                        float(bprice[2]) * float(i.qty3) * float(bq[2]), 2)
                                                    credtot += totalcost
                                                    total -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[3]:
                                                    totalcost = round(
                                                        float(bprice[3]) * float(i.qty3) * float(bq[3]), 2)
                                                    credtot += totalcost
                                                    total -= totalcost
                                            except:
                                                pass
                            except:
                                pass
                        creditnote4.append(
                            [i.creditdate, i.creditno, (i.customer).replace(u'\xa0', u''), float(credtot)])
                context['creditnote6'] = creditnote4
                salesrecpt = salesrecpts.objects.raw('select * from app1_salesrecpts where saledate between %s and %s',
                                                     [fromdate, todate, ])
                salesrecipt4 = []
                for i in salesrecpt:
                    if i.cid == cmp1:
                        saletot = 0.0
                        for j in noninventor:
                            try:
                                if i.salepro == j:
                                    saletot += float(i.saaletotal)
                                    total += float(i.saaletotal)
                                elif bundle.objects.get(name=i.salepro, cid=cmp1):
                                    for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                        if i.salepro == b:
                                            try:
                                                if j == bp[0]:
                                                    totalcost = round(
                                                        float(bprice[0]) * float(i.saleqty) * float(bq[0]), 2)
                                                    saletot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[1]:
                                                    totalcost = round(
                                                        float(bprice[1]) * float(i.saleqty) * float(bq[1]), 2)
                                                    saletot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[2]:
                                                    totalcost = round(
                                                        float(bprice[2]) * float(i.saleqty) * float(bq[2]), 2)
                                                    saletot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[3]:
                                                    totalcost = round(
                                                        float(bprice[3]) * float(i.saleqty) * float(bq[3]), 2)
                                                    saletot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                            except:
                                pass
                            try:
                                if i.category2 == j:
                                    saletot += float(i.cattotal2)
                                    total += float(i.cattotal2)
                                elif bundle.objects.get(name=i.category2, cid=cmp1):
                                    for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                        if i.category2 == b:
                                            try:
                                                if j == bp[0]:
                                                    totalcost = round(
                                                        float(bprice[0]) * float(i.catqty2) * float(bq[0]), 2)
                                                    saletot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[1]:
                                                    totalcost = round(
                                                        float(bprice[1]) * float(i.catqty2) * float(bq[1]), 2)
                                                    saletot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[2]:
                                                    totalcost = round(
                                                        float(bprice[2]) * float(i.catqty2) * float(bq[2]), 2)
                                                    saletot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[3]:
                                                    totalcost = round(
                                                        float(bprice[3]) * float(i.catqty2) * float(bq[3]), 2)
                                                    saletot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                            except:
                                pass
                            try:
                                if i.category3 == j:
                                    saletot += float(i.cattotal3)
                                    total += float(i.cattotal3)
                                elif bundle.objects.get(name=i.category3, cid=cmp1):
                                    for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                        if i.category3 == b:
                                            try:
                                                if j == bp[0]:
                                                    totalcost = round(
                                                        float(bprice[0]) * float(i.catqty3) * float(bq[0]), 2)
                                                    saletot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[1]:
                                                    totalcost = round(
                                                        float(bprice[1]) * float(i.catqty3) * float(bq[1]), 2)
                                                    saletot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[2]:
                                                    totalcost = round(
                                                        float(bprice[2]) * float(i.catqty3) * float(bq[2]), 2)
                                                    saletot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[3]:
                                                    totalcost = round(
                                                        float(bprice[3]) * float(i.catqty3) * float(bq[3]), 2)
                                                    saletot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                            except:
                                pass
                            try:
                                if i.category4 == j:
                                    saletot += float(i.cattotal4)
                                    total += float(i.cattotal4)
                                elif bundle.objects.get(name=i.category4, cid=cmp1):
                                    for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                        if i.category4 == b:
                                            try:
                                                if j == bp[0]:
                                                    totalcost = round(
                                                        float(bprice[0]) * float(i.catqty4) * float(bq[0]), 2)
                                                    saletot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[1]:
                                                    totalcost = round(
                                                        float(bprice[1]) * float(i.catqty4) * float(bq[1]), 2)
                                                    saletot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[2]:
                                                    totalcost = round(
                                                        float(bprice[2]) * float(i.catqty4) * float(bq[2]), 2)
                                                    saletot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[3]:
                                                    totalcost = round(
                                                        float(bprice[3]) * float(i.catqty4) * float(bq[3]), 2)
                                                    saletot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                            except:
                                pass
                        salesrecipt4.append(
                            [i.saledate, i.saleno, (i.salename).replace(u'\xa0', u''), float(saletot)])
                context['salesrecipt6'] = salesrecipt4
                context['accbal'] = total
            else:
                pass
            if inventory.objects.filter(expacnt=account.name, cid=cmp1):
                total = 0.0
                invento = inventory.objects.filter(
                    expacnt=account.name, cid=cmp1)
                inventor = []
                for i in invento:
                    inventor.append([i.name, i.cost])
                bundl = bundle.objects.filter(cid=cmp1)
                bundles = []
                bundlpro = []
                bundlqty = []
                bundlprice = []
                for i in bundl:
                    bundles.append(i.name)
                    bundlpro.append(
                        [i.product1, i.product2, i.product3, i.product4])
                    bundlqty.append([i.qty1, i.qty2, i.qty3, i.qty4])
                invoc = invoice.objects.raw('select * from app1_invoice where invoicedate between %s and %s',
                                            [fromdate, todate, ])
                invoic = []
                for i in invoc:
                    if i.cid == cmp1:
                        invotot = 0.0
                        for j in inventor:
                            try:
                                if i.product == j[0]:
                                    totalcost = round(
                                        float(j[1]) * float(i.qty), 2)
                                    invotot += totalcost
                                    total += totalcost
                                elif bundle.objects.get(name=i.product, cid=cmp1):
                                    for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                        if i.product == b:
                                            try:
                                                if j[0] == bp[0]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty) * float(bq[0]), 2)
                                                    invotot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[1]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty) * float(bq[1]), 2)
                                                    invotot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[2]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty) * float(bq[2]), 2)
                                                    invotot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[3]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty) * float(bq[3]), 2)
                                                    invotot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                        else:
                                            pass
                            except:
                                pass
                            try:
                                if i.product2 == j[0]:
                                    totalcost = round(
                                        float(j[1]) * float(i.qty2), 2)
                                    invotot += totalcost
                                    total += totalcost
                                elif bundle.objects.get(name=i.product2, cid=cmp1):
                                    for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                        if i.product2 == b:
                                            try:
                                                if j[0] == bp[0]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty2) * float(bq[0]), 2)
                                                    invotot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[1]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty2) * float(bq[1]), 2)
                                                    invotot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[2]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty2) * float(bq[2]), 2)
                                                    invotot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[3]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty2) * float(bq[3]), 2)
                                                    invotot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                            except:
                                pass
                            try:
                                if i.product3 == j[0]:
                                    totalcost = round(
                                        float(j[1]) * float(i.qty3), 2)
                                    invotot += totalcost
                                    total += totalcost
                                elif bundle.objects.get(name=i.product3, cid=cmp1):
                                    for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                        if i.product3 == b:
                                            try:
                                                if j[0] == bp[0]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty3) * float(bq[0]), 2)
                                                    invotot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[1]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty3) * float(bq[1]), 2)
                                                    invotot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[2]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty3) * float(bq[2]), 2)
                                                    invotot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[3]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty3) * float(bq[3]), 2)
                                                    invotot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                        else:
                                            pass
                            except:
                                pass
                            try:
                                if i.product4 == j[0]:
                                    totalcost = round(
                                        float(j[1]) * float(i.qty4), 2)
                                    invotot += totalcost
                                    total += totalcost
                                elif bundle.objects.get(name=i.product4, cid=cmp1):
                                    for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                        if i.product4 == b:
                                            try:
                                                if j[0] == bp[0]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty4) * float(bq[0]), 2)
                                                    invotot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[1]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty4) * float(bq[1]), 2)
                                                    invotot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[2]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty4) * float(bq[2]), 2)
                                                    invotot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[3]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty4) * float(bq[3]), 2)
                                                    invotot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                        else:
                                            pass
                            except:
                                pass
                        invoic.append(
                            [i.invoicedate, i.invoiceno, (i.customername).replace(u'\xa0', u''), invotot])
                context['invoiceexp'] = invoic
                creditnot = credit.objects.raw('select * from app1_credit where creditdate between %s and %s',
                                               [fromdate, todate, ])
                creditnote5 = []
                for i in creditnot:
                    if i.cid == cmp1:
                        credtot = 0.0
                        for j in inventor:
                            try:
                                if i.product == j[0]:
                                    totalcost = round(
                                        float(j[1]) * float(i.qty), 2)
                                    credtot += totalcost
                                    total -= totalcost
                                elif bundle.objects.get(name=i.product, cid=cmp1):
                                    for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                        if i.product == b:
                                            try:
                                                if j[0] == bp[0]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty) * float(bq[0]), 2)
                                                    credtot += totalcost
                                                    total -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[1]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty) * float(bq[1]), 2)
                                                    credtot += totalcost
                                                    total -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[2]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty) * float(bq[2]), 2)
                                                    credtot += totalcost
                                                    total -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[3]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty) * float(bq[3]), 2)
                                                    credtot += totalcost
                                                    total -= totalcost
                                            except:
                                                pass
                            except:
                                pass
                            try:
                                if i.product1 == j[0]:
                                    totalcost = round(
                                        float(j[1]) * float(i.qty1), 2)
                                    credtot += totalcost
                                    total -= totalcost
                                elif bundle.objects.get(name=i.product1, cid=cmp1):
                                    for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                        if i.product1 == b:
                                            try:
                                                if j[0] == bp[0]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty1) * float(bq[0]), 2)
                                                    credtot += totalcost
                                                    total -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[1]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty1) * float(bq[1]), 2)
                                                    credtot += totalcost
                                                    total -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[2]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty1) * float(bq[2]), 2)
                                                    credtot += totalcost
                                                    total -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[3]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty1) * float(bq[3]), 2)
                                                    credtot += totalcost
                                                    total -= totalcost
                                            except:
                                                pass
                            except:
                                pass
                            try:
                                if i.product2 == j[0]:
                                    totalcost = round(
                                        float(j[1]) * float(i.qty2), 2)
                                    credtot += totalcost
                                    total -= totalcost
                                elif bundle.objects.get(name=i.product2, cid=cmp1):
                                    for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                        if i.product2 == b:
                                            try:
                                                if j[0] == bp[0]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty2) * float(bq[0]), 2)
                                                    credtot += totalcost
                                                    total -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[1]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty2) * float(bq[1]), 2)
                                                    credtot += totalcost
                                                    total -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[2]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty2) * float(bq[2]), 2)
                                                    credtot += totalcost
                                                    total -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[3]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty2) * float(bq[3]), 2)
                                                    credtot += totalcost
                                                    total -= totalcost
                                            except:
                                                pass
                            except:
                                pass
                            try:
                                if i.product3 == j[0]:
                                    totalcost = round(
                                        float(j[1]) * float(i.qty3), 2)
                                    credtot += totalcost
                                    total -= totalcost
                                elif bundle.objects.get(name=i.product3, cid=cmp1):
                                    for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                        if i.product3 == b:
                                            try:
                                                if j[0] == bp[0]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty3) * float(bq[0]), 2)
                                                    credtot += totalcost
                                                    total -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[1]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty3) * float(bq[1]), 2)
                                                    credtot += totalcost
                                                    total -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[2]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty3) * float(bq[2]), 2)
                                                    credtot += totalcost
                                                    total -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[3]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty3) * float(bq[3]), 2)
                                                    credtot += totalcost
                                                    total -= totalcost
                                            except:
                                                pass
                            except:
                                pass
                        creditnote5.append(
                            [i.creditdate, i.creditno, (i.customer).replace(u'\xa0', u''), credtot])
                context['creditnoteexp'] = creditnote5
                salesrecpt = salesrecpts.objects.raw('select * from app1_salesrecpts where saledate between %s and %s',
                                                     [fromdate, todate, ])
                salesrecipt5 = []
                for i in salesrecpt:
                    if i.cid == cmp1:
                        saletot = 0.0
                        for j in inventor:
                            try:
                                if i.salepro == j[0]:
                                    totalcost = round(
                                        float(j[1]) * float(i.saleqty), 2)
                                    saletot += totalcost
                                    total += totalcost
                                elif bundle.objects.get(name=i.salepro, cid=cmp1):
                                    for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                        if i.salepro == b:
                                            try:
                                                if j[0] == bp[0]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.saleqty) * float(bq[0]), 2)
                                                    saletot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[1]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.saleqty) * float(bq[1]), 2)
                                                    saletot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[2]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.saleqty) * float(bq[2]), 2)
                                                    saletot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[3]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.saleqty) * float(bq[3]), 2)
                                                    saletot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                            except:
                                pass
                            try:
                                if i.category2 == j[0]:
                                    totalcost = round(
                                        float(j[1]) * float(i.catqty2), 2)
                                    saletot += totalcost
                                    total += totalcost
                                elif bundle.objects.get(name=i.category2, cid=cmp1):
                                    for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                        if i.category2 == b:
                                            try:
                                                if j[0] == bp[0]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.catqty2) * float(bq[0]), 2)
                                                    saletot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[1]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.catqty2) * float(bq[1]), 2)
                                                    saletot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[2]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.catqty2) * float(bq[2]), 2)
                                                    saletot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[3]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.catqty2) * float(bq[3]), 2)
                                                    saletot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                            except:
                                pass
                            try:
                                if i.category3 == j[0]:
                                    totalcost = round(
                                        float(j[1]) * float(i.catqty3), 2)
                                    saletot += totalcost
                                    total += totalcost
                                elif bundle.objects.get(name=i.category3, cid=cmp1):
                                    for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                        if i.category3 == b:
                                            try:
                                                if j[0] == bp[0]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.catqty3) * float(bq[0]), 2)
                                                    saletot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[1]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.catqty3) * float(bq[1]), 2)
                                                    saletot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[2]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.catqty3) * float(bq[2]), 2)
                                                    saletot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[3]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.catqty3) * float(bq[3]), 2)
                                                    saletot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                            except:
                                pass
                            try:
                                if i.category4 == j[0]:
                                    totalcost = round(
                                        float(j[1]) * float(i.catqty4), 2)
                                    saletot += totalcost
                                    total += totalcost
                                elif bundle.objects.get(name=i.category4, cid=cmp1):
                                    for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                        if i.category4 == b:
                                            try:
                                                if j[0] == bp[0]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.catqty4) * float(bq[0]), 2)
                                                    saletot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[1]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.catqty4) * float(bq[1]), 2)
                                                    saletot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[2]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.catqty4) * float(bq[2]), 2)
                                                    saletot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[3]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.catqty4) * float(bq[3]), 2)
                                                    saletot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                            except:
                                pass
                        salesrecipt5.append(
                            [i.saledate, i.saleno, (i.salename).replace(u'\xa0', u''), saletot])
                context['salesreciptexp'] = salesrecipt5
                context['accbal'] = total
            else:
                pass
            if noninventory.objects.filter(expenseaccount=account.name, cid=cmp1):
                total = 0.0
                noninvento = noninventory.objects.filter(
                    expenseaccount=account.name, cid=cmp1)
                noninventor = []
                for i in noninvento:
                    noninventor.append(i.name)
                expen = expences.objects.raw('select * from app1_expences where paymdate between %s and %s',
                                             [fromdate, todate, ])
                expence = []
                for i in expen:
                    for j in noninventor:
                        if i.cid == cmp1:
                            try:
                                if i.product == j:
                                    total += float(i.total)
                                    expence.append(
                                        [i.paymdate, i.refno, (i.payee).replace(u'\xa0', u''), float(i.total)])
                            except:
                                pass
                            try:
                                if i.product2 == j:
                                    total += float(i.total2)
                                    expence.append(
                                        [i.paymdate, i.refno, (i.payee).replace(u'\xa0', u''), float(i.total2)])
                            except:
                                pass
                            try:
                                if i.product3 == j:
                                    total += float(i.total3)
                                    expence.append(
                                        [i.paymdate, i.refno, (i.payee).replace(u'\xa0', u''), float(i.total3)])
                            except:
                                pass
                            try:
                                if i.product4 == j:
                                    total += float(i.total4)
                                    expence.append(
                                        [i.paymdate, i.refno, (i.payee).replace(u'\xa0', u''), float(i.total4)])
                            except:
                                pass
                context['expence5'] = expence
                debi = suplrcredit.objects.raw('select * from app1_suplrcredit where paymdate between %s and %s',
                                               [fromdate, todate, ])
                debit = []
                for i in debi:
                    for j in noninventor:
                        if i.cid == cmp1:
                            try:
                                if i.product == j:
                                    total -= float(i.total)
                                    debit.append(
                                        [i.paymdate, i.refno, (i.supplier).replace(u'\xa0', u''), float(i.total)])
                            except:
                                pass
                            try:
                                if i.product2 == j:
                                    total -= float(i.total2)
                                    debit.append(
                                        [i.paymdate, i.refno, (i.supplier).replace(u'\xa0', u''), float(i.total2)])
                            except:
                                pass
                            try:
                                if i.product3 == j:
                                    total -= float(i.total3)
                                    debit.append(
                                        [i.paymdate, i.refno, (i.supplier).replace(u'\xa0', u''), float(i.total3)])
                            except:
                                pass
                            try:
                                if i.product4 == j:
                                    total -= float(i.total4)
                                    debit.append(
                                        [i.paymdate, i.refno, (i.supplier).replace(u'\xa0', u''), float(i.total4)])
                            except:
                                pass
                context['debit5'] = debit
                context['accbal'] = total
            else:
                pass
            if salesrecpts.objects.filter(saledeposit=account.name, cid=cmp1):
                total = 0.0
                sale = []
                salesrecpt = salesrecpts.objects.raw('select * from app1_salesrecpts where saledate between %s and %s',
                                                     [fromdate, todate, ])
                for s in salesrecpt:
                    if s.cid == cmp1:
                        sale.append(
                            [s.saledate, s.saleno, s.salename, s.salegrandtotal])
                        total += float(s.salegrandtotal)
                context['salesrecipt7'] = sale
                context['accbal'] = total
            else:
                pass
            if payment.objects.filter(depto=account.name, cid=cmp1):
                total = 0.0
                payman = []
                payment1 = payment.objects.raw('select * from app1_payment where paymdate between %s and %s',
                                               [fromdate, todate, ])
                for s in payment1:
                    if s.cid == cmp1:
                        payman.append(
                            [s.paymdate, s.refno, s.customer, s.amtapply])
                        total += float(s.amtapply)
                context['payment1'] = payman
                context['accbal'] = total
            else:
                pass
            if bills.objects.filter(paymacnt=account.name, cid=cmp1):
                bil = []
                total = 0.0
                bill = bills.objects.raw('select * from app1_bills where paymdate between %s and %s',
                                         [fromdate, todate, ])
                for s in bill:
                    if s.cid == cmp1 and s.payornot == 'openbalance' and s.paymacnt == account.name:
                        bil.append(
                            [s.paymdate, s.payee, 0 + float(s.grandtotal)])
                        total += float(s.grandtotal)
                    elif s.cid == cmp1 and s.payornot == 'debit' and s.paymacnt == account.name:
                        bil.append(
                            [s.paymdate, s.payee, 0 - float(s.grandtotal)])
                        total -= float(s.grandtotal)
                    elif s.cid == cmp1 and s.payornot != 'debit' and s.payornot != 'openbalance' and s.paymacnt == account.name:
                        bil.append(
                            [s.paymdate, s.payee, 0 - float(s.grandtotal)])
                        total -= float(s.grandtotal)
                context['accbal'] = total
                context['bill1'] = bil
            else:
                pass
        return render(request, 'app1/runreportfiltered.html', context)
    except:
        return redirect('runreport')


@login_required(login_url='regcomp')
def runreportfilterednew(request, accountsid):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        toda = date.today()
        tod = toda.strftime("%Y-%m-%d")
        filmeth = request.POST['reportperiod']
        if filmeth == 'Today':
            fromdate = tod
            todate = tod
        elif filmeth == 'Custom':
            fromdate = request.POST['fper']
            todate = request.POST['tper']
        elif filmeth == 'This month':
            fromdate = toda.strftime("%Y-%m-01")
            todate = toda.strftime("%Y-%m-31")
        elif filmeth == 'This financial year':
            if int(toda.strftime("%m")) >= 1 and int(toda.strftime("%m")) <= 3:
                pyear = int(toda.strftime("%Y")) - 1
                fromdate = f'{pyear}-03-01'
                todate = f'{toda.strftime("%Y")}-03-31'
            else:
                pyear = int(toda.strftime("%Y")) + 1
                fromdate = f'{toda.strftime("%Y")}-03-01'
                todate = f'{pyear}-03-31'
        else:
            return redirect('runreports')
        account = accounts.objects.get(accountsid=accountsid, cid=cmp1)
        accoun1 = accounts.objects.raw(
            'select * from app1_accounts where asof between %s and %s', [fromdate, todate, ])
        total = 0.0
        account1 = []
        for i in accoun1:
            if i.cid == cmp1 and i.name == account.name:
                account1.append([i.asof, i.balfordisp])
                total += float(i.balfordisp)
        context = {'cmp1': cmp1, 'account': account,
                   'accbal': total, 'account1': account1}
        if inventory.objects.filter(invacnt=account.name, cid=cmp1):
            total = 0.0
            invento = inventory.objects.raw('select * from app1_inventory where date between %s and %s',
                                            [fromdate, todate, ])
            inventor = []
            inventor1 = []
            for i in invento:
                if i.cid == cmp1 and i.invacnt == account.name:
                    total += i.cxq
                    inventor.append([i.date, i.cxq])
                    inventor1.append([i.name, i.cost])
            bundl = bundle.objects.filter(cid=cmp1)
            bundles = []
            bundlpro = []
            bundlqty = []
            for i in bundl:
                bundles.append(i.name)
                bundlpro.append(
                    [i.product1, i.product2, i.product3, i.product4])
                bundlqty.append([i.qty1, i.qty2, i.qty3, i.qty4])
            invoc = invoice.objects.raw('select * from app1_invoice where invoicedate between %s and %s',
                                        [fromdate, todate, ])
            invoic = []
            for i in invoc:
                invotot = 0.0
                for j in inventor1:
                    if i.cid == cmp1:
                        try:
                            if i.product == j[0]:
                                totalcost = round(float(j[1]) * float(i.qty), 2)
                                invotot += totalcost
                                total -= totalcost
                            elif bundle.objects.get(name=i.product, cid=cmp1):
                                for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                    if i.product == b:
                                        try:
                                            if j[0] == bp[0]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty) * float(bq[0]), 2)
                                                invotot += totalcost
                                                total -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[1]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty) * float(bq[1]), 2)
                                                invotot += totalcost
                                                total -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[2]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty) * float(bq[2]), 2)
                                                invotot += totalcost
                                                total -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[3]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty) * float(bq[3]), 2)
                                                invotot += totalcost
                                                total -= totalcost
                                        except:
                                            pass
                                    else:
                                        pass
                        except:
                            pass
                        try:
                            if i.product2 == j[0]:
                                totalcost = round(
                                    float(j[1]) * float(i.qty2), 2)
                                invotot += totalcost
                                total -= totalcost
                            elif bundle.objects.get(name=i.product2, cid=cmp1):
                                for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                    if i.product2 == b:
                                        try:
                                            if j[0] == bp[0]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty2) * float(bq[0]), 2)
                                                invotot += totalcost
                                                total -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[1]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty2) * float(bq[1]), 2)
                                                invotot += totalcost
                                                total -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[2]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty2) * float(bq[2]), 2)
                                                invotot += totalcost
                                                total -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[3]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty2) * float(bq[3]), 2)
                                                invotot += totalcost
                                                total -= totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.product3 == j[0]:
                                totalcost = round(
                                    float(j[1]) * float(i.qty3), 2)
                                invotot += totalcost
                                total -= totalcost
                            elif bundle.objects.get(name=i.product3, cid=cmp1):
                                for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                    if i.product3 == b:
                                        try:
                                            if j[0] == bp[0]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty3) * float(bq[0]), 2)
                                                invotot += totalcost
                                                total -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[1]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty3) * float(bq[1]), 2)
                                                invotot += totalcost
                                                total -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[2]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty3) * float(bq[2]), 2)
                                                invotot += totalcost
                                                total -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[3]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty3) * float(bq[3]), 2)
                                                invotot += totalcost
                                                total -= totalcost
                                        except:
                                            pass
                                    else:
                                        pass
                        except:
                            pass
                        try:
                            if i.product4 == j[0]:
                                totalcost = round(
                                    float(j[1]) * float(i.qty4), 2)
                                invotot += totalcost
                                total -= totalcost
                            elif bundle.objects.get(name=i.product4, cid=cmp1):
                                for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                    if i.product4 == b:
                                        try:
                                            if j[0] == bp[0]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty4) * float(bq[0]), 2)
                                                invotot += totalcost
                                                total -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[1]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty4) * float(bq[1]), 2)
                                                invotot += totalcost
                                                total -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[2]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty4) * float(bq[2]), 2)
                                                invotot += totalcost
                                                total -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[3]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty4) * float(bq[3]), 2)
                                                invotot += totalcost
                                                total -= totalcost
                                        except:
                                            pass
                                    else:
                                        pass
                        except:
                            pass
                invoic.append(
                    [i.invoicedate, i.invoiceno, (i.customername).replace(u'\xa0', u''), invotot])
            context['invoice5'] = invoic
            creditnot = credit.objects.raw('select * from app1_credit where creditdate between %s and %s',
                                           [fromdate, todate, ])
            creditnote5 = []
            for i in creditnot:
                credtot = 0.0
                for j in inventor1:
                    if i.cid == cmp1:
                        try:
                            if i.product == j[0]:
                                totalcost = round(
                                    float(j[1]) * float(i.qty), 2)
                                credtot += totalcost
                                total += totalcost
                            elif bundle.objects.get(name=i.product, cid=cmp1):
                                for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                    if i.product == b:
                                        try:
                                            if j[0] == bp[0]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty) * float(bq[0]), 2)
                                                credtot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[1]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty) * float(bq[1]), 2)
                                                credtot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[2]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty) * float(bq[2]), 2)
                                                credtot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[3]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty) * float(bq[3]), 2)
                                                credtot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.product1 == j[0]:
                                totalcost = round(
                                    float(j[1]) * float(i.qty1), 2)
                                credtot += totalcost
                                total += totalcost
                            elif bundle.objects.get(name=i.product1, cid=cmp1):
                                for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                    if i.product1 == b:
                                        try:
                                            if j[0] == bp[0]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty1) * float(bq[0]), 2)
                                                credtot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[1]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty1) * float(bq[1]), 2)
                                                credtot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[2]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty1) * float(bq[2]), 2)
                                                credtot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[3]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty1) * float(bq[3]), 2)
                                                credtot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.product2 == j[0]:
                                totalcost = round(
                                    float(j[1]) * float(i.qty2), 2)
                                credtot += totalcost
                                total += totalcost
                            elif bundle.objects.get(name=i.product2, cid=cmp1):
                                for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                    if i.product2 == b:
                                        try:
                                            if j[0] == bp[0]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty2) * float(bq[0]), 2)
                                                credtot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[1]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty2) * float(bq[1]), 2)
                                                credtot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[2]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty2) * float(bq[2]), 2)
                                                credtot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[3]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty2) * float(bq[3]), 2)
                                                credtot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.product3 == j[0]:
                                totalcost = round(
                                    float(j[1]) * float(i.qty3), 2)
                                credtot += totalcost
                                total += totalcost
                            elif bundle.objects.get(name=i.product3, cid=cmp1):
                                for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                    if i.product3 == b:
                                        try:
                                            if j[0] == bp[0]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty3) * float(bq[0]), 2)
                                                credtot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[1]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty3) * float(bq[1]), 2)
                                                credtot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[2]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty3) * float(bq[2]), 2)
                                                credtot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[3]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty3) * float(bq[3]), 2)
                                                credtot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                        except:
                            pass
                creditnote5.append(
                    [i.creditdate, i.creditno, (i.customer).replace(u'\xa0', u''), credtot])
            context['creditnote5'] = creditnote5
            salesrecpt = salesrecpts.objects.raw('select * from app1_salesrecpts where saledate between %s and %s',
                                                 [fromdate, todate, ])
            salesrecipt5 = []
            for i in salesrecpt:
                saletot = 0.0
                for j in inventor1:
                    if i.cid == cmp1:
                        try:
                            if i.salepro == j[0]:
                                totalcost = round(
                                    float(j[1]) * float(i.saleqty), 2)
                                saletot += totalcost
                                total -= totalcost
                            elif bundle.objects.get(name=i.salepro, cid=cmp1):
                                for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                    if i.salepro == b:
                                        try:
                                            if j[0] == bp[0]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.saleqty) * float(bq[0]), 2)
                                                saletot += totalcost
                                                total -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[1]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.saleqty) * float(bq[1]), 2)
                                                saletot += totalcost
                                                total -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[2]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.saleqty) * float(bq[2]), 2)
                                                saletot += totalcost
                                                total -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[3]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.saleqty) * float(bq[3]), 2)
                                                saletot += totalcost
                                                total -= totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.category2 == j[0]:
                                totalcost = round(
                                    float(j[1]) * float(i.catqty2), 2)
                                saletot += totalcost
                                total -= totalcost
                            elif bundle.objects.get(name=i.category2, cid=cmp1):
                                for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                    if i.category2 == b:
                                        try:
                                            if j[0] == bp[0]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.catqty2) * float(bq[0]), 2)
                                                saletot += totalcost
                                                total -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[1]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.catqty2) * float(bq[1]), 2)
                                                saletot += totalcost
                                                total -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[2]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.catqty2) * float(bq[2]), 2)
                                                saletot += totalcost
                                                total -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[3]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.catqty2) * float(bq[3]), 2)
                                                saletot += totalcost
                                                total -= totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.category3 == j[0]:
                                totalcost = round(
                                    float(j[1]) * float(i.catqty3), 2)
                                saletot += totalcost
                                total -= totalcost
                            elif bundle.objects.get(name=i.category3, cid=cmp1):
                                for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                    if i.category3 == b:
                                        try:
                                            if j[0] == bp[0]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.catqty3) * float(bq[0]), 2)
                                                saletot += totalcost
                                                total -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[1]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.catqty3) * float(bq[1]), 2)
                                                saletot += totalcost
                                                total -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[2]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.catqty3) * float(bq[2]), 2)
                                                saletot += totalcost
                                                total -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[3]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.catqty3) * float(bq[3]), 2)
                                                saletot += totalcost
                                                total -= totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.category4 == j[0]:
                                totalcost = round(
                                    float(j[1]) * float(i.catqty4), 2)
                                saletot += totalcost
                                total -= totalcost
                            elif bundle.objects.get(name=i.category4, cid=cmp1):
                                for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                    if i.category4 == b:
                                        try:
                                            if j[0] == bp[0]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.catqty4) * float(bq[0]), 2)
                                                saletot += totalcost
                                                total -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[1]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.catqty4) * float(bq[1]), 2)
                                                saletot += totalcost
                                                total -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[2]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.catqty4) * float(bq[2]), 2)
                                                saletot += totalcost
                                                total -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[3]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.catqty4) * float(bq[3]), 2)
                                                saletot += totalcost
                                                total -= totalcost
                                        except:
                                            pass
                        except:
                            pass
                salesrecipt5.append(
                    [i.saledate, i.saleno, (i.salename).replace(u'\xa0', u''), saletot])
            context['salesrecipt5'] = salesrecipt5
            expen = expences.objects.raw('select * from app1_expences where paymdate between %s and %s',
                                         [fromdate, todate, ])
            expence = []
            for i in expen:
                for j in inventor1:
                    if i.cid == cmp1:
                        if i.product == j[0]:
                            totalcost = round(float(i.price) * float(i.qty), 2)
                            total += totalcost
                            expence.append(
                                [i.paymdate, i.refno, (i.payee).replace(u'\xa0', u''), totalcost])

                        try:
                            if i.product2 == j[0]:
                                totalcost = round(
                                    float(i.price2) * float(i.qty2), 2)
                                total += totalcost
                                expence.append(
                                    [i.paymdate, i.refno, (i.payee).replace(u'\xa0', u''), totalcost])
                        except:
                            pass
                        try:
                            if i.product3 == j[0]:
                                totalcost = round(
                                    float(i.price3) * float(i.qty3), 2)
                                total += totalcost
                                expence.append(
                                    [i.paymdate, i.refno, (i.payee).replace(u'\xa0', u''), totalcost])
                        except:
                            pass
                        try:
                            if i.product4 == j[0]:
                                totalcost = round(
                                    float(i.price4) * float(i.qty4), 2)
                                total += totalcost
                                expence.append(
                                    [i.paymdate, i.refno, (i.payee).replace(u'\xa0', u''), totalcost])
                        except:
                            pass
            context['expence6'] = expence
            debi = suplrcredit.objects.raw('select * from app1_suplrcredit where paymdate between %s and %s',
                                           [fromdate, todate, ])

            debit = []
            for i in debi:
                for j in inventor1:
                    if i.cid == cmp1:
                        try:
                            if i.product == j[0]:
                                totalcost = round(
                                    float(i.price) * float(i.qty), 2)
                                total -= totalcost
                                debit.append(
                                    [i.paymdate, i.refno, (i.supplier).replace(u'\xa0', u''), totalcost])
                        except:
                            pass
                        try:
                            if i.product2 == j[0]:
                                totalcost = round(
                                    float(i.price2) * float(i.qty2), 2)
                                total -= totalcost
                                debit.append(
                                    [i.paymdate, i.refno, (i.supplier).replace(u'\xa0', u''), totalcost])
                        except:
                            pass
                        try:
                            if i.product3 == j[0]:
                                totalcost = round(
                                    float(i.price3) * float(i.qty3), 2)
                                total -= totalcost
                                debit.append(
                                    [i.paymdate, i.refno, (i.supplier).replace(u'\xa0', u''), totalcost])
                        except:
                            pass
                        try:
                            if i.product4 == j[0]:
                                totalcost = round(
                                    float(i.price4) * float(i.qty4), 2)
                                total -= totalcost
                                debit.append(
                                    [i.paymdate, i.refno, (i.supplier).replace(u'\xa0', u''), totalcost])
                        except:
                            pass
            context['debit6'] = debit
            context['inventory1'] = inventor
            context['accbal'] = total
        else:
            pass
        if inventory.objects.filter(incomeacnt=account.name, cid=cmp1):
            total = 0.0
            invento = inventory.objects.filter(
                incomeacnt=account.name, cid=cmp1)
            inventor = []
            for i in invento:
                inventor.append(i.name)
            bundl = bundle.objects.filter(cid=cmp1)
            bundles = []
            bundlpro = []
            bundlqty = []
            bundlprice = []
            for i in bundl:
                bundles.append(i.name)
                bundlpro.append(
                    [i.product1, i.product2, i.product3, i.product4])
                bundlqty.append([i.qty1, i.qty2, i.qty3, i.qty4])
                bundlprice.append([i.price1, i.price2, i.price3, i.price4])
            invoc = invoice.objects.raw('select * from app1_invoice where invoicedate between %s and %s',
                                        [fromdate, todate, ])
            invoic = []
            for i in invoc:
                invotot = 0.0
                for j in inventor:
                    if i.cid == cmp1:
                        try:
                            if i.product == j:
                                invotot += float(i.total)
                                total += float(i.total)
                            elif bundle.objects.get(name=i.product, cid=cmp1):
                                for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                    if i.product == b:
                                        try:
                                            if j == bp[0]:
                                                totalcost = round(
                                                    float(bprice[0]) * float(i.qty) * float(bq[0]), 2)
                                                invotot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[1]:
                                                totalcost = round(
                                                    float(bprice[1]) * float(i.qty) * float(bq[1]), 2)
                                                invotot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[2]:
                                                totalcost = round(
                                                    float(bprice[2]) * float(i.qty) * float(bq[2]), 2)
                                                invotot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[3]:
                                                totalcost = round(
                                                    float(bprice[3]) * float(i.qty) * float(bq[3]), 2)
                                                invotot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.product2 == j:
                                invotot += float(i.total2)
                                total += float(i.total2)
                            elif bundle.objects.get(name=i.product2, cid=cmp1):
                                for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                    if i.product2 == b:
                                        try:
                                            if j == bp[0]:
                                                totalcost = round(
                                                    float(bprice[0]) * float(i.qty2) * float(bq[0]), 2)
                                                invotot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[1]:
                                                totalcost = round(
                                                    float(bprice[1]) * float(i.qty2) * float(bq[1]), 2)
                                                invotot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[2]:
                                                totalcost = round(
                                                    float(bprice[2]) * float(i.qty2) * float(bq[2]), 2)
                                                invotot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[3]:
                                                totalcost = round(
                                                    float(bprice[3]) * float(i.qty2) * float(bq[3]), 2)
                                                invotot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.product3 == j:
                                invotot += float(i.total3)
                                total += float(i.total3)
                            elif bundle.objects.get(name=i.product3, cid=cmp1):
                                for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                    if i.product3 == b:
                                        try:
                                            if j == bp[0]:
                                                totalcost = round(
                                                    float(bprice[0]) * float(i.qty3) * float(bq[0]), 2)
                                                invotot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[1]:
                                                totalcost = round(
                                                    float(bprice[1]) * float(i.qty3) * float(bq[1]), 2)
                                                invotot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[2]:
                                                totalcost = round(
                                                    float(bprice[2]) * float(i.qty3) * float(bq[2]), 2)
                                                invotot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[3]:
                                                totalcost = round(
                                                    float(bprice[3]) * float(i.qty3) * float(bq[3]), 2)
                                                invotot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.product4 == j:
                                invotot += float(i.total4)
                                total += float(i.total4)
                            elif bundle.objects.get(name=i.product4, cid=cmp1):
                                for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                    if i.product4 == b:
                                        try:
                                            if j == bp[0]:
                                                totalcost = round(
                                                    float(bprice[0]) * float(i.qty4) * float(bq[0]), 2)
                                                invotot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[1]:
                                                totalcost = round(
                                                    float(bprice[1]) * float(i.qty4) * float(bq[1]), 2)
                                                invotot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[2]:
                                                totalcost = round(
                                                    float(bprice[2]) * float(i.qty4) * float(bq[2]), 2)
                                                invotot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[3]:
                                                totalcost = round(
                                                    float(bprice[3]) * float(i.qty4) * float(bq[3]), 2)
                                                invotot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                        except:
                            pass
                invoic.append(
                    [i.invoicedate, i.invoiceno, (i.customername).replace(u'\xa0', u''),
                     invotot])
            context['invoice4'] = invoic
            creditnot = credit.objects.raw('select * from app1_credit where creditdate between %s and %s',
                                           [fromdate, todate, ])
            creditnote4 = []
            for i in creditnot:
                credtot = 0.0
                for j in inventor:
                    if i.cid == cmp1:
                        try:
                            if i.product == j:
                                credtot += float(i.total)
                                total -= float(i.total)
                            elif bundle.objects.get(name=i.product, cid=cmp1):
                                for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                    if i.product == b:
                                        try:
                                            if j == bp[0]:
                                                totalcost = round(
                                                    float(bprice[0]) * float(i.qty) * float(bq[0]), 2)
                                                credtot += totalcost
                                                total -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[1]:
                                                totalcost = round(
                                                    float(bprice[1]) * float(i.qty) * float(bq[1]), 2)
                                                credtot += totalcost
                                                total -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[2]:
                                                totalcost = round(
                                                    float(bprice[2]) * float(i.qty) * float(bq[2]), 2)
                                                credtot += totalcost
                                                total -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[3]:
                                                totalcost = round(
                                                    float(bprice[3]) * float(i.qty) * float(bq[3]), 2)
                                                credtot += totalcost
                                                total -= totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.product1 == j:
                                credtot += float(i.total1)
                                total -= float(i.total1)
                            elif bundle.objects.get(name=i.product1, cid=cmp1):
                                for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                    if i.product1 == b:
                                        try:
                                            if j == bp[0]:
                                                totalcost = round(
                                                    float(bprice[0]) * float(i.qty1) * float(bq[0]), 2)
                                                credtot += totalcost
                                                total -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[1]:
                                                totalcost = round(
                                                    float(bprice[1]) * float(i.qty1) * float(bq[1]), 2)
                                                credtot += totalcost
                                                total -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[2]:
                                                totalcost = round(
                                                    float(bprice[2]) * float(i.qty1) * float(bq[2]), 2)
                                                credtot += totalcost
                                                total -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[3]:
                                                totalcost = round(
                                                    float(bprice[3]) * float(i.qty1) * float(bq[3]), 2)
                                                credtot += totalcost
                                                total -= totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.product2 == j:
                                credtot += float(i.total2)
                                total -= float(i.total2)
                            elif bundle.objects.get(name=i.product2, cid=cmp1):
                                for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                    if i.product2 == b:
                                        try:
                                            if j == bp[0]:
                                                totalcost = round(
                                                    float(bprice[0]) * float(i.qty2) * float(bq[0]), 2)
                                                credtot += totalcost
                                                total -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[1]:
                                                totalcost = round(
                                                    float(bprice[1]) * float(i.qty2) * float(bq[1]), 2)
                                                credtot += totalcost
                                                total -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[2]:
                                                totalcost = round(
                                                    float(bprice[2]) * float(i.qty2) * float(bq[2]), 2)
                                                credtot += totalcost
                                                total -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[3]:
                                                totalcost = round(
                                                    float(bprice[3]) * float(i.qty2) * float(bq[3]), 2)
                                                credtot += totalcost
                                                total -= totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.product3 == j:
                                credtot += float(i.total3)
                                total -= float(i.total3)
                            elif bundle.objects.get(name=i.product3, cid=cmp1):
                                for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                    if i.product3 == b:
                                        try:
                                            if j == bp[0]:
                                                totalcost = round(
                                                    float(bprice[0]) * float(i.qty3) * float(bq[0]), 2)
                                                credtot += totalcost
                                                total -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[1]:
                                                totalcost = round(
                                                    float(bprice[1]) * float(i.qty3) * float(bq[1]), 2)
                                                credtot += totalcost
                                                total -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[2]:
                                                totalcost = round(
                                                    float(bprice[2]) * float(i.qty3) * float(bq[2]), 2)
                                                credtot += totalcost
                                                total -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[3]:
                                                totalcost = round(
                                                    float(bprice[3]) * float(i.qty3) * float(bq[3]), 2)
                                                credtot += totalcost
                                                total -= totalcost
                                        except:
                                            pass
                        except:
                            pass
                creditnote4.append(
                    [i.creditdate, i.creditno, (i.customer).replace(u'\xa0', u''), float(credtot)])
            context['creditnote4'] = creditnote4
            salesrecpt = salesrecpts.objects.raw('select * from app1_salesrecpts where saledate between %s and %s',
                                                 [fromdate, todate, ])
            salesrecipt4 = []
            for i in salesrecpt:
                saletot = 0.0
                for j in inventor:
                    if i.cid == cmp1:
                        try:
                            if i.salepro == j:
                                saletot += float(i.saaletotal)
                                total += float(i.saaletotal)
                            elif bundle.objects.get(name=i.salepro, cid=cmp1):
                                for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                    if i.salepro == b:
                                        try:
                                            if j == bp[0]:
                                                totalcost = round(
                                                    float(bprice[0]) * float(i.saleqty) * float(bq[0]), 2)
                                                saletot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[1]:
                                                totalcost = round(
                                                    float(bprice[1]) * float(i.saleqty) * float(bq[1]), 2)
                                                saletot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[2]:
                                                totalcost = round(
                                                    float(bprice[2]) * float(i.saleqty) * float(bq[2]), 2)
                                                saletot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[3]:
                                                totalcost = round(
                                                    float(bprice[3]) * float(i.saleqty) * float(bq[3]), 2)
                                                saletot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.category2 == j:
                                saletot += float(i.cattotal2)
                                total += float(i.cattotal2)
                            elif bundle.objects.get(name=i.category2, cid=cmp1):
                                for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                    if i.category2 == b:
                                        try:
                                            if j == bp[0]:
                                                totalcost = round(
                                                    float(bprice[0]) * float(i.catqty2) * float(bq[0]), 2)
                                                saletot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[1]:
                                                totalcost = round(
                                                    float(bprice[1]) * float(i.catqty2) * float(bq[1]), 2)
                                                saletot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[2]:
                                                totalcost = round(
                                                    float(bprice[2]) * float(i.catqty2) * float(bq[2]), 2)
                                                saletot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[3]:
                                                totalcost = round(
                                                    float(bprice[3]) * float(i.catqty2) * float(bq[3]), 2)
                                                saletot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.category3 == j:
                                saletot += float(i.cattotal3)
                                total += float(i.cattotal3)
                            elif bundle.objects.get(name=i.category3, cid=cmp1):
                                for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                    if i.category3 == b:
                                        try:
                                            if j == bp[0]:
                                                totalcost = round(
                                                    float(bprice[0]) * float(i.catqty3) * float(bq[0]), 2)
                                                saletot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[1]:
                                                totalcost = round(
                                                    float(bprice[1]) * float(i.catqty3) * float(bq[1]), 2)
                                                saletot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[2]:
                                                totalcost = round(
                                                    float(bprice[2]) * float(i.catqty3) * float(bq[2]), 2)
                                                saletot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[3]:
                                                totalcost = round(
                                                    float(bprice[3]) * float(i.catqty3) * float(bq[3]), 2)
                                                saletot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.category4 == j:
                                saletot += float(i.cattotal4)
                                total += float(i.cattotal4)
                            elif bundle.objects.get(name=i.category4, cid=cmp1):
                                for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                    if i.category4 == b:
                                        try:
                                            if j == bp[0]:
                                                totalcost = round(
                                                    float(bprice[0]) * float(i.catqty4) * float(bq[0]), 2)
                                                saletot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[1]:
                                                totalcost = round(
                                                    float(bprice[1]) * float(i.catqty4) * float(bq[1]), 2)
                                                saletot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[2]:
                                                totalcost = round(
                                                    float(bprice[2]) * float(i.catqty4) * float(bq[2]), 2)
                                                saletot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[3]:
                                                totalcost = round(
                                                    float(bprice[3]) * float(i.catqty4) * float(bq[3]), 2)
                                                saletot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                        except:
                            pass
                salesrecipt4.append(
                    [i.saledate, i.saleno, (i.salename).replace(u'\xa0', u''), float(saletot)])
            context['salesrecipt4'] = salesrecipt4
            context['accbal'] = total
        else:
            pass
        if noninventory.objects.filter(income=account.name, cid=cmp1):
            total = 0.0
            noninvento = noninventory.objects.filter(
                income=account.name, cid=cmp1)
            noninventor = []
            for i in noninvento:
                noninventor.append(i.name)
            bundl = bundle.objects.filter(cid=cmp1)
            bundles = []
            bundlpro = []
            bundlqty = []
            bundlprice = []
            for i in bundl:
                bundles.append(i.name)
                bundlpro.append(
                    [i.product1, i.product2, i.product3, i.product4])
                bundlqty.append([i.qty1, i.qty2, i.qty3, i.qty4])
                bundlprice.append([i.price1, i.price2, i.price3, i.price4])
            invoc = invoice.objects.raw(
                'select * from app1_invoice where invoicedate between %s and %s', [fromdate, todate, ])
            invoic = []
            for i in invoc:
                invotot = 0.0
                for j in noninventor:
                    if i.cid == cmp1:
                        try:
                            if i.product == j:
                                invotot += float(i.total)
                                total += float(i.total)
                            elif bundle.objects.get(name=i.product, cid=cmp1):
                                for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                    if i.product == b:
                                        try:
                                            if j == bp[0]:
                                                totalcost = round(
                                                    float(bprice[0]) * float(i.qty) * float(bq[0]), 2)
                                                invotot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[1]:
                                                totalcost = round(
                                                    float(bprice[1]) * float(i.qty) * float(bq[1]), 2)
                                                invotot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[2]:
                                                totalcost = round(
                                                    float(bprice[2]) * float(i.qty) * float(bq[2]), 2)
                                                invotot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[3]:
                                                totalcost = round(
                                                    float(bprice[3]) * float(i.qty) * float(bq[3]), 2)
                                                invotot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.product2 == j:
                                invotot += float(i.total2)
                                total += float(i.total2)
                            elif bundle.objects.get(name=i.product2, cid=cmp1):
                                for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                    if i.product2 == b:
                                        try:
                                            if j == bp[0]:
                                                totalcost = round(
                                                    float(bprice[0]) * float(i.qty2) * float(bq[0]), 2)
                                                invotot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[1]:
                                                totalcost = round(
                                                    float(bprice[1]) * float(i.qty2) * float(bq[1]), 2)
                                                invotot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[2]:
                                                totalcost = round(
                                                    float(bprice[2]) * float(i.qty2) * float(bq[2]), 2)
                                                invotot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[3]:
                                                totalcost = round(
                                                    float(bprice[3]) * float(i.qty2) * float(bq[3]), 2)
                                                invotot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.product3 == j:
                                invotot += float(i.total3)
                                total += float(i.total3)
                            elif bundle.objects.get(name=i.product3, cid=cmp1):
                                for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                    if i.product3 == b:
                                        try:
                                            if j == bp[0]:
                                                totalcost = round(
                                                    float(bprice[0]) * float(i.qty3) * float(bq[0]), 2)
                                                invotot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[1]:
                                                totalcost = round(
                                                    float(bprice[1]) * float(i.qty3) * float(bq[1]), 2)
                                                invotot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[2]:
                                                totalcost = round(
                                                    float(bprice[2]) * float(i.qty3) * float(bq[2]), 2)
                                                invotot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[3]:
                                                totalcost = round(
                                                    float(bprice[3]) * float(i.qty3) * float(bq[3]), 2)
                                                invotot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.product4 == j:
                                invotot += float(i.total4)
                                total += float(i.total4)
                            elif bundle.objects.get(name=i.product4, cid=cmp1):
                                for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                    if i.product4 == b:
                                        try:
                                            if j == bp[0]:
                                                totalcost = round(
                                                    float(bprice[0]) * float(i.qty4) * float(bq[0]), 2)
                                                invotot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[1]:
                                                totalcost = round(
                                                    float(bprice[1]) * float(i.qty4) * float(bq[1]), 2)
                                                invotot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[2]:
                                                totalcost = round(
                                                    float(bprice[2]) * float(i.qty4) * float(bq[2]), 2)
                                                invotot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[3]:
                                                totalcost = round(
                                                    float(bprice[3]) * float(i.qty4) * float(bq[3]), 2)
                                                invotot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                        except:
                            pass
                invoic.append(
                    [i.invoicedate, i.invoiceno, (i.customername).replace(u'\xa0', u''),
                     float(invotot)])
            context['invoice6'] = invoic
            creditnot = credit.objects.raw('select * from app1_credit where creditdate between %s and %s',
                                           [fromdate, todate, ])
            creditnote4 = []
            for i in creditnot:
                credtot = 0.0
                for j in noninventor:
                    if i.cid == cmp1:
                        try:
                            if i.product == j:
                                credtot += float(i.total)
                                total -= float(i.total)
                            elif bundle.objects.get(name=i.product, cid=cmp1):
                                for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                    if i.product == b:
                                        try:
                                            if j == bp[0]:
                                                totalcost = round(
                                                    float(bprice[0]) * float(i.qty) * float(bq[0]), 2)
                                                credtot += totalcost
                                                total -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[1]:
                                                totalcost = round(
                                                    float(bprice[1]) * float(i.qty) * float(bq[1]), 2)
                                                credtot += totalcost
                                                total -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[2]:
                                                totalcost = round(
                                                    float(bprice[2]) * float(i.qty) * float(bq[2]), 2)
                                                credtot += totalcost
                                                total -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[3]:
                                                totalcost = round(
                                                    float(bprice[3]) * float(i.qty) * float(bq[3]), 2)
                                                credtot += totalcost
                                                total -= totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.product1 == j:
                                credtot += float(i.total1)
                                total -= float(i.total1)
                            elif bundle.objects.get(name=i.product1, cid=cmp1):
                                for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                    if i.product1 == b:
                                        try:
                                            if j == bp[0]:
                                                totalcost = round(
                                                    float(bprice[0]) * float(i.qty1) * float(bq[0]), 2)
                                                credtot += totalcost
                                                total -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[1]:
                                                totalcost = round(
                                                    float(bprice[1]) * float(i.qty1) * float(bq[1]), 2)
                                                credtot += totalcost
                                                total -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[2]:
                                                totalcost = round(
                                                    float(bprice[2]) * float(i.qty1) * float(bq[2]), 2)
                                                credtot += totalcost
                                                total -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[3]:
                                                totalcost = round(
                                                    float(bprice[3]) * float(i.qty1) * float(bq[3]), 2)
                                                credtot += totalcost
                                                total -= totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.product2 == j:
                                credtot += float(i.total2)
                                total -= float(i.total2)
                            elif bundle.objects.get(name=i.product2, cid=cmp1):
                                for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                    if i.product2 == b:
                                        try:
                                            if j == bp[0]:
                                                totalcost = round(
                                                    float(bprice[0]) * float(i.qty2) * float(bq[0]), 2)
                                                credtot += totalcost
                                                total -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[1]:
                                                totalcost = round(
                                                    float(bprice[1]) * float(i.qty2) * float(bq[1]), 2)
                                                credtot += totalcost
                                                total -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[2]:
                                                totalcost = round(
                                                    float(bprice[2]) * float(i.qty2) * float(bq[2]), 2)
                                                credtot += totalcost
                                                total -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[3]:
                                                totalcost = round(
                                                    float(bprice[3]) * float(i.qty2) * float(bq[3]), 2)
                                                credtot += totalcost
                                                total -= totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.product3 == j:
                                credtot += float(i.total3)
                                total -= float(i.total3)
                            elif bundle.objects.get(name=i.product3, cid=cmp1):
                                for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                    if i.product3 == b:
                                        try:
                                            if j == bp[0]:
                                                totalcost = round(
                                                    float(bprice[0]) * float(i.qty3) * float(bq[0]), 2)
                                                credtot += totalcost
                                                total -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[1]:
                                                totalcost = round(
                                                    float(bprice[1]) * float(i.qty3) * float(bq[1]), 2)
                                                credtot += totalcost
                                                total -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[2]:
                                                totalcost = round(
                                                    float(bprice[2]) * float(i.qty3) * float(bq[2]), 2)
                                                credtot += totalcost
                                                total -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[3]:
                                                totalcost = round(
                                                    float(bprice[3]) * float(i.qty3) * float(bq[3]), 2)
                                                credtot += totalcost
                                                total -= totalcost
                                        except:
                                            pass
                        except:
                            pass
                creditnote4.append(
                    [i.creditdate, i.creditno, (i.customer).replace(u'\xa0', u''), float(credtot)])
            context['creditnote6'] = creditnote4
            salesrecpt = salesrecpts.objects.raw('select * from app1_salesrecpts where saledate between %s and %s',
                                                 [fromdate, todate, ])
            salesrecipt4 = []
            for i in salesrecpt:
                saletot = 0.0
                for j in noninventor:
                    if i.cid == cmp1:
                        try:
                            if i.salepro == j:
                                saletot += float(i.saaletotal)
                                total += float(i.saaletotal)
                            elif bundle.objects.get(name=i.salepro, cid=cmp1):
                                for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                    if i.salepro == b:
                                        try:
                                            if j == bp[0]:
                                                totalcost = round(
                                                    float(bprice[0]) * float(i.saleqty) * float(bq[0]), 2)
                                                saletot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[1]:
                                                totalcost = round(
                                                    float(bprice[1]) * float(i.saleqty) * float(bq[1]), 2)
                                                saletot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[2]:
                                                totalcost = round(
                                                    float(bprice[2]) * float(i.saleqty) * float(bq[2]), 2)
                                                saletot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[3]:
                                                totalcost = round(
                                                    float(bprice[3]) * float(i.saleqty) * float(bq[3]), 2)
                                                saletot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.category2 == j:
                                saletot += float(i.cattotal2)
                                total += float(i.cattotal2)
                            elif bundle.objects.get(name=i.category2, cid=cmp1):
                                for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                    if i.category2 == b:
                                        try:
                                            if j == bp[0]:
                                                totalcost = round(
                                                    float(bprice[0]) * float(i.catqty2) * float(bq[0]), 2)
                                                saletot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[1]:
                                                totalcost = round(
                                                    float(bprice[1]) * float(i.catqty2) * float(bq[1]), 2)
                                                saletot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[2]:
                                                totalcost = round(
                                                    float(bprice[2]) * float(i.catqty2) * float(bq[2]), 2)
                                                saletot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[3]:
                                                totalcost = round(
                                                    float(bprice[3]) * float(i.catqty2) * float(bq[3]), 2)
                                                saletot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.category3 == j:
                                saletot += float(i.cattotal3)
                                total += float(i.cattotal3)
                            elif bundle.objects.get(name=i.category3, cid=cmp1):
                                for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                    if i.category3 == b:
                                        try:
                                            if j == bp[0]:
                                                totalcost = round(
                                                    float(bprice[0]) * float(i.catqty3) * float(bq[0]), 2)
                                                saletot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[1]:
                                                totalcost = round(
                                                    float(bprice[1]) * float(i.catqty3) * float(bq[1]), 2)
                                                saletot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[2]:
                                                totalcost = round(
                                                    float(bprice[2]) * float(i.catqty3) * float(bq[2]), 2)
                                                saletot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[3]:
                                                totalcost = round(
                                                    float(bprice[3]) * float(i.catqty3) * float(bq[3]), 2)
                                                saletot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.category4 == j:
                                saletot += float(i.cattotal4)
                                total += float(i.cattotal4)
                            elif bundle.objects.get(name=i.category4, cid=cmp1):
                                for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                    if i.category4 == b:
                                        try:
                                            if j == bp[0]:
                                                totalcost = round(
                                                    float(bprice[0]) * float(i.catqty4) * float(bq[0]), 2)
                                                saletot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[1]:
                                                totalcost = round(
                                                    float(bprice[1]) * float(i.catqty4) * float(bq[1]), 2)
                                                saletot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[2]:
                                                totalcost = round(
                                                    float(bprice[2]) * float(i.catqty4) * float(bq[2]), 2)
                                                saletot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[3]:
                                                totalcost = round(
                                                    float(bprice[3]) * float(i.catqty4) * float(bq[3]), 2)
                                                saletot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                        except:
                            pass
                salesrecipt4.append(
                    [i.saledate, i.saleno, (i.salename).replace(u'\xa0', u''), float(saletot)])
            context['salesrecipt6'] = salesrecipt4
            context['accbal'] = total
        else:
            pass
        if inventory.objects.filter(expacnt=account.name, cid=cmp1):
            total = 0.0
            invento = inventory.objects.filter(
                expacnt=account.name, cid=cmp1)
            inventor = []
            for i in invento:
                inventor.append([i.name, i.cost])
            bundl = bundle.objects.filter(cid=cmp1)
            bundles = []
            bundlpro = []
            bundlqty = []
            bundlprice = []
            for i in bundl:
                bundles.append(i.name)
                bundlpro.append(
                    [i.product1, i.product2, i.product3, i.product4])
                bundlqty.append([i.qty1, i.qty2, i.qty3, i.qty4])
            invoc = invoice.objects.raw('select * from app1_invoice where invoicedate between %s and %s',
                                        [fromdate, todate, ])
            invoic = []
            for i in invoc:
                invotot = 0.0
                for j in inventor:
                    if i.cid == cmp1:
                        try:
                            if i.product == j[0]:
                                totalcost = round(float(j[1]) * float(i.qty), 2)
                                invotot += totalcost
                                total += totalcost
                            elif bundle.objects.get(name=i.product, cid=cmp1):
                                for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                    if i.product == b:
                                        try:
                                            if j[0] == bp[0]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty) * float(bq[0]), 2)
                                                invotot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[1]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty) * float(bq[1]), 2)
                                                invotot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[2]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty) * float(bq[2]), 2)
                                                invotot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[3]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty) * float(bq[3]), 2)
                                                invotot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                    else:
                                        pass
                        except:
                            pass
                        try:
                            if i.product2 == j[0]:
                                totalcost = round(
                                    float(j[1]) * float(i.qty2), 2)
                                invotot += totalcost
                                total += totalcost
                            elif bundle.objects.get(name=i.product2, cid=cmp1):
                                for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                    if i.product2 == b:
                                        try:
                                            if j[0] == bp[0]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty2) * float(bq[0]), 2)
                                                invotot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[1]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty2) * float(bq[1]), 2)
                                                invotot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[2]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty2) * float(bq[2]), 2)
                                                invotot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[3]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty2) * float(bq[3]), 2)
                                                invotot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.product3 == j[0]:
                                totalcost = round(
                                    float(j[1]) * float(i.qty3), 2)
                                invotot += totalcost
                                total += totalcost
                            elif bundle.objects.get(name=i.product3, cid=cmp1):
                                for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                    if i.product3 == b:
                                        try:
                                            if j[0] == bp[0]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty3) * float(bq[0]), 2)
                                                invotot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[1]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty3) * float(bq[1]), 2)
                                                invotot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[2]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty3) * float(bq[2]), 2)
                                                invotot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[3]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty3) * float(bq[3]), 2)
                                                invotot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                    else:
                                        pass
                        except:
                            pass
                        try:
                            if i.product4 == j[0]:
                                totalcost = round(
                                    float(j[1]) * float(i.qty4), 2)
                                invotot += totalcost
                                total += totalcost
                            elif bundle.objects.get(name=i.product4, cid=cmp1):
                                for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                    if i.product4 == b:
                                        try:
                                            if j[0] == bp[0]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty4) * float(bq[0]), 2)
                                                invotot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[1]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty4) * float(bq[1]), 2)
                                                invotot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[2]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty4) * float(bq[2]), 2)
                                                invotot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[3]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty4) * float(bq[3]), 2)
                                                invotot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                    else:
                                        pass
                        except:
                            pass
                invoic.append(
                    [i.invoicedate, i.invoiceno, (i.customername).replace(u'\xa0', u''), invotot])
            context['invoiceexp'] = invoic
            creditnot = credit.objects.raw('select * from app1_credit where creditdate between %s and %s',
                                           [fromdate, todate, ])
            creditnote5 = []
            for i in creditnot:
                credtot = 0.0
                for j in inventor:
                    if i.cid == cmp1:
                        try:
                            if i.product == j[0]:
                                totalcost = round(
                                    float(j[1]) * float(i.qty), 2)
                                credtot += totalcost
                                total -= totalcost
                            elif bundle.objects.get(name=i.product, cid=cmp1):
                                for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                    if i.product == b:
                                        try:
                                            if j[0] == bp[0]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty) * float(bq[0]), 2)
                                                credtot += totalcost
                                                total -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[1]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty) * float(bq[1]), 2)
                                                credtot += totalcost
                                                total -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[2]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty) * float(bq[2]), 2)
                                                credtot += totalcost
                                                total -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[3]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty) * float(bq[3]), 2)
                                                credtot += totalcost
                                                total -= totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.product1 == j[0]:
                                totalcost = round(
                                    float(j[1]) * float(i.qty1), 2)
                                credtot += totalcost
                                total -= totalcost
                            elif bundle.objects.get(name=i.product1, cid=cmp1):
                                for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                    if i.product1 == b:
                                        try:
                                            if j[0] == bp[0]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty1) * float(bq[0]), 2)
                                                credtot += totalcost
                                                total -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[1]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty1) * float(bq[1]), 2)
                                                credtot += totalcost
                                                total -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[2]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty1) * float(bq[2]), 2)
                                                credtot += totalcost
                                                total -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[3]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty1) * float(bq[3]), 2)
                                                credtot += totalcost
                                                total -= totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.product2 == j[0]:
                                totalcost = round(
                                    float(j[1]) * float(i.qty2), 2)
                                credtot += totalcost
                                total -= totalcost
                            elif bundle.objects.get(name=i.product2, cid=cmp1):
                                for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                    if i.product2 == b:
                                        try:
                                            if j[0] == bp[0]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty2) * float(bq[0]), 2)
                                                credtot += totalcost
                                                total -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[1]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty2) * float(bq[1]), 2)
                                                credtot += totalcost
                                                total -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[2]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty2) * float(bq[2]), 2)
                                                credtot += totalcost
                                                total -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[3]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty2) * float(bq[3]), 2)
                                                credtot += totalcost
                                                total -= totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.product3 == j[0]:
                                totalcost = round(
                                    float(j[1]) * float(i.qty3), 2)
                                credtot += totalcost
                                total -= totalcost
                            elif bundle.objects.get(name=i.product3, cid=cmp1):
                                for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                    if i.product3 == b:
                                        try:
                                            if j[0] == bp[0]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty3) * float(bq[0]), 2)
                                                credtot += totalcost
                                                total -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[1]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty3) * float(bq[1]), 2)
                                                credtot += totalcost
                                                total -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[2]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty3) * float(bq[2]), 2)
                                                credtot += totalcost
                                                total -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[3]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty3) * float(bq[3]), 2)
                                                credtot += totalcost
                                                total -= totalcost
                                        except:
                                            pass
                        except:
                            pass
                creditnote5.append(
                    [i.creditdate, i.creditno, (i.customer).replace(u'\xa0', u''), credtot])
            context['creditnoteexp'] = creditnote5
            salesrecpt = salesrecpts.objects.raw('select * from app1_salesrecpts where saledate between %s and %s',
                                                 [fromdate, todate, ])
            salesrecipt5 = []
            for i in salesrecpt:
                saletot = 0.0
                for j in inventor:
                    if i.cid == cmp1:
                        try:
                            if i.salepro == j[0]:
                                totalcost = round(
                                    float(j[1]) * float(i.saleqty), 2)
                                saletot += totalcost
                                total += totalcost
                            elif bundle.objects.get(name=i.salepro, cid=cmp1):
                                for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                    if i.salepro == b:
                                        try:
                                            if j[0] == bp[0]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.saleqty) * float(bq[0]), 2)
                                                saletot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[1]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.saleqty) * float(bq[1]), 2)
                                                saletot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[2]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.saleqty) * float(bq[2]), 2)
                                                saletot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[3]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.saleqty) * float(bq[3]), 2)
                                                saletot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.category2 == j[0]:
                                totalcost = round(
                                    float(j[1]) * float(i.catqty2), 2)
                                saletot += totalcost
                                total += totalcost
                            elif bundle.objects.get(name=i.category2, cid=cmp1):
                                for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                    if i.category2 == b:
                                        try:
                                            if j[0] == bp[0]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.catqty2) * float(bq[0]), 2)
                                                saletot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[1]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.catqty2) * float(bq[1]), 2)
                                                saletot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[2]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.catqty2) * float(bq[2]), 2)
                                                saletot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[3]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.catqty2) * float(bq[3]), 2)
                                                saletot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.category3 == j[0]:
                                totalcost = round(
                                    float(j[1]) * float(i.catqty3), 2)
                                saletot += totalcost
                                total += totalcost
                            elif bundle.objects.get(name=i.category3, cid=cmp1):
                                for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                    if i.category3 == b:
                                        try:
                                            if j[0] == bp[0]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.catqty3) * float(bq[0]), 2)
                                                saletot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[1]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.catqty3) * float(bq[1]), 2)
                                                saletot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[2]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.catqty3) * float(bq[2]), 2)
                                                saletot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[3]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.catqty3) * float(bq[3]), 2)
                                                saletot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.category4 == j[0]:
                                totalcost = round(
                                    float(j[1]) * float(i.catqty4), 2)
                                saletot += totalcost
                                total += totalcost
                            elif bundle.objects.get(name=i.category4, cid=cmp1):
                                for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                    if i.category4 == b:
                                        try:
                                            if j[0] == bp[0]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.catqty4) * float(bq[0]), 2)
                                                saletot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[1]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.catqty4) * float(bq[1]), 2)
                                                saletot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[2]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.catqty4) * float(bq[2]), 2)
                                                saletot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[3]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.catqty4) * float(bq[3]), 2)
                                                saletot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                        except:
                            pass
                salesrecipt5.append(
                    [i.saledate, i.saleno, (i.salename).replace(u'\xa0', u''), saletot])
            context['salesreciptexp'] = salesrecipt5
            context['accbal'] = total
        else:
            pass
        if noninventory.objects.filter(expenseaccount=account.name, cid=cmp1):
            total = 0.0
            noninvento = noninventory.objects.filter(
                expenseaccount=account.name, cid=cmp1)
            noninventor = []
            for i in noninvento:
                noninventor.append(i.name)
            expen = expences.objects.raw('select * from app1_expences where paymdate between %s and %s',
                                         [fromdate, todate, ])
            expence = []
            for i in expen:
                for j in noninventor:
                    if i.cid == cmp1:
                        try:
                            if i.product == j:
                                total += float(i.total)
                                expence.append(
                                    [i.paymdate, i.refno, (i.payee).replace(u'\xa0', u''), float(i.total)])
                        except:
                            pass
                        try:
                            if i.product2 == j:
                                total += float(i.total2)
                                expence.append(
                                    [i.paymdate, i.refno, (i.payee).replace(u'\xa0', u''), float(i.total2)])
                        except:
                            pass
                        try:
                            if i.product3 == j:
                                total += float(i.total3)
                                expence.append(
                                    [i.paymdate, i.refno, (i.payee).replace(u'\xa0', u''), float(i.total3)])
                        except:
                            pass
                        try:
                            if i.product4 == j:
                                total += float(i.total4)
                                expence.append(
                                    [i.paymdate, i.refno, (i.payee).replace(u'\xa0', u''), float(i.total4)])
                        except:
                            pass
            context['expence5'] = expence
            debi = suplrcredit.objects.raw('select * from app1_suplrcredit where paymdate between %s and %s',
                                           [fromdate, todate, ])

            debit = []
            for i in debi:
                for j in noninventor:
                    if i.cid == cmp1:
                        try:
                            if i.product == j:
                                total -= float(i.total)
                                debit.append(
                                    [i.paymdate, i.refno, (i.supplier).replace(u'\xa0', u''), float(i.total)])
                        except:
                            pass
                        try:
                            if i.product2 == j:
                                total -= float(i.total2)
                                debit.append(
                                    [i.paymdate, i.refno, (i.supplier).replace(u'\xa0', u''), float(i.total2)])
                        except:
                            pass
                        try:
                            if i.product3 == j:
                                total -= float(i.total3)
                                debit.append(
                                    [i.paymdate, i.refno, (i.supplier).replace(u'\xa0', u''), float(i.total3)])
                        except:
                            pass
                        try:
                            if i.product4 == j:
                                total -= float(i.total4)
                                debit.append(
                                    [i.paymdate, i.refno, (i.supplier).replace(u'\xa0', u''), float(i.total4)])
                        except:
                            pass
            context['debit5'] = debit
        else:
            pass
        total = 0.0
        if account.cid == cmp1:
            total += float(account.balfordisp)
        else:
            pass
        if salesrecpts.objects.filter(saledeposit=account.name, cid=cmp1):
            sale = []
            salesrecpt = salesrecpts.objects.raw('select * from app1_salesrecpts where saledate between %s and %s',
                                                 [fromdate, todate, ])
            for s in salesrecpt:
                if s.cid == cmp1:
                    sale.append(
                        [s.saledate, s.saleno, s.salename, s.salegrandtotal])
                    total += float(s.salegrandtotal)
                    print(s.salegrandtotal)
            context['salesrecipt7'] = sale
            context['accbal'] = total
        else:
            pass
        if payment.objects.filter(depto=account.name, cid=cmp1):
            payman = []
            payment1 = payment.objects.raw('select * from app1_payment where paymdate between %s and %s',
                                           [fromdate, todate, ])
            for s in payment1:
                if s.cid == cmp1:
                    payman.append(
                        [s.paymdate, s.refno, s.customer, s.amtapply])
                    total += float(s.amtapply)
                    print(s.amtapply)
            context['payment1'] = payman
            context['accbal'] = total
        else:
            pass
        if bills.objects.filter(paymacnt=account.name, cid=cmp1):
            bil = []
            total = 0.0
            bill = bills.objects.raw('select * from app1_bills where paymdate between %s and %s',
                                     [fromdate, todate, ])
            for s in bill:
                if s.cid == cmp1 and s.payornot == 'openbalance' and s.paymacnt == account.name:
                    bil.append([s.paymdate, s.payee, 0 + float(s.grandtotal)])
                    total += float(s.grandtotal)
                elif s.cid == cmp1 and s.payornot == 'debit' and s.paymacnt == account.name:
                    bil.append([s.paymdate, s.payee, 0 - float(s.grandtotal)])
                    total -= float(s.grandtotal)
                elif s.cid == cmp1 and s.payornot != 'debit' and s.payornot != 'openbalance' and s.paymacnt == account.name:
                    bil.append([s.paymdate, s.payee, 0 - float(s.grandtotal)])
                    total -= float(s.grandtotal)
            context['accbal'] = total
            context['bill1'] = bil
        else:
            pass
        return render(request, 'app1/runreportfilterednew.html', context)
    except:
        return redirect('runreport')


@login_required(login_url='regcomp')
def cashposition(request):
    # try:
        label_1 = []
        data_1 = []
        cmp1 = company.objects.get(id=request.session['uid'])
        cashpo = accounts.objects.filter(
            detype='Cash and Cash Equivalents', cid=cmp1)
        balance = accounts.objects.order_by('balance')[:10]
        for bala in balance:
            if bala.cid == cmp1:
                label_1.append(bala.name)
                data_1.append(bala.balance)
        context = {'cmp1': cmp1,
                   'cashpo': cashpo,
                   'label_1': label_1,
                   'data_1': data_1}
        return render(request, 'app1/cashposition.html', context)
    # except:
    #     return redirect('godash')

@login_required(login_url='regcomp')
def editaccounts(request):
    try:
        user1 = User.objects.get(id=request.session["uid"])
        cmp1 = company.objects.get(id=request.session["uid"])
        context = {'users': user1, 'cmp1': cmp1}
        return render(request, 'app1/accountssettings.html', context)
    except:
        return redirect('godash')


@login_required(login_url='regcomp')
def updateaccounts(request):
    try:
        user = User.objects.get(id=request.session["uid"])
        comp = company.objects.get(id=user.id)

        user.first_name = request.POST["first_name"]
        user.last_name = request.POST["last_name"]
        user.email = request.POST["email"]
        p1 = request.POST["newpassword"]
        p2 = request.POST["newpassword1"]

        comp.cname = request.POST["cname"]
        comp.caddress = request.POST["caddress"]
        comp.city = request.POST["city"]
        comp.state = request.POST["state"]
        comp.pincode = request.POST["pincode"]
        comp.cemail = request.POST["cemail"]
        comp.phone = request.POST["phone"]
        comp.bname = request.POST["bname"]
        comp.industry = request.POST["industry"]
        comp.ctype = request.POST["ctype"]
        try:
            img1 = request.FILES["img1"]
            comp.cimg = img1
        except:
            img2 = request.POST["img2"]
            comp.cimg = img2

        comp.save()
        user.save()

        if p1 == p2:
            if p1 != "":
                user.set_password(p1)
                user.save()
                logout(request)
                return redirect('/app1/go')
        elif p1 == "":
            return redirect('/app1/godash')

        return redirect('/app1/godash')
    except:
        return redirect('godash')


@login_required(login_url='regcomp')
def gobillingandsub(request):
    cmp1 = company.objects.get(id=request.session['uid'])
    return render(request, 'app1/billingandsubscription.html', {'cmp1': cmp1})


@login_required(login_url='regcomp')
def goaccountexpense(request):
    cmp1 = company.objects.get(id=request.session['uid'])

    return render(request, 'app1/accountexpense.html', {'cmp1': cmp1})





@login_required(login_url='regcomp')
def goaccountsales(request):
    cmp1 = company.objects.get(id=request.session['uid'])
    return render(request, 'app1/accountsales.html', {'cmp1': cmp1})

@login_required(login_url='regcomp')
def customstyle(request):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        newstyl = customize.objects.filter(cid=cmp1)
        return render(request, 'app1/customstyle.html', {'newstyle': newstyl, 'cmp1': cmp1})
    except:
        return redirect('godash')

@login_required(login_url='regcomp')
def newstyle(request):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        return render(request, 'app1/newstyle.html', {'cmp1': cmp1})
    except:
        return redirect('customstyle')

@login_required(login_url='regcomp')
def addnewstyle(request):
    try:
        if request.method == 'POST':
            cmp1 = company.objects.get(id=request.session['uid'])
            name = request.POST['name']
            template = request.POST['template']
            pcolour = request.POST['pcolour']
            scolour = request.POST['scolour']
            fonts = request.POST['fonts']
            selected = request.POST.get('selected', ' ')
            newstyl = customize(name=name, template=template, pcolour=pcolour, scolour=scolour, fonts=fonts, selected=selected, cid=cmp1)
            newstyl.save()
            newsty = customize.objects.filter(cid=cmp1)
            for i in newsty:
                if i.selected == 'selected' and i.name != request.POST['name']:
                    name = i.name
                    newsty1 = customize.objects.get(name=name, cid=cmp1)
                    newsty1.selected = ' '
                    newsty1.save()
                else:
                    pass
            return redirect('customstyle')
        else:
            return redirect('customstyle')
    except:
        messages.info(request, 'something went wrong.')
        return redirect('newstyle')

@login_required(login_url='regcomp')
def editstyle(request, customizeid):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        newstyl = customize.objects.get(customizeid=customizeid, cid=cmp1)
        return render(request, 'app1/editstyle.html', {'cmp1': cmp1, 'newstyle': newstyl})
    except:
        return redirect('customstyle')


@login_required(login_url='regcomp')
def updatestyle(request, customizeid):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        if request.method == 'POST':
            newstyl = customize.objects.get(customizeid=customizeid, cid=cmp1)
            newstyl.name = request.POST.get('name')
            newstyl.template = request.POST.get('template')
            newstyl.pcolour = request.POST.get('pcolour')
            newstyl.scolour = request.POST.get('scolour')
            newstyl.fonts = request.POST.get('fonts')
            newstyl.selected = request.POST.get('selected', ' ')
            newstyl.save()
            newsty = customize.objects.filter(cid=cmp1)
            for i in newsty:
                if i.selected == 'selected' and i.name != newstyl.name:
                    name = i.name
                    newst = customize.objects.get(name=name, cid=cmp1)
                    newst.selected = ' '
                    newst.save()
                else:
                    pass
            return redirect('customstyle')
        else:
            return redirect('customstyle')
    except:
        return redirect('customstyle')

@login_required(login_url='regcomp')
def deletestyle(request, customizeid):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        newstyl = customize.objects.get(customizeid=customizeid, cid=cmp1)
        newstyl.delete()
        return redirect('customstyle')
    except:
        return redirect('customstyle')
    

@login_required(login_url='regcomp') 
def cash_flow_analyzer(request):
    cmp1 = company.objects.get(id=request.session['uid'])
    context = {'cmp1': cmp1}
    data_1 = []
    toda = date.today()
    tod = toda.strftime("%Y-%m-%d")
    balance = expences.objects.order_by('paymmethod')
    ball = expences.objects.order_by('category1')
    tody = datetime.now()
    tod1 = tody.strftime("%B")
    fromdate = toda.strftime("%Y-%m-01")
    todate = toda.strftime("%Y-%m-31")
    
    pmonth = int(toda.strftime("%m")) - 1
    tod2 = pmonth
    if tod2 == 12 or tod2 == 11 or tod2 == 10:
        fromdatem = f'{toda.strftime("%Y")}-{pmonth}-01'
        print("str",fromdate)
        print("str",todate)
        print("str",fromdatem)
        todatem = f'{toda.strftime("%Y")}-{pmonth}-31'
    else:   
        fromdatem = f'{toda.strftime("%Y")}-0{pmonth}-01'
        print("str",fromdate)
        print("str",todate)
        print("str",fromdatem)
        todatem = f'{toda.strftime("%Y")}-0{pmonth}-31'
   
    
    pmonth1 = int(toda.strftime("%m")) - 2
    tod3 = pmonth1
    if tod3 == 12 or tod3 == 11 or tod3 == 10:
        fromdatem1 = f'{toda.strftime("%Y")}-{pmonth1}-01'
        todatem1 = f'{toda.strftime("%Y")}-{pmonth1}-31'
    else:   
        fromdatem1 = f'{toda.strftime("%Y")}-0{pmonth1}-01'
        todatem1 = f'{toda.strftime("%Y")}-0{pmonth1}-31'
    
    
    pmonth2 = int(toda.strftime("%m")) - 3
    tod4 = pmonth2
    if tod4 == 12 or tod4 == 11 or tod4 == 10:
        fromdatem2 = f'{toda.strftime("%Y")}-{pmonth2}-01'
        todatem2 = f'{toda.strftime("%Y")}-{pmonth2}-31'
    else:   
        fromdatem2 = f'{toda.strftime("%Y")}-0{pmonth2}-01'
        todatem2 = f'{toda.strftime("%Y")}-0{pmonth2}-31'
    
    pmonth3 = int(toda.strftime("%m")) - 4
    tod5 = pmonth3
    if tod5 == 12 or tod5 == 11 or tod5 == 10:
        fromdatem3 = f'{toda.strftime("%Y")}-{pmonth3}-01'
        todatem3 = f'{toda.strftime("%Y")}-{pmonth3}-31'
    else:   
        fromdatem3 = f'{toda.strftime("%Y")}-0{pmonth3}-01'
        todatem3 = f'{toda.strftime("%Y")}-0{pmonth3}-31'
    
    
    # pyear = int(toda.strftime("%Y")) - 1
    # fromdate = f'{pyear}-03-01'
    # todate = f'{toda.strftime("%Y")}-03-31' 
    
    
    data_1 = []
    exp = 0.0
    bat = 0.0
    bank = 0.0
    bus = 0.0
    cha = 0.0
    computer = 0.0
    continueing = 0.0
    Depreciation = 0.0
    Dues = 0.0
    context['tod1'] = tod1
    # context['tod2'] = tod2
    context['pmonth'] = pmonth
    context['pmonth1'] = pmonth1
    context['pmonth2'] = pmonth2
    context['pmonth3'] = pmonth3
    date_2 = []
    
    date1 = 0.0
    date3 = 0.0
    date5 = 0.0
    date7 = 0.0
    #111eee
    
    bill = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdate, todate, ])
    
    for b in bill:
        if b.paymmethod=='Cash' and b.category1 == 'Advertising/Promotional':
            date_2.append(b.totamt)
            date1+=float(b.totamt)
    context['date1'] = date1
    
    date_4=[]
    bill2 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem, todatem, ])
    for bi in bill2:
        if bi.paymmethod=='Cash' and bi.category1 == 'Advertising/Promotional':
            date_4.append(bi.totamt)
            date3+=float(bi.totamt)
    context['date3'] = date3
    
    date_5=[]
    bill3 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem1, todatem1, ])
    for be in bill3:
        if be.paymmethod=='Cash' and be.category1 == 'Advertising/Promotional':
            date_5.append(be.totamt)
            date5+=float(be.totamt)
    context['date5'] = date5
    
    date_6=[]
    date6=0.0
    bill4 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem2, todatem2, ])
    for be in bill4:
        if be.paymmethod=='Cash' and be.category1 == 'Advertising/Promotional':
            date_6.append(be.totamt)
            date6+=float(be.totamt)
    context['date6'] = date6
    
    date_7=[]
    bill5 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem3, todatem3, ])
    for be in bill5:
        if be.paymmethod=='Cash' and be.category1 == 'Advertising/Promotional':
            date_7.append(be.totamt)
            date7+=float(be.totamt)
    context['date7'] = date7
    
    #bank chanrges
    dom_1=[]
    dom = 0.0
    bilal = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdate, todate, ])
    
    for b in bilal:
        if b.paymmethod=='Cash' and b.category1 == 'Bank Charges':
            dom_1.append(b.totamt)
            dom+=float(b.totamt)
    context['dom'] = dom
    
    dom_2 = []
    dom2 = 0.0
    bilal2 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem, todatem, ])
    for bi in bilal2:
        if bi.paymmethod=='Cash' and bi.category1 == 'Bank Charges':
            dom_2.append(bi.totamt)
            dom2+=float(bi.totamt)
    context['dom2'] = dom2
    
    dom_3 = []
    dom3 = 0.0
    bilal3 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem1, todatem1, ])
    for be in bilal3:
        if be.paymmethod=='Cash' and be.category1 == 'Bank Charges':
            dom_3.append(be.totamt)
            dom3+=float(be.totamt)
    context['dom3'] = dom3
    
    dom_4 = []
    dom4 = 0.0
    bilal4 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem2, todatem2, ])
    for be in bilal4:
        if be.paymmethod=='Cash' and be.category1 == 'Bank Charges':
            dom_4.append(be.totamt)
            dom4+=float(be.totamt)
    context['dom4'] = dom4
    
    dom_5 = []
    dom5 = 0.0
    bilal5 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem3, todatem3, ])
    for be in bilal5:
        if be.paymmethod=='Cash' and be.category1 == 'Bank Charges':
            dom_5.append(be.totamt)
            dom5+=float(be.totamt)
    context['dom5'] = dom5
    
    
    #Business Licenses and Permits
    don_1=[]
    don1 = 0.0
    bilal = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdate, todate, ])
    
    for b in bilal:
        if b.paymmethod=='Cash' and b.category1 == 'Business Licenses and Permits':
            don_1.append(b.totamt)
            don1+=float(b.totamt)
    context['don1'] = don1
    
    don_2 = []
    don2 = 0.0
    bilal2 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem, todatem, ])
    for bi in bilal2:
        if bi.paymmethod=='Cash' and bi.category1 == 'Business Licenses and Permits':
            don_2.append(bi.totamt)
            don2+=float(bi.totamt)
    context['don2'] = don2
    
    don_3 = []
    don3 = 0.0
    bilal3 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem1, todatem1, ])
    for be in bilal3:
        if be.paymmethod=='Cash' and be.category1 == 'Business Licenses and Permits':
            don_3.append(be.totamt)
            don3+=float(be.totamt)
    context['don3'] = don3
    
    don_4 = []
    don4 = 0.0
    bilal4 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem2, todatem2, ])
    for be in bilal4:
        if be.paymmethod=='Cash' and be.category1 == 'Business Licenses and Permits':
            don_4.append(be.totamt)
            don4+=float(be.totamt)
    context['don4'] = don4
    
    don_5 = []
    don5 = 0.0
    bilal5 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem3, todatem3, ])
    for be in bilal5:
        if be.paymmethod=='Cash' and be.category1 == 'Business Licenses and Permits':
            don_5.append(be.totamt)
            don5+=float(be.totamt)
    context['don5'] = don5
    
    
    # Charitable Contributions
    doc_1=[]
    doc1 = 0.0
    bilal = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdate, todate, ])
    
    for b in bilal:
        if b.paymmethod=='Cash' and b.category1 == 'Charitable Contributions':
            doc_1.append(b.totamt)
            doc1+=float(b.totamt)
    context['doc1'] = doc1
    
    doc_2 = []
    doc2 = 0.0
    bilal2 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem, todatem, ])
    for bi in bilal2:
        if bi.paymmethod=='Cash' and bi.category1 == 'Charitable Contributions':
            doc_2.append(bi.totamt)
            doc2+=float(bi.totamt)
    context['doc2'] = doc2
    
    doc_3 = []
    doc3 = 0.0
    bilal3 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem1, todatem1, ])
    for be in bilal3:
        if be.paymmethod=='Cash' and be.category1 == 'Charitable Contributions':
            doc_3.append(be.totamt)
            doc3+=float(be.totamt)
    context['doc3'] = doc3
    
    doc_4 = []
    doc4 = 0.0
    bilal4 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem2, todatem2, ])
    for be in bilal4:
        if be.paymmethod=='Cash' and be.category1 == 'Charitable Contributions':
            doc_4.append(be.totamt)
            doc4+=float(be.totamt)
    context['doc4'] = doc4
    
    doc_5 = []
    doc5 = 0.0
    bilal5 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem3, todatem3, ])
    for be in bilal5:
        if be.paymmethod=='Cash' and be.category1 == 'Charitable Contributions':
            doc_5.append(be.totamt)
            doc5+=float(be.totamt)
    context['doc5'] = doc5
    
    # Computer and Internet Expense
    dov_1=[]
    dov1 = 0.0
    bilal = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdate, todate, ])
    
    for b in bilal:
        if b.paymmethod=='Cash' and b.category1 == 'Computer and Internet Expense':
            dov_1.append(b.totamt)
            dov1+=float(b.totamt)
    context['dov1'] = dov1
    
    dov_2 = []
    dov2 = 0.0
    bilal2 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem, todatem, ])
    for bi in bilal2:
        if bi.paymmethod=='Cash' and bi.category1 == 'Computer and Internet Expense':
            dov_2.append(bi.totamt)
            dov2+=float(bi.totamt)
    context['dov2'] = dov2
    
    dov_3 = []
    dov3 = 0.0
    bilal3 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem1, todatem1, ])
    for be in bilal3:
        if be.paymmethod=='Cash' and be.category1 == 'Computer and Internet Expense':
            dov_3.append(be.totamt)
            dov3+=float(be.totamt)
    context['dov3'] = dov3
    
    dov_4 = []
    dov4 = 0.0
    bilal4 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem2, todatem2, ])
    for be in bilal4:
        if be.paymmethod=='Cash' and be.category1 == 'Computer and Internet Expense':
            dov_4.append(be.totamt)
            dov4+=float(be.totamt)
    context['dov4'] = dov4
    
    dov_5 = []
    dov5 = 0.0
    bilal5 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem3, todatem3, ])
    for be in bilal5:
        if be.paymmethod=='Cash' and be.category1 == 'Computer and Internet Expense':
            dov_5.append(be.totamt)
            dov5+=float(be.totamt)
    context['dov5'] = dov5
    
    # Continuing Education
    dox_1=[]
    dox1 = 0.0
    bilal = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdate, todate, ])
    
    for b in bilal:
        if b.paymmethod=='Cash' and b.category1 == 'Continuing Education':
            dox_1.append(b.totamt)
            dox1+=float(b.totamt)
    context['dox1'] = dox1
    
    dox_2 = []
    dox2 = 0.0
    bilal2 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem, todatem, ])
    for bi in bilal2:
        if bi.paymmethod=='Cash' and bi.category1 == 'Continuing Education':
            dox_2.append(bi.totamt)
            dox2+=float(bi.totamt)
    context['dox2'] = dox2
    
    dox_3 = []
    dox3 = 0.0
    bilal3 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem1, todatem1, ])
    for be in bilal3:
        if be.paymmethod=='Cash' and be.category1 == 'Continuing Education':
            dox_3.append(be.totamt)
            dox3+=float(be.totamt)
    context['dox3'] = dox3
    
    dox_4 = []
    dox4 = 0.0
    bilal4 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem2, todatem2, ])
    for be in bilal4:
        if be.paymmethod=='Cash' and be.category1 == 'Continuing Education':
            dox_4.append(be.totamt)
            dox4+=float(be.totamt)
    context['dox4'] = dox4
    
    dox_5 = []
    dox5 = 0.0
    bilal5 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem3, todatem3, ])
    for be in bilal5:
        if be.paymmethod=='Cash' and be.category1 == 'Continuing Education':
            dox_5.append(be.totamt)
            dox5+=float(be.totamt)
    context['dox5'] = dox5
    
    # Depreciation Expense
    dop_1=[]
    dop1 = 0.0
    bilal = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdate, todate, ])
    
    for b in bilal:
        if b.paymmethod=='Cash' and b.category1 == 'Depreciation Expense':
            dop_1.append(b.totamt)
            dop1+=float(b.totamt)
    context['dop1'] = dop1
    
    dop_2 = []
    dop2 = 0.0
    bilal2 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem, todatem, ])
    for bi in bilal2:
        if bi.paymmethod=='Cash' and bi.category1 == 'Depreciation Expense':
            dop_2.append(bi.totamt)
            dop2+=float(bi.totamt)
    context['dop2'] = dop2
    
    dop_3 = []
    dop3 = 0.0
    bilal3 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem1, todatem1, ])
    for be in bilal3:
        if be.paymmethod=='Cash' and be.category1 == 'Depreciation Expense':
            dop_3.append(be.totamt)
            dop3+=float(be.totamt)
    context['dop3'] = dop3
    
    dop_4 = []
    dop4 = 0.0
    bilal4 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem2, todatem2, ])
    for be in bilal4:
        if be.paymmethod=='Cash' and be.category1 == 'Depreciation Expense':
            dop_4.append(be.totamt)
            dop4+=float(be.totamt)
    context['dop4'] = dop4
    
    dop_5 = []
    dop5 = 0.0
    bilal5 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem3, todatem3, ])
    for be in bilal5:
        if be.paymmethod=='Cash' and be.category1 == 'Depreciation Expense':
            dop_5.append(be.totamt)
            dop5+=float(be.totamt)
    context['dop5'] = dop5
    
    # Dues and Subscriptions
    doy_1=[]
    doy1 = 0.0
    bilal = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdate, todate, ])
    
    for b in bilal:
        if b.paymmethod=='Cash' and b.category1 == 'Dues and Subscriptions':
            doy_1.append(b.totamt)
            doy1+=float(b.totamt)
    context['doy1'] = doy1
    
    doy_2 = []
    doy2 = 0.0
    bilal2 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem, todatem, ])
    for bi in bilal2:
        if bi.paymmethod=='Cash' and bi.category1 == 'Dues and Subscriptions':
            doy_2.append(bi.totamt)
            doy2+=float(bi.totamt)
    context['doy2'] = doy2
    
    doy_3 = []
    doy3 = 0.0
    bilal3 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem1, todatem1, ])
    for be in bilal3:
        if be.paymmethod=='Cash' and be.category1 == 'Dues and Subscriptions':
            doy_3.append(be.totamt)
            doy3+=float(be.totamt)
    context['doy3'] = doy3
    
    doy_4 = []
    doy4 = 0.0
    bilal4 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem2, todatem2, ])
    for be in bilal4:
        if be.paymmethod=='Cash' and be.category1 == 'Dues and Subscriptions':
            doy_4.append(be.totamt)
            doy4+=float(be.totamt)
    context['doy4'] = doy4
    
    doy_5 = []
    doy5 = 0.0
    bilal5 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem3, todatem3, ])
    for be in bilal5:
        if be.paymmethod=='Cash' and be.category1 == 'Dues and Subscriptions':
            doy_5.append(be.totamt)
            doy5+=float(be.totamt)
    context['doy5'] = doy5

    # Housekeeping Charges
    dot_1=[]
    dot1 = 0.0
    bilal = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdate, todate, ])
    
    for b in bilal:
        if b.paymmethod=='Cash' and b.category1 == 'Housekeeping Charges':
            dot_1.append(b.totamt)
            dot1+=float(b.totamt)
    context['dot1'] = dot1
    
    dot_2 = []
    dot2 = 0.0
    bilal2 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem, todatem, ])
    for bi in bilal2:
        if bi.paymmethod=='Cash' and bi.category1 == 'Housekeeping Charges':
            dot_2.append(bi.totamt)
            dot2+=float(bi.totamt)
    context['dot2'] = dot2

    dot_3 = []
    dot3 = 0.0
    bilal3 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem1, todatem1, ])
    for be in bilal3:
        if be.paymmethod=='Cash' and be.category1 == 'Housekeeping Charges':
            dot_3.append(be.totamt)
            dot3+=float(be.totamt)
    context['dot3'] = dot3
    
    dot_4 = []
    dot4 = 0.0
    bilal4 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem2, todatem2, ])
    for be in bilal4:
        if be.paymmethod=='Cash' and be.category1 == 'Housekeeping Charges':
            dot_4.append(be.totamt)
            dot4+=float(be.totamt)
    context['dot4'] = dot4
    
    dot_5 = []
    dot5 = 0.0
    bilal5 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem3, todatem3, ])
    for be in bilal5:
        if be.paymmethod=='Cash' and be.category1 == 'Housekeeping Charges':
            dot_5.append(be.totamt)
            dot5+=float(be.totamt)
    context['dot5'] = dot5
    
    # Insurance Expense
    doi_1=[]
    doi1 = 0.0
    bilal = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdate, todate, ])
    
    for b in bilal:
        if b.paymmethod=='Cash' and b.category1 == 'Insurance Expense':
            doi_1.append(b.totamt)
            doi1+=float(b.totamt)
    context['doi1'] = doi1
    
    doi_2 = []
    doi2 = 0.0
    bilal2 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem, todatem, ])
    for bi in bilal2:
        if bi.paymmethod=='Cash' and bi.category1 == 'Insurance Expense':
            doi_2.append(bi.totamt)
            doi2+=float(bi.totamt)
    context['doi2'] = doi2

    doi_3 = []
    doi3 = 0.0
    bilal3 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem1, todatem1, ])
    for be in bilal3:
        if be.paymmethod=='Cash' and be.category1 == 'Insurance Expense':
            doi_3.append(be.totamt)
            doi3+=float(be.totamt)
    context['doi3'] = doi3
    
    doi_4 = []
    doi4 = 0.0
    bilal4 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem2, todatem2, ])
    for be in bilal4:
        if be.paymmethod=='Cash' and be.category1 == 'Insurance Expense':
            doi_4.append(be.totamt)
            doi4+=float(be.totamt)
    context['doi4'] = doi4
    
    doi_5 = []
    doi5 = 0.0
    bilal5 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem3, todatem3, ])
    for be in bilal5:
        if be.paymmethod=='Cash' and be.category1 == 'Insurance Expense':
            doi_5.append(be.totamt)
            doi5+=float(be.totamt)
    context['doi5'] = doi5
    
    # Insurance Expense-General Liability Insurance
    dor_1=[]
    dor1 = 0.0
    bilal = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdate, todate, ])
    for b in bilal:
        if b.paymmethod=='Cash' and b.category1 == 'Insurance Expense-General Liability Insurance':
            dor_1.append(b.totamt)
            dor1+=float(b.totamt)
    context['dor1'] = dor1
    dor_2 = []
    dor2 = 0.0
    bilal2 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem, todatem, ])
    for bi in bilal2:
        if bi.paymmethod=='Cash' and bi.category1 == 'Insurance Expense-General Liability Insurance':
            dor_2.append(bi.totamt)
            dor2+=float(bi.totamt)
    context['dor2'] = dor2
    dor_3 = []
    dor3 = 0.0
    bilal3 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem1, todatem1, ])
    for be in bilal3:
        if be.paymmethod=='Cash' and be.category1 == 'Insurance Expense-General Liability Insurance':
            dor_3.append(be.totamt)
            dor3+=float(be.totamt)
    context['dor3'] = dor3
    dor_4 = []
    dor4 = 0.0
    bilal4 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem2, todatem2, ])
    for be in bilal4:
        if be.paymmethod=='Cash' and be.category1 == 'Insurance Expense-General Liability Insurance':
            dor_4.append(be.totamt)
            dor4+=float(be.totamt)
    context['dor4'] = dor4
    dor_5 = []
    dor5 = 0.0
    bilal5 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem3, todatem3, ])
    for be in bilal5:
        if be.paymmethod=='Cash' and be.category1 == 'Insurance Expense-General Liability Insurance':
            dor_5.append(be.totamt)
            dor5+=float(be.totamt)
    context['dor5'] = dor5
    
    # Insurance Expense-Health Insurance
    dok_1=[]
    dok1 = 0.0
    bilal = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdate, todate, ])
    for b in bilal:
        if b.paymmethod=='Cash' and b.category1 == 'Insurance Expense-Health Insurance':
            dok_1.append(b.totamt)
            dok1+=float(b.totamt)
    context['dok1'] = dok1
    dok_2 = []
    dok2 = 0.0
    bilal2 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem, todatem, ])
    for bi in bilal2:
        if bi.paymmethod=='Cash' and bi.category1 == 'Insurance Expense-Health Insurance':
            dok_2.append(bi.totamt)
            dok2+=float(bi.totamt)
    context['dok2'] = dok2
    dok_3 = []
    dok3 = 0.0
    bilal3 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem1, todatem1, ])
    for be in bilal3:
        if be.paymmethod=='Cash' and be.category1 == 'Insurance Expense-Health Insurance':
            dok_3.append(be.totamt)
            dok3+=float(be.totamt)
    context['dok3'] = dok3
    dok_4 = []
    dok4 = 0.0
    bilal4 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem2, todatem2, ])
    for be in bilal4:
        if be.paymmethod=='Cash' and be.category1 == 'Insurance Expense-Health Insurance':
            dok_4.append(be.totamt)
            dok4+=float(be.totamt)
    context['dok4'] = dok4
    dok_5 = []
    dok5 = 0.0
    bilal5 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem3, todatem3, ])
    for be in bilal5:
        if be.paymmethod=='Cash' and be.category1 == 'Insurance Expense-Health Insurance':
            dok_5.append(be.totamt)
            dok5+=float(be.totamt)
    context['dok5'] = dok5
    
    # Insurance Expense-Life and Disability Insurance
    doo_1=[]
    doo1 = 0.0
    bilal = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdate, todate, ])
    for b in bilal:
        if b.paymmethod=='Cash' and b.category1 == 'Insurance Expense-Life and Disability Insurance':
            doo_1.append(b.totamt)
            doo1+=float(b.totamt)
    context['doo1'] = doo1
    doo_2 = []
    doo2 = 0.0
    bilal2 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem, todatem, ])
    for bi in bilal2:
        if bi.paymmethod=='Cash' and bi.category1 == 'Insurance Expense-Life and Disability Insurance':
            doo_2.append(bi.totamt)
            doo2+=float(bi.totamt)
    context['doo2'] = doo2
    doo_3 = []
    doo3 = 0.0
    bilal3 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem1, todatem1, ])
    for be in bilal3:
        if be.paymmethod=='Cash' and be.category1 == 'Insurance Expense-Life and Disability Insurance':
            doo_3.append(be.totamt)
            doo3+=float(be.totamt)
    context['doo3'] = doo3
    doo_4 = []
    doo4 = 0.0
    bilal4 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem2, todatem2, ])
    for be in bilal4:
        if be.paymmethod=='Cash' and be.category1 == 'Insurance Expense-Life and Disability Insurance':
            doo_4.append(be.totamt)
            doo4+=float(be.totamt)
    context['doo4'] = doo4
    doo_5 = []
    doo5 = 0.0
    bilal5 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem3, todatem3, ])
    for be in bilal5:
        if be.paymmethod=='Cash' and be.category1 == 'Insurance Expense-Life and Disability Insurance':
            doo_5.append(be.totamt)
            doo5+=float(be.totamt)
    context['doo5'] = doo5
    
    # Insurance Expense-Professional Liability
    dooq_1=[]
    dooq1 = 0.0
    bilal = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdate, todate, ])
    for b in bilal:
        if b.paymmethod=='Cash' and b.category1 == 'Insurance Expense-Professional Liability':
            dooq_1.append(b.totamt)
            dooq1+=float(b.totamt)
    context['dooq1'] = dooq1
    dooq_2 = []
    dooq2 = 0.0
    bilal2 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem, todatem, ])
    for bi in bilal2:
        if bi.paymmethod=='Cash' and bi.category1 == 'Insurance Expense-Professional Liability':
            dooq_2.append(bi.totamt)
            dooq2+=float(bi.totamt)
    context['dooq2'] = dooq2
    dooq_3 = []
    dooq3 = 0.0
    bilal3 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem1, todatem1, ])
    for be in bilal3:
        if be.paymmethod=='Cash' and be.category1 == 'Insurance Expense-Professional Liability':
            dooq_3.append(be.totamt)
            dooq3+=float(be.totamt)
    context['dooq3'] = dooq3
    dooq_4 = []
    dooq4 = 0.0
    bilal4 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem2, todatem2, ])
    for be in bilal4:
        if be.paymmethod=='Cash' and be.category1 == 'Insurance Expense-Professional Liability':
            dooq_4.append(be.totamt)
            dooq4+=float(be.totamt)
    context['dooq4'] = dooq4
    dooq_5 = []
    dooq5 = 0.0
    bilal5 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem3, todatem3, ])
    for be in bilal5:
        if be.paymmethod=='Cash' and be.category1 == 'Insurance Expense-Professional Liability':
            dooq_5.append(be.totamt)
            dooq5+=float(be.totamt)
    context['dooq5'] = dooq5
    
    # Interest Expense
    doow_1=[]
    doow1 = 0.0
    bilal = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdate, todate, ])
    for b in bilal:
        if b.paymmethod=='Cash' and b.category1 == 'Interest Expense':
            doow_1.append(b.totamt)
            doow1+=float(b.totamt)
    context['doow1'] = doow1
    doow_2 = []
    doow2 = 0.0
    bilal2 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem, todatem, ])
    for bi in bilal2:
        if bi.paymmethod=='Cash' and bi.category1 == 'Interest Expense':
            doow_2.append(bi.totamt)
            doow2+=float(bi.totamt)
    context['doow2'] = doow2
    doow_3 = []
    doow3 = 0.0
    bilal3 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem1, todatem1, ])
    for be in bilal3:
        if be.paymmethod=='Cash' and be.category1 == 'Interest Expense':
            doow_3.append(be.totamt)
            doow3+=float(be.totamt)
    context['doow3'] = doow3
    doow_4 = []
    doow4 = 0.0
    bilal4 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem2, todatem2, ])
    for be in bilal4:
        if be.paymmethod=='Cash' and be.category1 == 'Interest Expense':
            doow_4.append(be.totamt)
            doow4+=float(be.totamt)
    context['doow4'] = doow4
    doow_5 = []
    doow5 = 0.0
    bilal5 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem3, todatem3, ])
    for be in bilal5:
        if be.paymmethod=='Cash' and be.category1 == 'Interest Expense':
            doow_5.append(be.totamt)
            doow5+=float(be.totamt)
    context['doow5'] = doow5
    
    # Meals and entertainment
    dooe_1=[]
    dooe1 = 0.0
    bilal = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdate, todate, ])
    for b in bilal:
        if b.paymmethod=='Cash' and b.category1 == 'Meals and entertainment':
            dooe_1.append(b.totamt)
            dooe1+=float(b.totamt)
    context['dooe1'] = dooe1
    dooe_2 = []
    dooe2 = 0.0
    bilal2 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem, todatem, ])
    for bi in bilal2:
        if bi.paymmethod=='Cash' and bi.category1 == 'Meals and entertainment':
            dooe_2.append(bi.totamt)
            dooe2+=float(bi.totamt)
    context['dooe2'] = dooe2
    dooe_3 = []
    dooe3 = 0.0
    bilal3 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem1, todatem1, ])
    for be in bilal3:
        if be.paymmethod=='Cash' and be.category1 == 'Meals and entertainment':
            dooe_3.append(be.totamt)
            dooe3+=float(be.totamt)
    context['dooe3'] = dooe3
    dooe_4 = []
    dooe4 = 0.0
    bilal4 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem2, todatem2, ])
    for be in bilal4:
        if be.paymmethod=='Cash' and be.category1 == 'Meals and entertainment':
            dooe_4.append(be.totamt)
            dooe4+=float(be.totamt)
    context['dooe4'] = dooe4
    dooe_5 = []
    dooe5 = 0.0
    bilal5 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem3, todatem3, ])
    for be in bilal5:
        if be.paymmethod=='Cash' and be.category1 == 'Meals and entertainment':
            dooe_5.append(be.totamt)
            dooe5+=float(be.totamt)
    context['dooe5'] = dooe5
    
    
    # Office Supplies
    door_1=[]
    door1 = 0.0
    bilal = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdate, todate, ])
    for b in bilal:
        if b.paymmethod=='Cash' and b.category1 == 'Office Supplies':
            door_1.append(b.totamt)
            door1+=float(b.totamt)
    context['door1'] = door1
    door_2 = []
    door2 = 0.0
    bilal2 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem, todatem, ])
    for bi in bilal2:
        if bi.paymmethod=='Cash' and bi.category1 == 'Office Supplies':
            door_2.append(bi.totamt)
            door2+=float(bi.totamt)
    context['door2'] = door2
    door_3 = []
    door3 = 0.0
    bilal3 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem1, todatem1, ])
    for be in bilal3:
        if be.paymmethod=='Cash' and be.category1 == 'Office Supplies':
            door_3.append(be.totamt)
            door3+=float(be.totamt)
    context['door3'] = door3
    door_4 = []
    door4 = 0.0
    bilal4 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem2, todatem2, ])
    for be in bilal4:
        if be.paymmethod=='Cash' and be.category1 == 'Office Supplies':
            door_4.append(be.totamt)
            door4+=float(be.totamt)
    context['door4'] = door4
    door_5 = []
    door5 = 0.0
    bilal5 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem3, todatem3, ])
    for be in bilal5:
        if be.paymmethod=='Cash' and be.category1 == 'Office Supplies':
            door_5.append(be.totamt)
            door5+=float(be.totamt)
    context['door5'] = door5
    
    
    # Postage and Delivery
    doot_1=[]
    doot1 = 0.0
    bilal = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdate, todate, ])
    for b in bilal:
        if b.paymmethod=='Cash' and b.category1 == 'Postage and Delivery':
            doot_1.append(b.totamt)
            doot1+=float(b.totamt)
    context['doot1'] = doot1
    doot_2 = []
    doot2 = 0.0
    bilal2 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem, todatem, ])
    for bi in bilal2:
        if bi.paymmethod=='Cash' and bi.category1 == 'Postage and Delivery':
            doot_2.append(bi.totamt)
            doot2+=float(bi.totamt)
    context['doot2'] = doot2
    doot_3 = []
    doot3 = 0.0
    bilal3 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem1, todatem1, ])
    for be in bilal3:
        if be.paymmethod=='Cash' and be.category1 == 'Postage and Delivery':
            doot_3.append(be.totamt)
            doot3+=float(be.totamt)
    context['doot3'] = doot3
    doot_4 = []
    doot4 = 0.0
    bilal4 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem2, todatem2, ])
    for be in bilal4:
        if be.paymmethod=='Cash' and be.category1 == 'Postage and Delivery':
            doot_4.append(be.totamt)
            doot4+=float(be.totamt)
    context['doot4'] = doot4
    doot_5 = []
    doot5 = 0.0
    bilal5 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem3, todatem3, ])
    for be in bilal5:
        if be.paymmethod=='Cash' and be.category1 == 'Postage and Delivery':
            doot_5.append(be.totamt)
            doot5+=float(be.totamt)
    context['doot5'] = doot5
    
    
    # Printing and Reproduction
    dooy_1=[]
    dooy1 = 0.0
    bilal = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdate, todate, ])
    for b in bilal:
        if b.paymmethod=='Cash' and b.category1 == 'Printing and Reproduction':
            dooy_1.append(b.totamt)
            dooy1+=float(b.totamt)
    context['dooy1'] = dooy1
    dooy_2 = []
    dooy2 = 0.0
    bilal2 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem, todatem, ])
    for bi in bilal2:
        if bi.paymmethod=='Cash' and bi.category1 == 'Printing and Reproduction':
            dooy_2.append(bi.totamt)
            dooy2+=float(bi.totamt)
    context['dooy2'] = dooy2
    dooy_3 = []
    dooy3 = 0.0
    bilal3 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem1, todatem1, ])
    for be in bilal3:
        if be.paymmethod=='Cash' and be.category1 == 'Printing and Reproduction':
            dooy_3.append(be.totamt)
            dooy3+=float(be.totamt)
    context['dooy3'] = dooy3
    dooy_4 = []
    dooy4 = 0.0
    bilal4 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem2, todatem2, ])
    for be in bilal4:
        if be.paymmethod=='Cash' and be.category1 == 'Printing and Reproduction':
            dooy_4.append(be.totamt)
            dooy4+=float(be.totamt)
    context['dooy4'] = dooy4
    dooy_5 = []
    dooy5 = 0.0
    bilal5 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem3, todatem3, ])
    for be in bilal5:
        if be.paymmethod=='Cash' and be.category1 == 'Printing and Reproduction':
            dooy_5.append(be.totamt)
            dooy5+=float(be.totamt)
    context['dooy5'] = dooy5
    
    
    # Professional Fees
    doou_1=[]
    doou1 = 0.0
    bilal = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdate, todate, ])
    for b in bilal:
        if b.paymmethod=='Cash' and b.category1 == 'Professional Fees':
            doou_1.append(b.totamt)
            doou1+=float(b.totamt)
    context['doou1'] = doou1
    doou_2 = []
    doou2 = 0.0
    bilal2 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem, todatem, ])
    for bi in bilal2:
        if bi.paymmethod=='Cash' and bi.category1 == 'Professional Fees':
            doou_2.append(bi.totamt)
            doou2+=float(bi.totamt)
    context['doou2'] = doou2
    doou_3 = []
    doou3 = 0.0
    bilal3 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem1, todatem1, ])
    for be in bilal3:
        if be.paymmethod=='Cash' and be.category1 == 'Professional Fees':
            doou_3.append(be.totamt)
            doou3+=float(be.totamt)
    context['doou3'] = doou3
    doou_4 = []
    doou4 = 0.0
    bilal4 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem2, todatem2, ])
    for be in bilal4:
        if be.paymmethod=='Cash' and be.category1 == 'Professional Fees':
            doou_4.append(be.totamt)
            doou4+=float(be.totamt)
    context['doou4'] = doou4
    doou_5 = []
    doou5 = 0.0
    bilal5 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem3, todatem3, ])
    for be in bilal5:
        if be.paymmethod=='Cash' and be.category1 == 'Professional Fees':
            doou_5.append(be.totamt)
            doou5+=float(be.totamt)
    context['doou5'] = doou5
    
    
    # Purchases
    dooi_1=[]
    dooi1 = 0.0
    bilal = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdate, todate, ])
    for b in bilal:
        if b.paymmethod=='Cash' and b.category1 == 'Purchases':
            dooi_1.append(b.totamt)
            dooi1+=float(b.totamt)
    context['dooi1'] = dooi1
    dooi_2 = []
    dooi2 = 0.0
    bilal2 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem, todatem, ])
    for bi in bilal2:
        if bi.paymmethod=='Cash' and bi.category1 == 'Purchases':
            dooi_2.append(bi.totamt)
            dooi2+=float(bi.totamt)
    context['dooi2'] = dooi2
    dooi_3 = []
    dooi3 = 0.0
    bilal3 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem1, todatem1, ])
    for be in bilal3:
        if be.paymmethod=='Cash' and be.category1 == 'Purchases':
            dooi_3.append(be.totamt)
            dooi3+=float(be.totamt)
    context['dooi3'] = dooi3
    dooi_4 = []
    dooi4 = 0.0
    bilal4 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem2, todatem2, ])
    for be in bilal4:
        if be.paymmethod=='Cash' and be.category1 == 'Purchases':
            dooi_4.append(be.totamt)
            dooi4+=float(be.totamt)
    context['dooi4'] = dooi4
    dooi_5 = []
    dooi5 = 0.0
    bilal5 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem3, todatem3, ])
    for be in bilal5:
        if be.paymmethod=='Cash' and be.category1 == 'Purchases':
            dooi_5.append(be.totamt)
            dooi5+=float(be.totamt)
    context['dooi5'] = dooi5
    
    # Rent Expense
    dooo_1=[]
    dooo1 = 0.0
    bilal = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdate, todate, ])
    for b in bilal:
        if b.paymmethod=='Cash' and b.category1 == 'Rent Expense':
            dooo_1.append(b.totamt)
            dooo1+=float(b.totamt)
    context['dooo1'] = dooo1
    dooo_2 = []
    dooo2 = 0.0
    bilal2 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem, todatem, ])
    for bi in bilal2:
        if bi.paymmethod=='Cash' and bi.category1 == 'Rent Expense':
            dooo_2.append(bi.totamt)
            dooo2+=float(bi.totamt)
    context['dooo2'] = dooo2
    dooo_3 = []
    dooo3 = 0.0
    bilal3 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem1, todatem1, ])
    for be in bilal3:
        if be.paymmethod=='Cash' and be.category1 == 'Rent Expense':
            dooo_3.append(be.totamt)
            dooo3+=float(be.totamt)
    context['dooo3'] = dooo3
    dooo_4 = []
    dooo4 = 0.0
    bilal4 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem2, todatem2, ])
    for be in bilal4:
        if be.paymmethod=='Cash' and be.category1 == 'Rent Expense':
            dooo_4.append(be.totamt)
            dooo4+=float(be.totamt)
    context['dooo4'] = dooo4
    dooo_5 = []
    dooo5 = 0.0
    bilal5 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem3, todatem3, ])
    for be in bilal5:
        if be.paymmethod=='Cash' and be.category1 == 'Rent Expense':
            dooo_5.append(be.totamt)
            dooo5+=float(be.totamt)
    context['dooo5'] = dooo5
    
    
    # Repair and maintenance
    doop_1=[]
    doop1 = 0.0
    bilal = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdate, todate, ])
    for b in bilal:
        if b.paymmethod=='Cash' and b.category1 == 'Repair and maintenance':
            doop_1.append(b.totamt)
            doop1+=float(b.totamt)
    context['doop1'] = doop1
    doop_2 = []
    doop2 = 0.0
    bilal2 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem, todatem, ])
    for bi in bilal2:
        if bi.paymmethod=='Cash' and bi.category1 == 'Repair and maintenance':
            doop_2.append(bi.totamt)
            doop2+=float(bi.totamt)
    context['doop2'] = doop2
    doop_3 = []
    doop3 = 0.0
    bilal3 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem1, todatem1, ])
    for be in bilal3:
        if be.paymmethod=='Cash' and be.category1 == 'Repair and maintenance':
            doop_3.append(be.totamt)
            doop3+=float(be.totamt)
    context['doop3'] = doop3
    doop_4 = []
    doop4 = 0.0
    bilal4 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem2, todatem2, ])
    for be in bilal4:
        if be.paymmethod=='Cash' and be.category1 == 'Repair and maintenance':
            doop_4.append(be.totamt)
            doop4+=float(be.totamt)
    context['doop4'] = doop4
    doop_5 = []
    doop5 = 0.0
    bilal5 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem3, todatem3, ])
    for be in bilal5:
        if be.paymmethod=='Cash' and be.category1 == 'Repair and maintenance':
            doop_5.append(be.totamt)
            doop5+=float(be.totamt)
    context['doop5'] = doop5
    
    
    # Small Tools and Equipment
    dooa_1=[]
    dooa1 = 0.0
    bilal = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdate, todate, ])
    for b in bilal:
        if b.paymmethod=='Cash' and b.category1 == 'Small Tools and Equipment':
            dooa_1.append(b.totamt)
            dooa1+=float(b.totamt)
    context['dooa1'] = dooa1
    dooa_2 = []
    dooa2 = 0.0
    bilal2 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem, todatem, ])
    for bi in bilal2:
        if bi.paymmethod=='Cash' and bi.category1 == 'Small Tools and Equipment':
            dooa_2.append(bi.totamt)
            dooa2+=float(bi.totamt)
    context['dooa2'] = dooa2
    dooa_3 = []
    dooa3 = 0.0
    bilal3 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem1, todatem1, ])
    for be in bilal3:
        if be.paymmethod=='Cash' and be.category1 == 'Small Tools and Equipment':
            dooa_3.append(be.totamt)
            dooa3+=float(be.totamt)
    context['dooa3'] = dooa3
    dooa_4 = []
    dooa4 = 0.0
    bilal4 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem2, todatem2, ])
    for be in bilal4:
        if be.paymmethod=='Cash' and be.category1 == 'Small Tools and Equipment':
            dooa_4.append(be.totamt)
            dooa4+=float(be.totamt)
    context['dooa4'] = dooa4
    dooa_5 = []
    dooa5 = 0.0
    bilal5 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem3, todatem3, ])
    for be in bilal5:
        if be.paymmethod=='Cash' and be.category1 == 'Small Tools and Equipment':
            dooa_5.append(be.totamt)
            dooa5+=float(be.totamt)
    context['dooa5'] = dooa5
    
    # Swachh Bharat Cess Expense
    doos_1=[]
    doos1 = 0.0
    bilal = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdate, todate, ])
    for b in bilal:
        if b.paymmethod=='Cash' and b.category1 == 'Swachh Bharat Cess Expense':
            doos_1.append(b.totamt)
            doos1+=float(b.totamt)
    context['doos1'] = doos1
    doos_2 = []
    doos2 = 0.0
    bilal2 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem, todatem, ])
    for bi in bilal2:
        if bi.paymmethod=='Cash' and bi.category1 == 'Swachh Bharat Cess Expense':
            doos_2.append(bi.totamt)
            doos2+=float(bi.totamt)
    context['doos2'] = doos2
    doos_3 = []
    doos3 = 0.0
    bilal3 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem1, todatem1, ])
    for be in bilal3:
        if be.paymmethod=='Cash' and be.category1 == 'Swachh Bharat Cess Expense':
            doos_3.append(be.totamt)
            doos3+=float(be.totamt)
    context['doos3'] = doos3
    doos_4 = []
    doos4 = 0.0
    bilal4 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem2, todatem2, ])
    for be in bilal4:
        if be.paymmethod=='Cash' and be.category1 == 'Swachh Bharat Cess Expense':
            doos_4.append(be.totamt)
            doos4+=float(be.totamt)
    context['doos4'] = doos4
    doos_5 = []
    doos5 = 0.0
    bilal5 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem3, todatem3, ])
    for be in bilal5:
        if be.paymmethod=='Cash' and be.category1 == 'Swachh Bharat Cess Expense':
            doos_5.append(be.totamt)
            doos5+=float(be.totamt)
    context['doos5'] = doos5
    
    
    # Taxes - Property
    dood_1=[]
    dood1 = 0.0
    bilal = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdate, todate, ])
    for b in bilal:
        if b.paymmethod=='Cash' and b.category1 == 'Taxes - Property':
            dood_1.append(b.totamt)
            dood1+=float(b.totamt)
    context['dood1'] = dood1
    dood_2 = []
    dood2 = 0.0
    bilal2 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem, todatem, ])
    for bi in bilal2:
        if bi.paymmethod=='Cash' and bi.category1 == 'Taxes - Property':
            dood_2.append(bi.totamt)
            dood2+=float(bi.totamt)
    context['dood2'] = dood2
    dood_3 = []
    dood3 = 0.0
    bilal3 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem1, todatem1, ])
    for be in bilal3:
        if be.paymmethod=='Cash' and be.category1 == 'Taxes - Property':
            dood_3.append(be.totamt)
            dood3+=float(be.totamt)
    context['dood3'] = dood3
    dood_4 = []
    dood4 = 0.0
    bilal4 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem2, todatem2, ])
    for be in bilal4:
        if be.paymmethod=='Cash' and be.category1 == 'Taxes - Property':
            dood_4.append(be.totamt)
            dood4+=float(be.totamt)
    context['dood4'] = dood4
    dood_5 = []
    dood5 = 0.0
    bilal5 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem3, todatem3, ])
    for be in bilal5:
        if be.paymmethod=='Cash' and be.category1 == 'Taxes - Property':
            dood_5.append(be.totamt)
            dood5+=float(be.totamt)
    context['dood5'] = dood5
    
    
    # Telephone Expense
    doof_1=[]
    doof1 = 0.0
    bilal = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdate, todate, ])
    for b in bilal:
        if b.paymmethod=='Cash' and b.category1 == 'Telephone Expense':
            doof_1.append(b.totamt)
            doof1+=float(b.totamt)
    context['doof1'] = doof1
    doof_2 = []
    doof2 = 0.0
    bilal2 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem, todatem, ])
    for bi in bilal2:
        if bi.paymmethod=='Cash' and bi.category1 == 'Telephone Expense':
            doof_2.append(bi.totamt)
            doof2+=float(bi.totamt)
    context['doof2'] = doof2
    doof_3 = []
    doof3 = 0.0
    bilal3 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem1, todatem1, ])
    for be in bilal3:
        if be.paymmethod=='Cash' and be.category1 == 'Telephone Expense':
            doof_3.append(be.totamt)
            doof3+=float(be.totamt)
    context['doof3'] = doof3
    doof_4 = []
    doof4 = 0.0
    bilal4 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem2, todatem2, ])
    for be in bilal4:
        if be.paymmethod=='Cash' and be.category1 == 'Telephone Expense':
            doof_4.append(be.totamt)
            doof4+=float(be.totamt)
    context['doof4'] = doof4
    doof_5 = []
    doof5 = 0.0
    bilal5 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem3, todatem3, ])
    for be in bilal5:
        if be.paymmethod=='Cash' and be.category1 == 'Telephone Expense':
            doof_5.append(be.totamt)
            doof5+=float(be.totamt)
    context['doof5'] = doof5
    
    
    # Travel Expense
    doog_1=[]
    doog1 = 0.0
    bilal = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdate, todate, ])
    for b in bilal:
        if b.paymmethod=='Cash' and b.category1 == 'Travel Expense':
            doog_1.append(b.totamt)
            doog1+=float(b.totamt)
    context['doog1'] = doog1
    doog_2 = []
    doog2 = 0.0
    bilal2 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem, todatem, ])
    for bi in bilal2:
        if bi.paymmethod=='Cash' and bi.category1 == 'Travel Expense':
            doog_2.append(bi.totamt)
            doog2+=float(bi.totamt)
    context['doog2'] = doog2
    doog_3 = []
    doog3 = 0.0
    bilal3 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem1, todatem1, ])
    for be in bilal3:
        if be.paymmethod=='Cash' and be.category1 == 'Travel Expense':
            doog_3.append(be.totamt)
            doog3+=float(be.totamt)
    context['doog3'] = doog3
    doog_4 = []
    doog4 = 0.0
    bilal4 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem2, todatem2, ])
    for be in bilal4:
        if be.paymmethod=='Cash' and be.category1 == 'Travel Expense':
            doog_4.append(be.totamt)
            doog4+=float(be.totamt)
    context['doog4'] = doog4
    doog_5 = []
    doog5 = 0.0
    bilal5 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem3, todatem3, ])
    for be in bilal5:
        if be.paymmethod=='Cash' and be.category1 == 'Travel Expense':
            doog_5.append(be.totamt)
            doog5+=float(be.totamt)
    context['doog5'] = doog5
    
    
    # Uncategorised Expense
    dooh_1=[]
    dooh1 = 0.0
    bilal = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdate, todate, ])
    for b in bilal:
        if b.paymmethod=='Cash' and b.category1 == 'Uncategorised Expense':
            dooh_1.append(b.totamt)
            dooh1+=float(b.totamt)
    context['dooh1'] = dooh1
    dooh_2 = []
    dooh2 = 0.0
    bilal2 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem, todatem, ])
    for bi in bilal2:
        if bi.paymmethod=='Cash' and bi.category1 == 'Uncategorised Expense':
            dooh_2.append(bi.totamt)
            dooh2+=float(bi.totamt)
    context['dooh2'] = dooh2
    dooh_3 = []
    dooh3 = 0.0
    bilal3 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem1, todatem1, ])
    for be in bilal3:
        if be.paymmethod=='Cash' and be.category1 == 'Uncategorised Expense':
            dooh_3.append(be.totamt)
            dooh3+=float(be.totamt)
    context['dooh3'] = dooh3
    dooh_4 = []
    dooh4 = 0.0
    bilal4 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem2, todatem2, ])
    for be in bilal4:
        if be.paymmethod=='Cash' and be.category1 == 'Uncategorised Expense':
            dooh_4.append(be.totamt)
            dooh4+=float(be.totamt)
    context['dooh4'] = dooh4
    dooh_5 = []
    dooh5 = 0.0
    bilal5 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem3, todatem3, ])
    for be in bilal5:
        if be.paymmethod=='Cash' and be.category1 == 'Uncategorised Expense':
            dooh_5.append(be.totamt)
            dooh5+=float(be.totamt)
    context['dooh5'] = dooh5
    
    
    # Utilities
    dooj_1=[]
    dooj1 = 0.0
    bilal = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdate, todate, ])
    for b in bilal:
        if b.paymmethod=='Cash' and b.category1 == 'Utilities':
            dooj_1.append(b.totamt)
            dooj1+=float(b.totamt)
    context['dooj1'] = dooj1
    dooj_2 = []
    dooj2 = 0.0
    bilal2 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem, todatem, ])
    for bi in bilal2:
        if bi.paymmethod=='Cash' and bi.category1 == 'Utilities':
            dooj_2.append(bi.totamt)
            dooj2+=float(bi.totamt)
    context['dooj2'] = dooj2
    dooj_3 = []
    dooj3 = 0.0
    bilal3 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem1, todatem1, ])
    for be in bilal3:
        if be.paymmethod=='Cash' and be.category1 == 'Utilities':
            dooj_3.append(be.totamt)
            dooj3+=float(be.totamt)
    context['dooj3'] = dooj3
    dooj_4 = []
    dooj4 = 0.0
    bilal4 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem2, todatem2, ])
    for be in bilal4:
        if be.paymmethod=='Cash' and be.category1 == 'Utilities':
            dooj_4.append(be.totamt)
            dooj4+=float(be.totamt)
    context['dooj4'] = dooj4
    dooj_5 = []
    dooj5 = 0.0
    bilal5 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem3, todatem3, ])
    for be in bilal5:
        if be.paymmethod=='Cash' and be.category1 == 'Utilities':
            dooj_5.append(be.totamt)
            dooj5+=float(be.totamt)
    context['dooj5'] = dooj5
    
    
    # Cash and cash equivalents
    dook_1=[]
    dook1 = 0.0
    bilal = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdate, todate, ])
    for b in bilal:
        if b.paymmethod=='Cash' and b.category1 == 'Cash and cash equivalents':
            dook_1.append(b.totamt)
            dook1+=float(b.totamt)
    context['dook1'] = dook1
    dook_2 = []
    dook2 = 0.0
    bilal2 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem, todatem, ])
    for bi in bilal2:
        if bi.paymmethod=='Cash' and bi.category1 == 'Cash and cash equivalents':
            dook_2.append(bi.totamt)
            dook2+=float(bi.totamt)
    context['dook2'] = dook2
    dook_3 = []
    dook3 = 0.0
    bilal3 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem1, todatem1, ])
    for be in bilal3:
        if be.paymmethod=='Cash' and be.category1 == 'Cash and cash equivalents':
            dook_3.append(be.totamt)
            dook3+=float(be.totamt)
    context['dook3'] = dook3
    dook_4 = []
    dook4 = 0.0
    bilal4 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem2, todatem2, ])
    for be in bilal4:
        if be.paymmethod=='Cash' and be.category1 == 'Cash and cash equivalents':
            dook_4.append(be.totamt)
            dook4+=float(be.totamt)
    context['dook4'] = dook4
    dook_5 = []
    dook5 = 0.0
    bilal5 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem3, todatem3, ])
    for be in bilal5:
        if be.paymmethod=='Cash' and be.category1 == 'Cash and cash equivalents':
            dook_5.append(be.totamt)
            dook5+=float(be.totamt)
    context['dook5'] = dook5
    
    
    # Accounts Receivable (Debtors)
    dool_1=[]
    dool1 = 0.0
    bilal = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdate, todate, ])
    for b in bilal:
        if b.paymmethod=='Cash' and b.category1 == 'Accounts Receivable (Debtors)':
            dool_1.append(b.totamt)
            dool1+=float(b.totamt)
    context['dool1'] = dool1
    dool_2 = []
    dool2 = 0.0
    bilal2 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem, todatem, ])
    for bi in bilal2:
        if bi.paymmethod=='Cash' and bi.category1 == 'Accounts Receivable (Debtors)':
            dool_2.append(bi.totamt)
            dool2+=float(bi.totamt)
    context['dool2'] = dool2
    dool_3 = []
    dool3 = 0.0
    bilal3 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem1, todatem1, ])
    for be in bilal3:
        if be.paymmethod=='Cash' and be.category1 == 'Accounts Receivable (Debtors)':
            dool_3.append(be.totamt)
            dool3+=float(be.totamt)
    context['dool3'] = dool3
    dool_4 = []
    dool4 = 0.0
    bilal4 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem2, todatem2, ])
    for be in bilal4:
        if be.paymmethod=='Cash' and be.category1 == 'Accounts Receivable (Debtors)':
            dool_4.append(be.totamt)
            dool4+=float(be.totamt)
    context['dool4'] = dool4
    dool_5 = []
    dool5 = 0.0
    bilal5 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem3, todatem3, ])
    for be in bilal5:
        if be.paymmethod=='Cash' and be.category1 == 'Accounts Receivable (Debtors)':
            dool_5.append(be.totamt)
            dool5+=float(be.totamt)
    context['dool5'] = dool5
    
    
    # Deferred CGST
    dooz_1=[]
    dooz1 = 0.0
    bilal = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdate, todate, ])
    for b in bilal:
        if b.paymmethod=='Cash' and b.category1 == 'Deferred CGST':
            dooz_1.append(b.totamt)
            dooz1+=float(b.totamt)
    context['dooz1'] = dooz1
    dooz_2 = []
    dooz2 = 0.0
    bilal2 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem, todatem, ])
    for bi in bilal2:
        if bi.paymmethod=='Cash' and bi.category1 == 'Deferred CGST':
            dooz_2.append(bi.totamt)
            dooz2+=float(bi.totamt)
    context['dooz2'] = dooz2
    dooz_3 = []
    dooz3 = 0.0
    bilal3 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem1, todatem1, ])
    for be in bilal3:
        if be.paymmethod=='Cash' and be.category1 == 'Deferred CGST':
            dooz_3.append(be.totamt)
            dooz3+=float(be.totamt)
    context['dooz3'] = dooz3
    dooz_4 = []
    dooz4 = 0.0
    bilal4 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem2, todatem2, ])
    for be in bilal4:
        if be.paymmethod=='Cash' and be.category1 == 'Deferred CGST':
            dooz_4.append(be.totamt)
            dooz4+=float(be.totamt)
    context['dooz4'] = dooz4
    dooz_5 = []
    dooz5 = 0.0
    bilal5 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem3, todatem3, ])
    for be in bilal5:
        if be.paymmethod=='Cash' and be.category1 == 'Deferred CGST':
            dooz_5.append(be.totamt)
            dooz5+=float(be.totamt)
    context['dooz5'] = dooz5
    
    
    # Deferred GST Input Credit
    doox_1=[]
    doox1 = 0.0
    bilal = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdate, todate, ])
    for b in bilal:
        if b.paymmethod=='Cash' and b.category1 == 'Deferred GST Input Credit':
            doox_1.append(b.totamt)
            doox1+=float(b.totamt)
    context['doox1'] = doox1
    doox_2 = []
    doox2 = 0.0
    bilal2 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem, todatem, ])
    for bi in bilal2:
        if bi.paymmethod=='Cash' and bi.category1 == 'Deferred GST Input Credit':
            doox_2.append(bi.totamt)
            doox2+=float(bi.totamt)
    context['doox2'] = doox2
    doox_3 = []
    doox3 = 0.0
    bilal3 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem1, todatem1, ])
    for be in bilal3:
        if be.paymmethod=='Cash' and be.category1 == 'Deferred GST Input Credit':
            doox_3.append(be.totamt)
            doox3+=float(be.totamt)
    context['doox3'] = doox3
    doox_4 = []
    doox4 = 0.0
    bilal4 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem2, todatem2, ])
    for be in bilal4:
        if be.paymmethod=='Cash' and be.category1 == 'Deferred GST Input Credit':
            doox_4.append(be.totamt)
            doox4+=float(be.totamt)
    context['doox4'] = doox4
    doox_5 = []
    doox5 = 0.0
    bilal5 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem3, todatem3, ])
    for be in bilal5:
        if be.paymmethod=='Cash' and be.category1 == 'Deferred GST Input Credit':
            doox_5.append(be.totamt)
            doox5+=float(be.totamt)
    context['doox5'] = doox5
    
    
    # Deferred IGST
    dooc_1=[]
    dooc1 = 0.0
    bilal = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdate, todate, ])
    for b in bilal:
        if b.paymmethod=='Cash' and b.category1 == 'Deferred IGST':
            dooc_1.append(b.totamt)
            dooc1+=float(b.totamt)
    context['dooc1'] = dooc1
    dooc_2 = []
    dooc2 = 0.0
    bilal2 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem, todatem, ])
    for bi in bilal2:
        if bi.paymmethod=='Cash' and bi.category1 == 'Deferred IGST':
            dooc_2.append(bi.totamt)
            dooc2+=float(bi.totamt)
    context['dooc2'] = dooc2
    dooc_3 = []
    dooc3 = 0.0
    bilal3 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem1, todatem1, ])
    for be in bilal3:
        if be.paymmethod=='Cash' and be.category1 == 'Deferred IGST':
            dooc_3.append(be.totamt)
            dooc3+=float(be.totamt)
    context['dooc3'] = dooc3
    dooc_4 = []
    dooc4 = 0.0
    bilal4 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem2, todatem2, ])
    for be in bilal4:
        if be.paymmethod=='Cash' and be.category1 == 'Deferred IGST':
            dooc_4.append(be.totamt)
            dooc4+=float(be.totamt)
    context['dooc4'] = dooc4
    dooc_5 = []
    dooc5 = 0.0
    bilal5 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem3, todatem3, ])
    for be in bilal5:
        if be.paymmethod=='Cash' and be.category1 == 'Deferred IGST':
            dooc_5.append(be.totamt)
            dooc5+=float(be.totamt)
    context['dooc5'] = dooc5
    
    # Deferred Krishi Kalyan Cess Input Credit
    doov_1=[]
    doov1 = 0.0
    bilal = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdate, todate, ])
    for b in bilal:
        if b.paymmethod=='Cash' and b.category1 == 'Deferred Krishi Kalyan Cess Input Credit':
            doov_1.append(b.totamt)
            doov1+=float(b.totamt)
    context['doov1'] = doov1
    doov_2 = []
    doov2 = 0.0
    bilal2 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem, todatem, ])
    for bi in bilal2:
        if bi.paymmethod=='Cash' and bi.category1 == 'Deferred Krishi Kalyan Cess Input Credit':
            doov_2.append(bi.totamt)
            doov2+=float(bi.totamt)
    context['doov2'] = doov2
    doov_3 = []
    doov3 = 0.0
    bilal3 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem1, todatem1, ])
    for be in bilal3:
        if be.paymmethod=='Cash' and be.category1 == 'Deferred Krishi Kalyan Cess Input Credit':
            doov_3.append(be.totamt)
            doov3+=float(be.totamt)
    context['doov3'] = doov3
    doov_4 = []
    doov4 = 0.0
    bilal4 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem2, todatem2, ])
    for be in bilal4:
        if be.paymmethod=='Cash' and be.category1 == 'Deferred Krishi Kalyan Cess Input Credit':
            doov_4.append(be.totamt)
            doov4+=float(be.totamt)
    context['doov4'] = doov4
    doov_5 = []
    doov5 = 0.0
    bilal5 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem3, todatem3, ])
    for be in bilal5:
        if be.paymmethod=='Cash' and be.category1 == 'Deferred Krishi Kalyan Cess Input Credit':
            doov_5.append(be.totamt)
            doov5+=float(be.totamt)
    context['doov5'] = doov5
    
    # Deferred Service Tax Input Credit
    doob_1=[]
    doob1 = 0.0
    bilal = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdate, todate, ])
    for b in bilal:
        if b.paymmethod=='Cash' and b.category1 == 'Deferred Service Tax Input Credit':
            doob_1.append(b.totamt)
            doob1+=float(b.totamt)
    context['doob1'] = doob1
    doob_2 = []
    doob2 = 0.0
    bilal2 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem, todatem, ])
    for bi in bilal2:
        if bi.paymmethod=='Cash' and bi.category1 == 'Deferred Service Tax Input Credit':
            doob_2.append(bi.totamt)
            doob2+=float(bi.totamt)
    context['doob2'] = doob2
    doob_3 = []
    doob3 = 0.0
    bilal3 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem1, todatem1, ])
    for be in bilal3:
        if be.paymmethod=='Cash' and be.category1 == 'Deferred Service Tax Input Credit':
            doob_3.append(be.totamt)
            doob3+=float(be.totamt)
    context['doob3'] = doob3
    doob_4 = []
    doob4 = 0.0
    bilal4 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem2, todatem2, ])
    for be in bilal4:
        if be.paymmethod=='Cash' and be.category1 == 'Deferred Service Tax Input Credit':
            doob_4.append(be.totamt)
            doob4+=float(be.totamt)
    context['doob4'] = doob4
    doob_5 = []
    doob5 = 0.0
    bilal5 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem3, todatem3, ])
    for be in bilal5:
        if be.paymmethod=='Cash' and be.category1 == 'Deferred Service Tax Input Credit':
            doob_5.append(be.totamt)
            doob5+=float(be.totamt)
    context['doob5'] = doob5
    
    
    # Deferred SGST
    doon_1=[]
    doon1 = 0.0
    bilal = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdate, todate, ])
    for b in bilal:
        if b.paymmethod=='Cash' and b.category1 == 'Deferred SGST':
            doon_1.append(b.totamt)
            doon1+=float(b.totamt)
    context['doon1'] = doon1
    doon_2 = []
    doon2 = 0.0
    bilal2 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem, todatem, ])
    for bi in bilal2:
        if bi.paymmethod=='Cash' and bi.category1 == 'Deferred SGST':
            doon_2.append(bi.totamt)
            doon2+=float(bi.totamt)
    context['doon2'] = doon2
    doon_3 = []
    doon3 = 0.0
    bilal3 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem1, todatem1, ])
    for be in bilal3:
        if be.paymmethod=='Cash' and be.category1 == 'Deferred SGST':
            doon_3.append(be.totamt)
            doon3+=float(be.totamt)
    context['doon3'] = doon3
    doon_4 = []
    doon4 = 0.0
    bilal4 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem2, todatem2, ])
    for be in bilal4:
        if be.paymmethod=='Cash' and be.category1 == 'Deferred SGST':
            doon_4.append(be.totamt)
            doon4+=float(be.totamt)
    context['doon4'] = doon4
    doon_5 = []
    doon5 = 0.0
    bilal5 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem3, todatem3, ])
    for be in bilal5:
        if be.paymmethod=='Cash' and be.category1 == 'Deferred SGST':
            doon_5.append(be.totamt)
            doon5+=float(be.totamt)
    context['doon5'] = doon5
    
    # Deferred VAT Input Credit
    doom_1=[]
    doom1 = 0.0
    bilal = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdate, todate, ])
    for b in bilal:
        if b.paymmethod=='Cash' and b.category1 == 'Deferred VAT Input Credit':
            doom_1.append(b.totamt)
            doom1+=float(b.totamt)
    context['doom1'] = doom1
    doom_2 = []
    doom2 = 0.0
    bilal2 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem, todatem, ])
    for bi in bilal2:
        if bi.paymmethod=='Cash' and bi.category1 == 'Deferred VAT Input Credit':
            doom_2.append(bi.totamt)
            doom2+=float(bi.totamt)
    context['doom2'] = doom2
    doom_3 = []
    doom3 = 0.0
    bilal3 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem1, todatem1, ])
    for be in bilal3:
        if be.paymmethod=='Cash' and be.category1 == 'Deferred VAT Input Credit':
            doom_3.append(be.totamt)
            doom3+=float(be.totamt)
    context['doom3'] = doom3
    doom_4 = []
    doom4 = 0.0
    bilal4 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem2, todatem2, ])
    for be in bilal4:
        if be.paymmethod=='Cash' and be.category1 == 'Deferred VAT Input Credit':
            doom_4.append(be.totamt)
            doom4+=float(be.totamt)
    context['doom4'] = doom4
    doom_5 = []
    doom5 = 0.0
    bilal5 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem3, todatem3, ])
    for be in bilal5:
        if be.paymmethod=='Cash' and be.category1 == 'Deferred VAT Input Credit':
            doom_5.append(be.totamt)
            doom5+=float(be.totamt)
    context['doom5'] = doom5
    
    # GST Refund
    qwe_1=[]
    qwe1 = 0.0
    bilal = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdate, todate, ])
    for b in bilal:
        if b.paymmethod=='Cash' and b.category1 == 'GST Refund':
            qwe_1.append(b.totamt)
            qwe1+=float(b.totamt)
    context['qwe1'] = qwe1
    qwe_2 = []
    qwe2 = 0.0
    bilal2 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem, todatem, ])
    for bi in bilal2:
        if bi.paymmethod=='Cash' and bi.category1 == 'GST Refund':
            qwe_2.append(bi.totamt)
            qwe2+=float(bi.totamt)
    context['qwe2'] = qwe2
    qwe_3 = []
    qwe3 = 0.0
    bilal3 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem1, todatem1, ])
    for be in bilal3:
        if be.paymmethod=='Cash' and be.category1 == 'GST Refund':
            qwe_3.append(be.totamt)
            qwe3+=float(be.totamt)
    context['qwe3'] = qwe3
    qwe_4 = []
    qwe4 = 0.0
    bilal4 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem2, todatem2, ])
    for be in bilal4:
        if be.paymmethod=='Cash' and be.category1 == 'GST Refund':
            qwe_4.append(be.totamt)
            qwe4+=float(be.totamt)
    context['qwe4'] = qwe4
    qwe_5 = []
    qwe5 = 0.0
    bilal5 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem3, todatem3, ])
    for be in bilal5:
        if be.paymmethod=='Cash' and be.category1 == 'GST Refund':
            qwe_5.append(be.totamt)
            qwe5+=float(be.totamt)
    context['qwe5'] = qwe5
    
    # Inventory Asset
    qwer_1=[]
    qwer1 = 0.0
    bilal = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdate, todate, ])
    for b in bilal:
        if b.paymmethod=='Cash' and b.category1 == 'Inventory Asset':
            qwer_1.append(b.totamt)
            qwer1+=float(b.totamt)
    context['qwer1'] = qwer1
    qwer_2 = []
    qwer2 = 0.0
    bilal2 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem, todatem, ])
    for bi in bilal2:
        if bi.paymmethod=='Cash' and bi.category1 == 'Inventory Asset':
            qwer_2.append(bi.totamt)
            qwer2+=float(bi.totamt)
    context['qwer2'] = qwer2
    qwer_3 = []
    qwer3 = 0.0
    bilal3 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem1, todatem1, ])
    for be in bilal3:
        if be.paymmethod=='Cash' and be.category1 == 'Inventory Asset':
            qwer_3.append(be.totamt)
            qwer3+=float(be.totamt)
    context['qwer3'] = qwer3
    qwer_4 = []
    qwer4 = 0.0
    bilal4 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem2, todatem2, ])
    for be in bilal4:
        if be.paymmethod=='Cash' and be.category1 == 'Inventory Asset':
            qwer_4.append(be.totamt)
            qwer4+=float(be.totamt)
    context['qwer4'] = qwer4
    qwer_5 = []
    qwer5 = 0.0
    bilal5 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem3, todatem3, ])
    for be in bilal5:
        if be.paymmethod=='Cash' and be.category1 == 'Inventory Asset':
            qwer_5.append(be.totamt)
            qwer5+=float(be.totamt)
    context['qwer5'] = qwer5
    
    # Krishi Kalyan Cess Refund
    qwert_1=[]
    qwert1 = 0.0
    bilal = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdate, todate, ])
    for b in bilal:
        if b.paymmethod=='Cash' and b.category1 == 'Krishi Kalyan Cess Refund':
            qwert_1.append(b.totamt)
            qwert1+=float(b.totamt)
    context['qwert1'] = qwert1
    qwert_2 = []
    qwert2 = 0.0
    bilal2 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem, todatem, ])
    for bi in bilal2:
        if bi.paymmethod=='Cash' and bi.category1 == 'Krishi Kalyan Cess Refund':
            qwert_2.append(bi.totamt)
            qwert2+=float(bi.totamt)
    context['qwert2'] = qwert2
    qwert_3 = []
    qwert3 = 0.0
    bilal3 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem1, todatem1, ])
    for be in bilal3:
        if be.paymmethod=='Cash' and be.category1 == 'Krishi Kalyan Cess Refund':
            qwert_3.append(be.totamt)
            qwert3+=float(be.totamt)
    context['qwert3'] = qwert3
    qwert_4 = []
    qwert4 = 0.0
    bilal4 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem2, todatem2, ])
    for be in bilal4:
        if be.paymmethod=='Cash' and be.category1 == 'Krishi Kalyan Cess Refund':
            qwert_4.append(be.totamt)
            qwert4+=float(be.totamt)
    context['qwert4'] = qwert4
    qwert_5 = []
    qwert5 = 0.0
    bilal5 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem3, todatem3, ])
    for be in bilal5:
        if be.paymmethod=='Cash' and be.category1 == 'Krishi Kalyan Cess Refund':
            qwert_5.append(be.totamt)
            qwert5+=float(be.totamt)
    context['qwert5'] = qwert5
    
    # Prepaid Insurance
    qwerty_1=[]
    qwerty1 = 0.0
    bilal = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdate, todate, ])
    for b in bilal:
        if b.paymmethod=='Cash' and b.category1 == 'Prepaid Insurance':
            qwerty_1.append(b.totamt)
            qwerty1+=float(b.totamt)
    context['qwerty1'] = qwerty1
    qwerty_2 = []
    qwerty2 = 0.0
    bilal2 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem, todatem, ])
    for bi in bilal2:
        if bi.paymmethod=='Cash' and bi.category1 == 'Prepaid Insurance':
            qwerty_2.append(bi.totamt)
            qwerty2+=float(bi.totamt)
    context['qwerty2'] = qwerty2
    qwerty_3 = []
    qwerty3 = 0.0
    bilal3 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem1, todatem1, ])
    for be in bilal3:
        if be.paymmethod=='Cash' and be.category1 == 'Prepaid Insurance':
            qwerty_3.append(be.totamt)
            qwerty3+=float(be.totamt)
    context['qwerty3'] = qwerty3
    qwerty_4 = []
    qwerty4 = 0.0
    bilal4 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem2, todatem2, ])
    for be in bilal4:
        if be.paymmethod=='Cash' and be.category1 == 'Prepaid Insurance':
            qwerty_4.append(be.totamt)
            qwerty4+=float(be.totamt)
    context['qwerty4'] = qwerty4
    qwerty_5 = []
    qwerty5 = 0.0
    bilal5 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem3, todatem3, ])
    for be in bilal5:
        if be.paymmethod=='Cash' and be.category1 == 'Prepaid Insurance':
            qwerty_5.append(be.totamt)
            qwerty5+=float(be.totamt)
    context['qwerty5'] = qwerty5
    
    # Service Tax Refund
    qwertt_1=[]
    qwertt1 = 0.0
    bilal = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdate, todate, ])
    for b in bilal:
        if b.paymmethod=='Cash' and b.category1 == 'Service Tax Refund':
            qwertt_1.append(b.totamt)
            qwertt1+=float(b.totamt)
    context['qwertt1'] = qwertt1
    qwertt_2 = []
    qwertt2 = 0.0
    bilal2 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem, todatem, ])
    for bi in bilal2:
        if bi.paymmethod=='Cash' and bi.category1 == 'Service Tax Refund':
            qwertt_2.append(bi.totamt)
            qwertt2+=float(bi.totamt)
    context['qwertt2'] = qwertt2
    qwertt_3 = []
    qwertt3 = 0.0
    bilal3 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem1, todatem1, ])
    for be in bilal3:
        if be.paymmethod=='Cash' and be.category1 == 'Service Tax Refund':
            qwertt_3.append(be.totamt)
            qwertt3+=float(be.totamt)
    context['qwertt3'] = qwertt3
    qwertt_4 = []
    qwertt4 = 0.0
    bilal4 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem2, todatem2, ])
    for be in bilal4:
        if be.paymmethod=='Cash' and be.category1 == 'Service Tax Refund':
            qwertt_4.append(be.totamt)
            qwertt4+=float(be.totamt)
    context['qwertt4'] = qwertt4
    qwertt_5 = []
    qwertt5 = 0.0
    bilal5 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem3, todatem3, ])
    for be in bilal5:
        if be.paymmethod=='Cash' and be.category1 == 'Service Tax Refund':
            qwertt_5.append(be.totamt)
            qwertt5+=float(be.totamt)
    context['qwertt5'] = qwertt5
    
    # TDS Receivable
    qwerr_1=[]
    qwerr1 = 0.0
    bilal = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdate, todate, ])
    for b in bilal:
        if b.paymmethod=='Cash' and b.category1 == 'TDS Receivable':
            qwerr_1.append(b.totamt)
            qwerr1+=float(b.totamt)
    context['qwerr1'] = qwerr1
    qwerr_2 = []
    qwerr2 = 0.0
    bilal2 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem, todatem, ])
    for bi in bilal2:
        if bi.paymmethod=='Cash' and bi.category1 == 'TDS Receivable':
            qwerr_2.append(bi.totamt)
            qwerr2+=float(bi.totamt)
    context['qwerr2'] = qwerr2
    qwerr_3 = []
    qwerr3 = 0.0
    bilal3 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem1, todatem1, ])
    for be in bilal3:
        if be.paymmethod=='Cash' and be.category1 == 'TDS Receivable':
            qwerr_3.append(be.totamt)
            qwerr3+=float(be.totamt)
    context['qwerr3'] = qwerr3
    qwerr_4 = []
    qwerr4 = 0.0
    bilal4 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem2, todatem2, ])
    for be in bilal4:
        if be.paymmethod=='Cash' and be.category1 == 'TDS Receivable':
            qwerr_4.append(be.totamt)
            qwerr4+=float(be.totamt)
    context['qwerr4'] = qwerr4
    qwerr_5 = []
    qwerr5 = 0.0
    bilal5 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem3, todatem3, ])
    for be in bilal5:
        if be.paymmethod=='Cash' and be.category1 == 'TDS Receivable':
            qwerr_5.append(be.totamt)
            qwerr5+=float(be.totamt)
    context['qwerr5'] = qwerr5
    
    # Uncategorised Asset
    qwera_1=[]
    qwera1 = 0.0
    bilal = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdate, todate, ])
    for b in bilal:
        if b.paymmethod=='Cash' and b.category1 == 'Uncategorised Asset':
            qwera_1.append(b.totamt)
            qwera1+=float(b.totamt)
    context['qwera1'] = qwera1
    qwera_2 = []
    qwera2 = 0.0
    bilal2 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem, todatem, ])
    for bi in bilal2:
        if bi.paymmethod=='Cash' and bi.category1 == 'Uncategorised Asset':
            qwera_2.append(bi.totamt)
            qwera2+=float(bi.totamt)
    context['qwera2'] = qwera2
    qwera_3 = []
    qwera3 = 0.0
    bilal3 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem1, todatem1, ])
    for be in bilal3:
        if be.paymmethod=='Cash' and be.category1 == 'Uncategorised Asset':
            qwera_3.append(be.totamt)
            qwera3+=float(be.totamt)
    context['qwera3'] = qwera3
    qwera_4 = []
    qwera4 = 0.0
    bilal4 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem2, todatem2, ])
    for be in bilal4:
        if be.paymmethod=='Cash' and be.category1 == 'Uncategorised Asset':
            qwera_4.append(be.totamt)
            qwera4+=float(be.totamt)
    context['qwera4'] = qwera4
    qwera_5 = []
    qwera5 = 0.0
    bilal5 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem3, todatem3, ])
    for be in bilal5:
        if be.paymmethod=='Cash' and be.category1 == 'Uncategorised Asset':
            qwera_5.append(be.totamt)
            qwera5+=float(be.totamt)
    context['qwera5'] = qwera5
    
    # Undeposited Funds
    qwers_1=[]
    qwers1 = 0.0
    bilal = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdate, todate, ])
    for b in bilal:
        if b.paymmethod=='Cash' and b.category1 == 'Undeposited Funds':
            qwers_1.append(b.totamt)
            qwers1+=float(b.totamt)
    context['qwers1'] = qwers1
    qwers_2 = []
    qwers2 = 0.0
    bilal2 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem, todatem, ])
    for bi in bilal2:
        if bi.paymmethod=='Cash' and bi.category1 == 'Undeposited Funds':
            qwers_2.append(bi.totamt)
            qwers2+=float(bi.totamt)
    context['qwers2'] = qwers2
    qwers_3 = []
    qwers3 = 0.0
    bilal3 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem1, todatem1, ])
    for be in bilal3:
        if be.paymmethod=='Cash' and be.category1 == 'Undeposited Funds':
            qwers_3.append(be.totamt)
            qwers3+=float(be.totamt)
    context['qwers3'] = qwers3
    qwers_4 = []
    qwers4 = 0.0
    bilal4 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem2, todatem2, ])
    for be in bilal4:
        if be.paymmethod=='Cash' and be.category1 == 'Undeposited Funds':
            qwers_4.append(be.totamt)
            qwers4+=float(be.totamt)
    context['qwers4'] = qwers4
    qwers_5 = []
    qwers5 = 0.0
    bilal5 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem3, todatem3, ])
    for be in bilal5:
        if be.paymmethod=='Cash' and be.category1 == 'Undeposited Funds':
            qwers_5.append(be.totamt)
            qwers5+=float(be.totamt)
    context['qwers5'] = qwers5
    
    # Accumulated Depreciation
    qwerd_1=[]
    qwerd1 = 0.0
    bilal = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdate, todate, ])
    for b in bilal:
        if b.paymmethod=='Cash' and b.category1 == 'Accumulated Depreciation':
            qwerd_1.append(b.totamt)
            qwerd1+=float(b.totamt)
    context['qwerd1'] = qwerd1
    qwerd_2 = []
    qwerd2 = 0.0
    bilal2 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem, todatem, ])
    for bi in bilal2:
        if bi.paymmethod=='Cash' and bi.category1 == 'Accumulated Depreciation':
            qwerd_2.append(bi.totamt)
            qwerd2+=float(bi.totamt)
    context['qwerd2'] = qwerd2
    qwerd_3 = []
    qwerd3 = 0.0
    bilal3 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem1, todatem1, ])
    for be in bilal3:
        if be.paymmethod=='Cash' and be.category1 == 'Accumulated Depreciation':
            qwerd_3.append(be.totamt)
            qwerd3+=float(be.totamt)
    context['qwerd3'] = qwerd3
    qwerd_4 = []
    qwerd4 = 0.0
    bilal4 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem2, todatem2, ])
    for be in bilal4:
        if be.paymmethod=='Cash' and be.category1 == 'Accumulated Depreciation':
            qwerd_4.append(be.totamt)
            qwerd4+=float(be.totamt)
    context['qwerd4'] = qwerd4
    qwerd_5 = []
    qwerd5 = 0.0
    bilal5 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem3, todatem3, ])
    for be in bilal5:
        if be.paymmethod=='Cash' and be.category1 == 'Accumulated Depreciation':
            qwerd_5.append(be.totamt)
            qwerd5+=float(be.totamt)
    context['qwerd5'] = qwerd5
    
    # Buildings and Improvements
    qwerf_1=[]
    qwerf1 = 0.0
    bilal = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdate, todate, ])
    for b in bilal:
        if b.paymmethod=='Cash' and b.category1 == 'Buildings and Improvements':
            qwerf_1.append(b.totamt)
            qwerf1+=float(b.totamt)
    context['qwerf1'] = qwerf1
    qwerf_2 = []
    qwerf2 = 0.0
    bilal2 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem, todatem, ])
    for bi in bilal2:
        if bi.paymmethod=='Cash' and bi.category1 == 'Buildings and Improvements':
            qwerf_2.append(bi.totamt)
            qwerf2+=float(bi.totamt)
    context['qwerf2'] = qwerf2
    qwerf_3 = []
    qwerf3 = 0.0
    bilal3 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem1, todatem1, ])
    for be in bilal3:
        if be.paymmethod=='Cash' and be.category1 == 'Buildings and Improvements':
            qwerf_3.append(be.totamt)
            qwerf3+=float(be.totamt)
    context['qwerf3'] = qwerf3
    qwerf_4 = []
    qwerf4 = 0.0
    bilal4 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem2, todatem2, ])
    for be in bilal4:
        if be.paymmethod=='Cash' and be.category1 == 'Buildings and Improvements':
            qwerf_4.append(be.totamt)
            qwerf4+=float(be.totamt)
    context['qwerf4'] = qwerf4
    qwerf_5 = []
    qwerf5 = 0.0
    bilal5 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem3, todatem3, ])
    for be in bilal5:
        if be.paymmethod=='Cash' and be.category1 == 'Buildings and Improvements':
            qwerf_5.append(be.totamt)
            qwerf5+=float(be.totamt)
    context['qwerf5'] = qwerf5
    
    # Furniture and Equipment
    qwerg_1=[]
    qwerg1 = 0.0
    bilal = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdate, todate, ])
    for b in bilal:
        if b.paymmethod=='Cash' and b.category1 == 'Furniture and Equipment':
            qwerg_1.append(b.totamt)
            qwerg1+=float(b.totamt)
    context['qwerg1'] = qwerg1
    qwerg_2 = []
    qwerg2 = 0.0
    bilal2 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem, todatem, ])
    for bi in bilal2:
        if bi.paymmethod=='Cash' and bi.category1 == 'Furniture and Equipment':
            qwerg_2.append(bi.totamt)
            qwerg2+=float(bi.totamt)
    context['qwerg2'] = qwerg2
    qwerg_3 = []
    qwerg3 = 0.0
    bilal3 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem1, todatem1, ])
    for be in bilal3:
        if be.paymmethod=='Cash' and be.category1 == 'Furniture and Equipment':
            qwerg_3.append(be.totamt)
            qwerg3+=float(be.totamt)
    context['qwerg3'] = qwerg3
    qwerg_4 = []
    qwerg4 = 0.0
    bilal4 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem2, todatem2, ])
    for be in bilal4:
        if be.paymmethod=='Cash' and be.category1 == 'Furniture and Equipment':
            qwerg_4.append(be.totamt)
            qwerg4+=float(be.totamt)
    context['qwerg4'] = qwerg4
    qwerg_5 = []
    qwerg5 = 0.0
    bilal5 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem3, todatem3, ])
    for be in bilal5:
        if be.paymmethod=='Cash' and be.category1 == 'Furniture and Equipment':
            qwerg_5.append(be.totamt)
            qwerg5+=float(be.totamt)
    context['qwerg5'] = qwerg5
    
    # Land
    qwerh_1=[]
    qwerh1 = 0.0
    bilal = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdate, todate, ])
    for b in bilal:
        if b.paymmethod=='Cash' and b.category1 == 'Land':
            qwerh_1.append(b.totamt)
            qwerh1+=float(b.totamt)
    context['qwerh1'] = qwerh1
    qwerh_2 = []
    qwerh2 = 0.0
    bilal2 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem, todatem, ])
    for bi in bilal2:
        if bi.paymmethod=='Cash' and bi.category1 == 'Land':
            qwerh_2.append(bi.totamt)
            qwerh2+=float(bi.totamt)
    context['qwerh2'] = qwerh2
    qwerh_3 = []
    qwerh3 = 0.0
    bilal3 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem1, todatem1, ])
    for be in bilal3:
        if be.paymmethod=='Cash' and be.category1 == 'Land':
            qwerh_3.append(be.totamt)
            qwerh3+=float(be.totamt)
    context['qwerh3'] = qwerh3
    qwerh_4 = []
    qwerh4 = 0.0
    bilal4 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem2, todatem2, ])
    for be in bilal4:
        if be.paymmethod=='Cash' and be.category1 == 'Land':
            qwerh_4.append(be.totamt)
            qwerh4+=float(be.totamt)
    context['qwerh4'] = qwerh4
    qwerh_5 = []
    qwerh5 = 0.0
    bilal5 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem3, todatem3, ])
    for be in bilal5:
        if be.paymmethod=='Cash' and be.category1 == 'Land':
            qwerh_5.append(be.totamt)
            qwerh5+=float(be.totamt)
    context['qwerh5'] = qwerh5
    
    # Leasehold Improvements
    qwerj_1=[]
    qwerj1 = 0.0
    bilal = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdate, todate, ])
    for b in bilal:
        if b.paymmethod=='Cash' and b.category1 == 'Leasehold Improvements':
            qwerj_1.append(b.totamt)
            qwerj1+=float(b.totamt)
    context['qwerj1'] = qwerj1
    qwerj_2 = []
    qwerj2 = 0.0
    bilal2 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem, todatem, ])
    for bi in bilal2:
        if bi.paymmethod=='Cash' and bi.category1 == 'Leasehold Improvements':
            qwerj_2.append(bi.totamt)
            qwerj2+=float(bi.totamt)
    context['qwerj2'] = qwerj2
    qwerj_3 = []
    qwerj3 = 0.0
    bilal3 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem1, todatem1, ])
    for be in bilal3:
        if be.paymmethod=='Cash' and be.category1 == 'Leasehold Improvements':
            qwerj_3.append(be.totamt)
            qwerj3+=float(be.totamt)
    context['qwerj3'] = qwerj3
    qwerj_4 = []
    qwerj4 = 0.0
    bilal4 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem2, todatem2, ])
    for be in bilal4:
        if be.paymmethod=='Cash' and be.category1 == 'Leasehold Improvements':
            qwerj_4.append(be.totamt)
            qwerj4+=float(be.totamt)
    context['qwerj4'] = qwerj4
    qwerj_5 = []
    qwerj5 = 0.0
    bilal5 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem3, todatem3, ])
    for be in bilal5:
        if be.paymmethod=='Cash' and be.category1 == 'Leasehold Improvements':
            qwerj_5.append(be.totamt)
            qwerj5+=float(be.totamt)
    context['qwerj5'] = qwerj5
    
    # Vehicles
    qwerk_1=[]
    qwerk1 = 0.0
    bilal = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdate, todate, ])
    for b in bilal:
        if b.paymmethod=='Cash' and b.category1 == 'Vehicles':
            qwerk_1.append(b.totamt)
            qwerk1+=float(b.totamt)
    context['qwerk1'] = qwerk1
    qwerk_2 = []
    qwerk2 = 0.0
    bilal2 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem, todatem, ])
    for bi in bilal2:
        if bi.paymmethod=='Cash' and bi.category1 == 'Vehicles':
            qwerk_2.append(bi.totamt)
            qwerk2+=float(bi.totamt)
    context['qwerk2'] = qwerk2
    qwerk_3 = []
    qwerk3 = 0.0
    bilal3 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem1, todatem1, ])
    for be in bilal3:
        if be.paymmethod=='Cash' and be.category1 == 'Vehicles':
            qwerk_3.append(be.totamt)
            qwerk3+=float(be.totamt)
    context['qwerk3'] = qwerk3
    qwerk_4 = []
    qwerk4 = 0.0
    bilal4 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem2, todatem2, ])
    for be in bilal4:
        if be.paymmethod=='Cash' and be.category1 == 'Vehicles':
            qwerk_4.append(be.totamt)
            qwerk4+=float(be.totamt)
    context['qwerk4'] = qwerk4
    qwerk_5 = []
    qwerk5 = 0.0
    bilal5 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem3, todatem3, ])
    for be in bilal5:
        if be.paymmethod=='Cash' and be.category1 == 'Vehicles':
            qwerk_5.append(be.totamt)
            qwerk5+=float(be.totamt)
    context['qwerk5'] = qwerk5
    
    # CGST Payable
    qwerl_1=[]
    qwerl1 = 0.0
    bilal = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdate, todate, ])
    for b in bilal:
        if b.paymmethod=='Cash' and b.category1 == 'CGST Payable':
            qwerl_1.append(b.totamt)
            qwerl1+=float(b.totamt)
    context['qwerl1'] = qwerl1
    qwerl_2 = []
    qwerl2 = 0.0
    bilal2 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem, todatem, ])
    for bi in bilal2:
        if bi.paymmethod=='Cash' and bi.category1 == 'CGST Payable':
            qwerl_2.append(bi.totamt)
            qwerl2+=float(bi.totamt)
    context['qwerl2'] = qwerl2
    qwerl_3 = []
    qwerl3 = 0.0
    bilal3 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem1, todatem1, ])
    for be in bilal3:
        if be.paymmethod=='Cash' and be.category1 == 'CGST Payable':
            qwerl_3.append(be.totamt)
            qwerl3+=float(be.totamt)
    context['qwerl3'] = qwerl3
    qwerl_4 = []
    qwerl4 = 0.0
    bilal4 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem2, todatem2, ])
    for be in bilal4:
        if be.paymmethod=='Cash' and be.category1 == 'CGST Payable':
            qwerl_4.append(be.totamt)
            qwerl4+=float(be.totamt)
    context['qwerl4'] = qwerl4
    qwerl_5 = []
    qwerl5 = 0.0
    bilal5 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem3, todatem3, ])
    for be in bilal5:
        if be.paymmethod=='Cash' and be.category1 == 'CGST Payable':
            qwerl_5.append(be.totamt)
            qwerl5+=float(be.totamt)
    context['qwerl5'] = qwerl5
    
    # CST Payable
    qwerz_1=[]
    qwerz1 = 0.0
    bilal = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdate, todate, ])
    for b in bilal:
        if b.paymmethod=='Cash' and b.category1 == 'CST Payable':
            qwerz_1.append(b.totamt)
            qwerz1+=float(b.totamt)
    context['qwerz1'] = qwerz1
    qwerz_2 = []
    qwerz2 = 0.0
    bilal2 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem, todatem, ])
    for bi in bilal2:
        if bi.paymmethod=='Cash' and bi.category1 == 'CST Payable':
            qwerz_2.append(bi.totamt)
            qwerz2+=float(bi.totamt)
    context['qwerz2'] = qwerz2
    qwerz_3 = []
    qwerz3 = 0.0
    bilal3 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem1, todatem1, ])
    for be in bilal3:
        if be.paymmethod=='Cash' and be.category1 == 'CST Payable':
            qwerz_3.append(be.totamt)
            qwerz3+=float(be.totamt)
    context['qwerz3'] = qwerz3
    qwerz_4 = []
    qwerz4 = 0.0
    bilal4 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem2, todatem2, ])
    for be in bilal4:
        if be.paymmethod=='Cash' and be.category1 == 'CST Payable':
            qwerz_4.append(be.totamt)
            qwerz4+=float(be.totamt)
    context['qwerz4'] = qwerz4
    qwerz_5 = []
    qwerz5 = 0.0
    bilal5 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem3, todatem3, ])
    for be in bilal5:
        if be.paymmethod=='Cash' and be.category1 == 'CST Payable':
            qwerz_5.append(be.totamt)
            qwerz5+=float(be.totamt)
    context['qwerz5'] = qwerz5
    
    # CST Suspense
    qwerx_1=[]
    qwerx1 = 0.0
    bilal = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdate, todate, ])
    for b in bilal:
        if b.paymmethod=='Cash' and b.category1 == 'CST Suspense':
            qwerx_1.append(b.totamt)
            qwerx1+=float(b.totamt)
    context['qwerx1'] = qwerx1
    qwerx_2 = []
    qwerx2 = 0.0
    bilal2 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem, todatem, ])
    for bi in bilal2:
        if bi.paymmethod=='Cash' and bi.category1 == 'CST Suspense':
            qwerx_2.append(bi.totamt)
            qwerx2+=float(bi.totamt)
    context['qwerx2'] = qwerx2
    qwerx_3 = []
    qwerx3 = 0.0
    bilal3 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem1, todatem1, ])
    for be in bilal3:
        if be.paymmethod=='Cash' and be.category1 == 'CST Suspense':
            qwerx_3.append(be.totamt)
            qwerx3+=float(be.totamt)
    context['qwerx3'] = qwerx3
    qwerx_4 = []
    qwerx4 = 0.0
    bilal4 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem2, todatem2, ])
    for be in bilal4:
        if be.paymmethod=='Cash' and be.category1 == 'CST Suspense':
            qwerx_4.append(be.totamt)
            qwerx4+=float(be.totamt)
    context['qwerx4'] = qwerx4
    qwerx_5 = []
    qwerx5 = 0.0
    bilal5 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem3, todatem3, ])
    for be in bilal5:
        if be.paymmethod=='Cash' and be.category1 == 'CST Suspense':
            qwerx_5.append(be.totamt)
            qwerx5+=float(be.totamt)
    context['qwerx5'] = qwerx5
    
    # GST Payable
    qwerc_1=[]
    qwerc1 = 0.0
    bilal = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdate, todate, ])
    for b in bilal:
        if b.paymmethod=='Cash' and b.category1 == 'GST Payable':
            qwerc_1.append(b.totamt)
            qwerc1+=float(b.totamt)
    context['qwerc1'] = qwerc1
    qwerc_2 = []
    qwerc2 = 0.0
    bilal2 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem, todatem, ])
    for bi in bilal2:
        if bi.paymmethod=='Cash' and bi.category1 == 'GST Payable':
            qwerc_2.append(bi.totamt)
            qwerc2+=float(bi.totamt)
    context['qwerc2'] = qwerc2
    qwerc_3 = []
    qwerc3 = 0.0
    bilal3 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem1, todatem1, ])
    for be in bilal3:
        if be.paymmethod=='Cash' and be.category1 == 'GST Payable':
            qwerc_3.append(be.totamt)
            qwerc3+=float(be.totamt)
    context['qwerc3'] = qwerc3
    qwerc_4 = []
    qwerc4 = 0.0
    bilal4 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem2, todatem2, ])
    for be in bilal4:
        if be.paymmethod=='Cash' and be.category1 == 'GST Payable':
            qwerc_4.append(be.totamt)
            qwerc4+=float(be.totamt)
    context['qwerc4'] = qwerc4
    qwerc_5 = []
    qwerc5 = 0.0
    bilal5 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem3, todatem3, ])
    for be in bilal5:
        if be.paymmethod=='Cash' and be.category1 == 'GST Payable':
            qwerc_5.append(be.totamt)
            qwerc5+=float(be.totamt)
    context['qwerc5'] = qwerc5
    
    # GST Suspense
    qwerv_1=[]
    qwerv1 = 0.0
    bilal = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdate, todate, ])
    for b in bilal:
        if b.paymmethod=='Cash' and b.category1 == 'GST Suspense':
            qwerv_1.append(b.totamt)
            qwerv1+=float(b.totamt)
    context['qwerv1'] = qwerv1
    qwerv_2 = []
    qwerv2 = 0.0
    bilal2 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem, todatem, ])
    for bi in bilal2:
        if bi.paymmethod=='Cash' and bi.category1 == 'GST Suspense':
            qwerv_2.append(bi.totamt)
            qwerv2+=float(bi.totamt)
    context['qwerv2'] = qwerv2
    qwerv_3 = []
    qwerv3 = 0.0
    bilal3 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem1, todatem1, ])
    for be in bilal3:
        if be.paymmethod=='Cash' and be.category1 == 'GST Suspense':
            qwerv_3.append(be.totamt)
            qwerv3+=float(be.totamt)
    context['qwerv3'] = qwerv3
    qwerv_4 = []
    qwerv4 = 0.0
    bilal4 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem2, todatem2, ])
    for be in bilal4:
        if be.paymmethod=='Cash' and be.category1 == 'GST Suspense':
            qwerv_4.append(be.totamt)
            qwerv4+=float(be.totamt)
    context['qwerv4'] = qwerv4
    qwerv_5 = []
    qwerv5 = 0.0
    bilal5 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem3, todatem3, ])
    for be in bilal5:
        if be.paymmethod=='Cash' and be.category1 == 'GST Suspense':
            qwerv_5.append(be.totamt)
            qwerv5+=float(be.totamt)
    context['qwerv5'] = qwerv5
    
    # IGST Payable
    qwerb_1=[]
    qwerb1 = 0.0
    bilal = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdate, todate, ])
    for b in bilal:
        if b.paymmethod=='Cash' and b.category1 == 'IGST Payable':
            qwerb_1.append(b.totamt)
            qwerb1+=float(b.totamt)
    context['qwerb1'] = qwerb1
    qwerb_2 = []
    qwerb2 = 0.0
    bilal2 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem, todatem, ])
    for bi in bilal2:
        if bi.paymmethod=='Cash' and bi.category1 == 'IGST Payable':
            qwerb_2.append(bi.totamt)
            qwerb2+=float(bi.totamt)
    context['qwerb2'] = qwerb2
    qwerb_3 = []
    qwerb3 = 0.0
    bilal3 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem1, todatem1, ])
    for be in bilal3:
        if be.paymmethod=='Cash' and be.category1 == 'IGST Payable':
            qwerb_3.append(be.totamt)
            qwerb3+=float(be.totamt)
    context['qwerb3'] = qwerb3
    qwerb_4 = []
    qwerb4 = 0.0
    bilal4 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem2, todatem2, ])
    for be in bilal4:
        if be.paymmethod=='Cash' and be.category1 == 'IGST Payable':
            qwerb_4.append(be.totamt)
            qwerb4+=float(be.totamt)
    context['qwerb4'] = qwerb4
    qwerb_5 = []
    qwerb5 = 0.0
    bilal5 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem3, todatem3, ])
    for be in bilal5:
        if be.paymmethod=='Cash' and be.category1 == 'IGST Payable':
            qwerb_5.append(be.totamt)
            qwerb5+=float(be.totamt)
    context['qwerb5'] = qwerb5
    
    # Input CGST
    qwern_1=[]
    qwern1 = 0.0
    bilal = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdate, todate, ])
    for b in bilal:
        if b.paymmethod=='Cash' and b.category1 == 'Input CGST':
            qwern_1.append(b.totamt)
            qwern1+=float(b.totamt)
    context['qwern1'] = qwern1
    qwern_2 = []
    qwern2 = 0.0
    bilal2 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem, todatem, ])
    for bi in bilal2:
        if bi.paymmethod=='Cash' and bi.category1 == 'Input CGST':
            qwern_2.append(bi.totamt)
            qwern2+=float(bi.totamt)
    context['qwern2'] = qwern2
    qwern_3 = []
    qwern3 = 0.0
    bilal3 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem1, todatem1, ])
    for be in bilal3:
        if be.paymmethod=='Cash' and be.category1 == 'Input CGST':
            qwern_3.append(be.totamt)
            qwern3+=float(be.totamt)
    context['qwern3'] = qwern3
    qwern_4 = []
    qwern4 = 0.0
    bilal4 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem2, todatem2, ])
    for be in bilal4:
        if be.paymmethod=='Cash' and be.category1 == 'Input CGST':
            qwern_4.append(be.totamt)
            qwern4+=float(be.totamt)
    context['qwern4'] = qwern4
    qwern_5 = []
    qwern5 = 0.0
    bilal5 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem3, todatem3, ])
    for be in bilal5:
        if be.paymmethod=='Cash' and be.category1 == 'Input CGST':
            qwern_5.append(be.totamt)
            qwern5+=float(be.totamt)
    context['qwern5'] = qwern5
    
    # Input CGST Tax RCM
    qwerm_1=[]
    qwerm1 = 0.0
    bilal = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdate, todate, ])
    for b in bilal:
        if b.paymmethod=='Cash' and b.category1 == 'Input CGST Tax RCM':
            qwerm_1.append(b.totamt)
            qwerm1+=float(b.totamt)
    context['qwerm1'] = qwerm1
    qwerm_2 = []
    qwerm2 = 0.0
    bilal2 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem, todatem, ])
    for bi in bilal2:
        if bi.paymmethod=='Cash' and bi.category1 == 'Input CGST Tax RCM':
            qwerm_2.append(bi.totamt)
            qwerm2+=float(bi.totamt)
    context['qwerm2'] = qwerm2
    qwerm_3 = []
    qwerm3 = 0.0
    bilal3 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem1, todatem1, ])
    for be in bilal3:
        if be.paymmethod=='Cash' and be.category1 == 'Input CGST Tax RCM':
            qwerm_3.append(be.totamt)
            qwerm3+=float(be.totamt)
    context['qwerm3'] = qwerm3
    qwerm_4 = []
    qwerm4 = 0.0
    bilal4 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem2, todatem2, ])
    for be in bilal4:
        if be.paymmethod=='Cash' and be.category1 == 'Input CGST Tax RCM':
            qwerm_4.append(be.totamt)
            qwerm4+=float(be.totamt)
    context['qwerm4'] = qwerm4
    qwerm_5 = []
    qwerm5 = 0.0
    bilal5 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem3, todatem3, ])
    for be in bilal5:
        if be.paymmethod=='Cash' and be.category1 == 'Input CGST Tax RCM':
            qwerm_5.append(be.totamt)
            qwerm5+=float(be.totamt)
    context['qwerm5'] = qwerm5
    
    # Input IGST
    king_1=[]
    king1 = 0.0
    bilal = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdate, todate, ])
    for b in bilal:
        if b.paymmethod=='Cash' and b.category1 == 'Input IGST':
            king_1.append(b.totamt)
            king1+=float(b.totamt)
    context['king1'] = king1
    king_2 = []
    king2 = 0.0
    bilal2 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem, todatem, ])
    for bi in bilal2:
        if bi.paymmethod=='Cash' and bi.category1 == 'Input IGST':
            king_2.append(bi.totamt)
            king2+=float(bi.totamt)
    context['king2'] = king2
    king_3 = []
    king3 = 0.0
    bilal3 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem1, todatem1, ])
    for be in bilal3:
        if be.paymmethod=='Cash' and be.category1 == 'Input IGST':
            king_3.append(be.totamt)
            king3+=float(be.totamt)
    context['king3'] = king3
    king_4 = []
    king4 = 0.0
    bilal4 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem2, todatem2, ])
    for be in bilal4:
        if be.paymmethod=='Cash' and be.category1 == 'Input IGST':
            king_4.append(be.totamt)
            king4+=float(be.totamt)
    context['king4'] = king4
    king_5 = []
    king5 = 0.0
    bilal5 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem3, todatem3, ])
    for be in bilal5:
        if be.paymmethod=='Cash' and be.category1 == 'Input IGST':
            king_5.append(be.totamt)
            king5+=float(be.totamt)
    context['king5'] = king5
    
    # Input IGST Tax RCM
    kingq_1=[]
    kingq1 = 0.0
    bilal = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdate, todate, ])
    for b in bilal:
        if b.paymmethod=='Cash' and b.category1 == 'Input IGST Tax RCM':
            kingq_1.append(b.totamt)
            kingq1+=float(b.totamt)
    context['kingq1'] = kingq1
    kingq_2 = []
    kingq2 = 0.0
    bilal2 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem, todatem, ])
    for bi in bilal2:
        if bi.paymmethod=='Cash' and bi.category1 == 'Input IGST Tax RCM':
            kingq_2.append(bi.totamt)
            kingq2+=float(bi.totamt)
    context['kingq2'] = kingq2
    kingq_3 = []
    kingq3 = 0.0
    bilal3 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem1, todatem1, ])
    for be in bilal3:
        if be.paymmethod=='Cash' and be.category1 == 'Input IGST Tax RCM':
            kingq_3.append(be.totamt)
            kingq3+=float(be.totamt)
    context['kingq3'] = kingq3
    kingq_4 = []
    kingq4 = 0.0
    bilal4 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem2, todatem2, ])
    for be in bilal4:
        if be.paymmethod=='Cash' and be.category1 == 'Input IGST Tax RCM':
            kingq_4.append(be.totamt)
            kingq4+=float(be.totamt)
    context['kingq4'] = kingq4
    kingq_5 = []
    kingq5 = 0.0
    bilal5 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem3, todatem3, ])
    for be in bilal5:
        if be.paymmethod=='Cash' and be.category1 == 'Input IGST Tax RCM':
            kingq_5.append(be.totamt)
            kingq5+=float(be.totamt)
    context['kingq5'] = kingq5
    
    # Input Krishi Kalyan Cess
    kingw_1=[]
    kingw1 = 0.0
    bilal = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdate, todate, ])
    for b in bilal:
        if b.paymmethod=='Cash' and b.category1 == 'Input Krishi Kalyan Cess':
            kingw_1.append(b.totamt)
            kingw1+=float(b.totamt)
    context['kingw1'] = kingw1
    kingw_2 = []
    kingw2 = 0.0
    bilal2 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem, todatem, ])
    for bi in bilal2:
        if bi.paymmethod=='Cash' and bi.category1 == 'Input Krishi Kalyan Cess':
            kingw_2.append(bi.totamt)
            kingw2+=float(bi.totamt)
    context['kingw2'] = kingw2
    kingw_3 = []
    kingw3 = 0.0
    bilal3 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem1, todatem1, ])
    for be in bilal3:
        if be.paymmethod=='Cash' and be.category1 == 'Input Krishi Kalyan Cess':
            kingw_3.append(be.totamt)
            kingw3+=float(be.totamt)
    context['kingw3'] = kingw3
    kingw_4 = []
    kingw4 = 0.0
    bilal4 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem2, todatem2, ])
    for be in bilal4:
        if be.paymmethod=='Cash' and be.category1 == 'Input Krishi Kalyan Cess':
            kingw_4.append(be.totamt)
            kingw4+=float(be.totamt)
    context['kingw4'] = kingw4
    kingw_5 = []
    kingw5 = 0.0
    bilal5 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem3, todatem3, ])
    for be in bilal5:
        if be.paymmethod=='Cash' and be.category1 == 'Input Krishi Kalyan Cess':
            kingw_5.append(be.totamt)
            kingw5+=float(be.totamt)
    context['kingw5'] = kingw5
    
    # Input Krishi Kalyan Cess RCM
    kinge_1=[]
    kinge1 = 0.0
    bilal = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdate, todate, ])
    for b in bilal:
        if b.paymmethod=='Cash' and b.category1 == 'Input Krishi Kalyan Cess RCM':
            kinge_1.append(b.totamt)
            kinge1+=float(b.totamt)
    context['kinge1'] = kinge1
    kinge_2 = []
    kinge2 = 0.0
    bilal2 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem, todatem, ])
    for bi in bilal2:
        if bi.paymmethod=='Cash' and bi.category1 == 'Input Krishi Kalyan Cess RCM':
            kinge_2.append(bi.totamt)
            kinge2+=float(bi.totamt)
    context['kinge2'] = kinge2
    kinge_3 = []
    kinge3 = 0.0
    bilal3 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem1, todatem1, ])
    for be in bilal3:
        if be.paymmethod=='Cash' and be.category1 == 'Input Krishi Kalyan Cess RCM':
            kinge_3.append(be.totamt)
            kinge3+=float(be.totamt)
    context['kinge3'] = kinge3
    kinge_4 = []
    kinge4 = 0.0
    bilal4 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem2, todatem2, ])
    for be in bilal4:
        if be.paymmethod=='Cash' and be.category1 == 'Input Krishi Kalyan Cess RCM':
            kinge_4.append(be.totamt)
            kinge4+=float(be.totamt)
    context['kinge4'] = kinge4
    kinge_5 = []
    kinge5 = 0.0
    bilal5 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem3, todatem3, ])
    for be in bilal5:
        if be.paymmethod=='Cash' and be.category1 == 'Input Krishi Kalyan Cess RCM':
            kinge_5.append(be.totamt)
            kinge5+=float(be.totamt)
    context['kinge5'] = kinge5
    
    # Input Service Tax
    kingr_1=[]
    kingr1 = 0.0
    bilal = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdate, todate, ])
    for b in bilal:
        if b.paymmethod=='Cash' and b.category1 == 'Input Service Tax':
            kingr_1.append(b.totamt)
            kingr1+=float(b.totamt)
    context['kingr1'] = kingr1
    kingr_2 = []
    kingr2 = 0.0
    bilal2 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem, todatem, ])
    for bi in bilal2:
        if bi.paymmethod=='Cash' and bi.category1 == 'Input Service Tax':
            kingr_2.append(bi.totamt)
            kingr2+=float(bi.totamt)
    context['kingr2'] = kingr2
    kingr_3 = []
    kingr3 = 0.0
    bilal3 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem1, todatem1, ])
    for be in bilal3:
        if be.paymmethod=='Cash' and be.category1 == 'Input Service Tax':
            kingr_3.append(be.totamt)
            kingr3+=float(be.totamt)
    context['kingr3'] = kingr3
    kingr_4 = []
    kingr4 = 0.0
    bilal4 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem2, todatem2, ])
    for be in bilal4:
        if be.paymmethod=='Cash' and be.category1 == 'Input Service Tax':
            kingr_4.append(be.totamt)
            kingr4+=float(be.totamt)
    context['kingr4'] = kingr4
    kingr_5 = []
    kingr5 = 0.0
    bilal5 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem3, todatem3, ])
    for be in bilal5:
        if be.paymmethod=='Cash' and be.category1 == 'Input Service Tax':
            kingr_5.append(be.totamt)
            kingr5+=float(be.totamt)
    context['kingr5'] = kingr5
    
    # Input Service Tax RCM
    kingt_1=[]
    kingt1 = 0.0
    bilal = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdate, todate, ])
    for b in bilal:
        if b.paymmethod=='Cash' and b.category1 == 'Input Service Tax RCM':
            kingt_1.append(b.totamt)
            kingt1+=float(b.totamt)
    context['kingt1'] = kingt1
    kingt_2 = []
    kingt2 = 0.0
    bilal2 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem, todatem, ])
    for bi in bilal2:
        if bi.paymmethod=='Cash' and bi.category1 == 'Input Service Tax RCM':
            kingt_2.append(bi.totamt)
            kingt2+=float(bi.totamt)
    context['kingt2'] = kingt2
    kingt_3 = []
    kingt3 = 0.0
    bilal3 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem1, todatem1, ])
    for be in bilal3:
        if be.paymmethod=='Cash' and be.category1 == 'Input Service Tax RCM':
            kingt_3.append(be.totamt)
            kingt3+=float(be.totamt)
    context['kingt3'] = kingt3
    kingt_4 = []
    kingt4 = 0.0
    bilal4 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem2, todatem2, ])
    for be in bilal4:
        if be.paymmethod=='Cash' and be.category1 == 'Input Service Tax RCM':
            kingt_4.append(be.totamt)
            kingt4+=float(be.totamt)
    context['kingt4'] = kingt4
    kingt_5 = []
    kingt5 = 0.0
    bilal5 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem3, todatem3, ])
    for be in bilal5:
        if be.paymmethod=='Cash' and be.category1 == 'Input Service Tax RCM':
            kingt_5.append(be.totamt)
            kingt5+=float(be.totamt)
    context['kingt5'] = kingt5
    
    # Input SGST
    kingy_1=[]
    kingy1 = 0.0
    bilal = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdate, todate, ])
    for b in bilal:
        if b.paymmethod=='Cash' and b.category1 == 'Input SGST':
            kingy_1.append(b.totamt)
            kingy1+=float(b.totamt)
    context['kingy1'] = kingy1
    kingy_2 = []
    kingy2 = 0.0
    bilal2 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem, todatem, ])
    for bi in bilal2:
        if bi.paymmethod=='Cash' and bi.category1 == 'Input SGST':
            kingy_2.append(bi.totamt)
            kingy2+=float(bi.totamt)
    context['kingy2'] = kingy2
    kingy_3 = []
    kingy3 = 0.0
    bilal3 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem1, todatem1, ])
    for be in bilal3:
        if be.paymmethod=='Cash' and be.category1 == 'Input SGST':
            kingy_3.append(be.totamt)
            kingy3+=float(be.totamt)
    context['kingy3'] = kingy3
    kingy_4 = []
    kingy4 = 0.0
    bilal4 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem2, todatem2, ])
    for be in bilal4:
        if be.paymmethod=='Cash' and be.category1 == 'Input SGST':
            kingy_4.append(be.totamt)
            kingy4+=float(be.totamt)
    context['kingy4'] = kingy4
    kingy_5 = []
    kingy5 = 0.0
    bilal5 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem3, todatem3, ])
    for be in bilal5:
        if be.paymmethod=='Cash' and be.category1 == 'Input SGST':
            kingy_5.append(be.totamt)
            kingy5+=float(be.totamt)
    context['kingy5'] = kingy5
    
    # Input SGST Tax RCM
    kingu_1=[]
    kingu1 = 0.0
    bilal = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdate, todate, ])
    for b in bilal:
        if b.paymmethod=='Cash' and b.category1 == 'Input SGST Tax RCM':
            kingu_1.append(b.totamt)
            kingu1+=float(b.totamt)
    context['kingu1'] = kingu1
    kingu_2 = []
    kingu2 = 0.0
    bilal2 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem, todatem, ])
    for bi in bilal2:
        if bi.paymmethod=='Cash' and bi.category1 == 'Input SGST Tax RCM':
            kingu_2.append(bi.totamt)
            kingu2+=float(bi.totamt)
    context['kingu2'] = kingu2
    kingu_3 = []
    kingu3 = 0.0
    bilal3 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem1, todatem1, ])
    for be in bilal3:
        if be.paymmethod=='Cash' and be.category1 == 'Input SGST Tax RCM':
            kingu_3.append(be.totamt)
            kingu3+=float(be.totamt)
    context['kingu3'] = kingu3
    kingu_4 = []
    kingu4 = 0.0
    bilal4 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem2, todatem2, ])
    for be in bilal4:
        if be.paymmethod=='Cash' and be.category1 == 'Input SGST Tax RCM':
            kingu_4.append(be.totamt)
            kingu4+=float(be.totamt)
    context['kingu4'] = kingu4
    kingu_5 = []
    kingu5 = 0.0
    bilal5 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem3, todatem3, ])
    for be in bilal5:
        if be.paymmethod=='Cash' and be.category1 == 'Input SGST Tax RCM':
            kingu_5.append(be.totamt)
            kingu5+=float(be.totamt)
    context['kingu5'] = kingu5
    
    # Input VAT 14%
    kingi_1=[]
    kingi1 = 0.0
    bilal = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdate, todate, ])
    for b in bilal:
        if b.paymmethod=='Cash' and b.category1 == 'Input VAT 14%':
            kingi_1.append(b.totamt)
            kingi1+=float(b.totamt)
    context['kingi1'] = kingi1
    kingi_2 = []
    kingi2 = 0.0
    bilal2 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem, todatem, ])
    for bi in bilal2:
        if bi.paymmethod=='Cash' and bi.category1 == 'Input VAT 14%':
            kingi_2.append(bi.totamt)
            kingi2+=float(bi.totamt)
    context['kingi2'] = kingi2
    kingi_3 = []
    kingi3 = 0.0
    bilal3 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem1, todatem1, ])
    for be in bilal3:
        if be.paymmethod=='Cash' and be.category1 == 'Input VAT 14%':
            kingi_3.append(be.totamt)
            kingi3+=float(be.totamt)
    context['kingi3'] = kingi3
    kingi_4 = []
    kingi4 = 0.0
    bilal4 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem2, todatem2, ])
    for be in bilal4:
        if be.paymmethod=='Cash' and be.category1 == 'Input VAT 14%':
            kingi_4.append(be.totamt)
            kingi4+=float(be.totamt)
    context['kingi4'] = kingi4
    kingi_5 = []
    kingi5 = 0.0
    bilal5 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem3, todatem3, ])
    for be in bilal5:
        if be.paymmethod=='Cash' and be.category1 == 'Input VAT 14%':
            kingi_5.append(be.totamt)
            kingi5+=float(be.totamt)
    context['kingi5'] = kingi5
    
    # Input VAT 4%
    kingo_1=[]
    kingo1 = 0.0
    bilal = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdate, todate, ])
    for b in bilal:
        if b.paymmethod=='Cash' and b.category1 == 'Input VAT 4%':
            kingo_1.append(b.totamt)
            kingo1+=float(b.totamt)
    context['kingo1'] = kingo1
    kingo_2 = []
    kingo2 = 0.0
    bilal2 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem, todatem, ])
    for bi in bilal2:
        if bi.paymmethod=='Cash' and bi.category1 == 'Input VAT 4%':
            kingo_2.append(bi.totamt)
            kingo2+=float(bi.totamt)
    context['kingo2'] = kingo2
    kingo_3 = []
    kingo3 = 0.0
    bilal3 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem1, todatem1, ])
    for be in bilal3:
        if be.paymmethod=='Cash' and be.category1 == 'Input VAT 4%':
            kingo_3.append(be.totamt)
            kingo3+=float(be.totamt)
    context['kingo3'] = kingo3
    kingo_4 = []
    kingo4 = 0.0
    bilal4 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem2, todatem2, ])
    for be in bilal4:
        if be.paymmethod=='Cash' and be.category1 == 'Input VAT 4%':
            kingo_4.append(be.totamt)
            kingo4+=float(be.totamt)
    context['kingo4'] = kingo4
    kingo_5 = []
    kingo5 = 0.0
    bilal5 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem3, todatem3, ])
    for be in bilal5:
        if be.paymmethod=='Cash' and be.category1 == 'Input VAT 4%':
            kingo_5.append(be.totamt)
            kingo5+=float(be.totamt)
    context['kingo5'] = kingo5
    
    # Input VAT 5%
    kingp_1=[]
    kingp1 = 0.0
    bilal = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdate, todate, ])
    for b in bilal:
        if b.paymmethod=='Cash' and b.category1 == 'Input VAT 5%':
            kingp_1.append(b.totamt)
            kingp1+=float(b.totamt)
    context['kingp1'] = kingp1
    kingp_2 = []
    kingp2 = 0.0
    bilal2 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem, todatem, ])
    for bi in bilal2:
        if bi.paymmethod=='Cash' and bi.category1 == 'Input VAT 5%':
            kingp_2.append(bi.totamt)
            kingp2+=float(bi.totamt)
    context['kingp2'] = kingp2
    kingp_3 = []
    kingp3 = 0.0
    bilal3 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem1, todatem1, ])
    for be in bilal3:
        if be.paymmethod=='Cash' and be.category1 == 'Input VAT 5%':
            kingp_3.append(be.totamt)
            kingp3+=float(be.totamt)
    context['kingp3'] = kingp3
    kingp_4 = []
    kingp4 = 0.0
    bilal4 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem2, todatem2, ])
    for be in bilal4:
        if be.paymmethod=='Cash' and be.category1 == 'Input VAT 5%':
            kingp_4.append(be.totamt)
            kingp4+=float(be.totamt)
    context['kingp4'] = kingp4
    kingp_5 = []
    kingp5 = 0.0
    bilal5 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem3, todatem3, ])
    for be in bilal5:
        if be.paymmethod=='Cash' and be.category1 == 'Input VAT 5%':
            kingp_5.append(be.totamt)
            kingp5+=float(be.totamt)
    context['kingp5'] = kingp5
    
    # Krishi Kalyan Cess Payable
    kinga_1=[]
    kinga1 = 0.0
    bilal = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdate, todate, ])
    for b in bilal:
        if b.paymmethod=='Cash' and b.category1 == 'Krishi Kalyan Cess Payable':
            kinga_1.append(b.totamt)
            kinga1+=float(b.totamt)
    context['kinga1'] = kinga1
    kinga_2 = []
    kinga2 = 0.0
    bilal2 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem, todatem, ])
    for bi in bilal2:
        if bi.paymmethod=='Cash' and bi.category1 == 'Krishi Kalyan Cess Payable':
            kinga_2.append(bi.totamt)
            kinga2+=float(bi.totamt)
    context['kinga2'] = kinga2
    kinga_3 = []
    kinga3 = 0.0
    bilal3 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem1, todatem1, ])
    for be in bilal3:
        if be.paymmethod=='Cash' and be.category1 == 'Krishi Kalyan Cess Payable':
            kinga_3.append(be.totamt)
            kinga3+=float(be.totamt)
    context['kinga3'] = kinga3
    kinga_4 = []
    kinga4 = 0.0
    bilal4 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem2, todatem2, ])
    for be in bilal4:
        if be.paymmethod=='Cash' and be.category1 == 'Krishi Kalyan Cess Payable':
            kinga_4.append(be.totamt)
            kinga4+=float(be.totamt)
    context['kinga4'] = kinga4
    kinga_5 = []
    kinga5 = 0.0
    bilal5 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem3, todatem3, ])
    for be in bilal5:
        if be.paymmethod=='Cash' and be.category1 == 'Krishi Kalyan Cess Payable':
            kinga_5.append(be.totamt)
            kinga5+=float(be.totamt)
    context['kinga5'] = kinga5
    
    # Krishi Kalyan Cess Suspense
    kings_1=[]
    kings1 = 0.0
    bilal = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdate, todate, ])
    for b in bilal:
        if b.paymmethod=='Cash' and b.category1 == 'Krishi Kalyan Cess Suspense':
            kings_1.append(b.totamt)
            kings1+=float(b.totamt)
    context['kings1'] = kings1
    kings_2 = []
    kings2 = 0.0
    bilal2 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem, todatem, ])
    for bi in bilal2:
        if bi.paymmethod=='Cash' and bi.category1 == 'Krishi Kalyan Cess Suspense':
            kings_2.append(bi.totamt)
            kings2+=float(bi.totamt)
    context['kings2'] = kings2
    kings_3 = []
    kings3 = 0.0
    bilal3 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem1, todatem1, ])
    for be in bilal3:
        if be.paymmethod=='Cash' and be.category1 == 'Krishi Kalyan Cess Suspense':
            kings_3.append(be.totamt)
            kings3+=float(be.totamt)
    context['kings3'] = kings3
    kings_4 = []
    kings4 = 0.0
    bilal4 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem2, todatem2, ])
    for be in bilal4:
        if be.paymmethod=='Cash' and be.category1 == 'Krishi Kalyan Cess Suspense':
            kings_4.append(be.totamt)
            kings4+=float(be.totamt)
    context['kings4'] = kings4
    kings_5 = []
    kings5 = 0.0
    bilal5 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem3, todatem3, ])
    for be in bilal5:
        if be.paymmethod=='Cash' and be.category1 == 'Krishi Kalyan Cess Suspense':
            kings_5.append(be.totamt)
            kings5+=float(be.totamt)
    context['kings5'] = kings5
    
    # Output CGST
    kingd_1=[]
    kingd1 = 0.0
    bilal = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdate, todate, ])
    for b in bilal:
        if b.paymmethod=='Cash' and b.category1 == 'Output CGST':
            kingd_1.append(b.totamt)
            kingd1+=float(b.totamt)
    context['kingd1'] = kingd1
    kingd_2 = []
    kingd2 = 0.0
    bilal2 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem, todatem, ])
    for bi in bilal2:
        if bi.paymmethod=='Cash' and bi.category1 == 'Output CGST':
            kingd_2.append(bi.totamt)
            kingd2+=float(bi.totamt)
    context['kingd2'] = kingd2
    kingd_3 = []
    kingd3 = 0.0
    bilal3 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem1, todatem1, ])
    for be in bilal3:
        if be.paymmethod=='Cash' and be.category1 == 'Output CGST':
            kingd_3.append(be.totamt)
            kingd3+=float(be.totamt)
    context['kingd3'] = kingd3
    kingd_4 = []
    kingd4 = 0.0
    bilal4 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem2, todatem2, ])
    for be in bilal4:
        if be.paymmethod=='Cash' and be.category1 == 'Output CGST':
            kingd_4.append(be.totamt)
            kingd4+=float(be.totamt)
    context['kingd4'] = kingd4
    kingd_5 = []
    kingd5 = 0.0
    bilal5 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem3, todatem3, ])
    for be in bilal5:
        if be.paymmethod=='Cash' and be.category1 == 'Output CGST':
            kingd_5.append(be.totamt)
            kingd5+=float(be.totamt)
    context['kingd5'] = kingd5
    
    # Output CGST Tax RCM
    kingf_1=[]
    kingf1 = 0.0
    bilal = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdate, todate, ])
    for b in bilal:
        if b.paymmethod=='Cash' and b.category1 == 'Output CGST Tax RCM':
            kingf_1.append(b.totamt)
            kingf1+=float(b.totamt)
    context['kingf1'] = kingf1
    kingf_2 = []
    kingf2 = 0.0
    bilal2 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem, todatem, ])
    for bi in bilal2:
        if bi.paymmethod=='Cash' and bi.category1 == 'Output CGST Tax RCM':
            kingf_2.append(bi.totamt)
            kingf2+=float(bi.totamt)
    context['kingf2'] = kingf2
    kingf_3 = []
    kingf3 = 0.0
    bilal3 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem1, todatem1, ])
    for be in bilal3:
        if be.paymmethod=='Cash' and be.category1 == 'Output CGST Tax RCM':
            kingf_3.append(be.totamt)
            kingf3+=float(be.totamt)
    context['kingf3'] = kingf3
    kingf_4 = []
    kingf4 = 0.0
    bilal4 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem2, todatem2, ])
    for be in bilal4:
        if be.paymmethod=='Cash' and be.category1 == 'Output CGST Tax RCM':
            kingf_4.append(be.totamt)
            kingf4+=float(be.totamt)
    context['kingf4'] = kingf4
    kingf_5 = []
    kingf5 = 0.0
    bilal5 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem3, todatem3, ])
    for be in bilal5:
        if be.paymmethod=='Cash' and be.category1 == 'Output CGST Tax RCM':
            kingf_5.append(be.totamt)
            kingf5+=float(be.totamt)
    context['kingf5'] = kingf5
    
    # Output CST 2%
    kingg_1=[]
    kingg1 = 0.0
    bilal = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdate, todate, ])
    for b in bilal:
        if b.paymmethod=='Cash' and b.category1 == 'Output CST 2%':
            kingg_1.append(b.totamt)
            kingg1+=float(b.totamt)
    context['kingg1'] = kingg1
    kingg_2 = []
    kingg2 = 0.0
    bilal2 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem, todatem, ])
    for bi in bilal2:
        if bi.paymmethod=='Cash' and bi.category1 == 'Output CST 2%':
            kingg_2.append(bi.totamt)
            kingg2+=float(bi.totamt)
    context['kingg2'] = kingg2
    kingg_3 = []
    kingg3 = 0.0
    bilal3 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem1, todatem1, ])
    for be in bilal3:
        if be.paymmethod=='Cash' and be.category1 == 'Output CST 2%':
            kingg_3.append(be.totamt)
            kingg3+=float(be.totamt)
    context['kingg3'] = kingg3
    kingg_4 = []
    kingg4 = 0.0
    bilal4 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem2, todatem2, ])
    for be in bilal4:
        if be.paymmethod=='Cash' and be.category1 == 'Output CST 2%':
            kingg_4.append(be.totamt)
            kingg4+=float(be.totamt)
    context['kingg4'] = kingg4
    kingg_5 = []
    kingg5 = 0.0
    bilal5 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem3, todatem3, ])
    for be in bilal5:
        if be.paymmethod=='Cash' and be.category1 == 'Output CST 2%':
            kingg_5.append(be.totamt)
            kingg5+=float(be.totamt)
    context['kingg5'] = kingg5
    
    # Output IGST
    kingh_1=[]
    kingh1 = 0.0
    bilal = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdate, todate, ])
    for b in bilal:
        if b.paymmethod=='Cash' and b.category1 == 'Output IGST':
            kingh_1.append(b.totamt)
            kingh1+=float(b.totamt)
    context['kingh1'] = kingh1
    kingh_2 = []
    kingh2 = 0.0
    bilal2 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem, todatem, ])
    for bi in bilal2:
        if bi.paymmethod=='Cash' and bi.category1 == 'Output IGST':
            kingh_2.append(bi.totamt)
            kingh2+=float(bi.totamt)
    context['kingh2'] = kingh2
    kingh_3 = []
    kingh3 = 0.0
    bilal3 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem1, todatem1, ])
    for be in bilal3:
        if be.paymmethod=='Cash' and be.category1 == 'Output IGST':
            kingh_3.append(be.totamt)
            kingh3+=float(be.totamt)
    context['kingh3'] = kingh3
    kingh_4 = []
    kingh4 = 0.0
    bilal4 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem2, todatem2, ])
    for be in bilal4:
        if be.paymmethod=='Cash' and be.category1 == 'Output IGST':
            kingh_4.append(be.totamt)
            kingh4+=float(be.totamt)
    context['kingh4'] = kingh4
    kingh_5 = []
    kingh5 = 0.0
    bilal5 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem3, todatem3, ])
    for be in bilal5:
        if be.paymmethod=='Cash' and be.category1 == 'Output IGST':
            kingh_5.append(be.totamt)
            kingh5+=float(be.totamt)
    context['kingh5'] = kingh5
    
    # Output IGST Tax RCM
    kingj_1=[]
    kingj1 = 0.0
    bilal = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdate, todate, ])
    for b in bilal:
        if b.paymmethod=='Cash' and b.category1 == 'Output IGST Tax RCM':
            kingj_1.append(b.totamt)
            kingj1+=float(b.totamt)
    context['kingj1'] = kingj1
    kingj_2 = []
    kingj2 = 0.0
    bilal2 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem, todatem, ])
    for bi in bilal2:
        if bi.paymmethod=='Cash' and bi.category1 == 'Output IGST Tax RCM':
            kingj_2.append(bi.totamt)
            kingj2+=float(bi.totamt)
    context['kingj2'] = kingj2
    kingj_3 = []
    kingj3 = 0.0
    bilal3 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem1, todatem1, ])
    for be in bilal3:
        if be.paymmethod=='Cash' and be.category1 == 'Output IGST Tax RCM':
            kingj_3.append(be.totamt)
            kingj3+=float(be.totamt)
    context['kingj3'] = kingj3
    kingj_4 = []
    kingj4 = 0.0
    bilal4 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem2, todatem2, ])
    for be in bilal4:
        if be.paymmethod=='Cash' and be.category1 == 'Output IGST Tax RCM':
            kingj_4.append(be.totamt)
            kingj4+=float(be.totamt)
    context['kingj4'] = kingj4
    kingj_5 = []
    kingj5 = 0.0
    bilal5 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem3, todatem3, ])
    for be in bilal5:
        if be.paymmethod=='Cash' and be.category1 == 'Output IGST Tax RCM':
            kingj_5.append(be.totamt)
            kingj5+=float(be.totamt)
    context['kingj5'] = kingj5
    
    # Output Krishi Kalyan Cess
    kingk_1=[]
    kingk1 = 0.0
    bilal = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdate, todate, ])
    for b in bilal:
        if b.paymmethod=='Cash' and b.category1 == 'Output Krishi Kalyan Cess':
            kingk_1.append(b.totamt)
            kingk1+=float(b.totamt)
    context['kingk1'] = kingk1
    kingk_2 = []
    kingk2 = 0.0
    bilal2 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem, todatem, ])
    for bi in bilal2:
        if bi.paymmethod=='Cash' and bi.category1 == 'Output Krishi Kalyan Cess':
            kingk_2.append(bi.totamt)
            kingk2+=float(bi.totamt)
    context['kingk2'] = kingk2
    kingk_3 = []
    kingk3 = 0.0
    bilal3 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem1, todatem1, ])
    for be in bilal3:
        if be.paymmethod=='Cash' and be.category1 == 'Output Krishi Kalyan Cess':
            kingk_3.append(be.totamt)
            kingk3+=float(be.totamt)
    context['kingk3'] = kingk3
    kingk_4 = []
    kingk4 = 0.0
    bilal4 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem2, todatem2, ])
    for be in bilal4:
        if be.paymmethod=='Cash' and be.category1 == 'Output Krishi Kalyan Cess':
            kingk_4.append(be.totamt)
            kingk4+=float(be.totamt)
    context['kingk4'] = kingk4
    kingk_5 = []
    kingk5 = 0.0
    bilal5 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem3, todatem3, ])
    for be in bilal5:
        if be.paymmethod=='Cash' and be.category1 == 'Output Krishi Kalyan Cess':
            kingk_5.append(be.totamt)
            kingk5+=float(be.totamt)
    context['kingk5'] = kingk5
    
    # Output Krishi Kalyan Cess RCM
    kingl_1=[]
    kingl1 = 0.0
    bilal = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdate, todate, ])
    for b in bilal:
        if b.paymmethod=='Cash' and b.category1 == 'Output Krishi Kalyan Cess RCM':
            kingl_1.append(b.totamt)
            kingl1+=float(b.totamt)
    context['kingl1'] = kingl1
    kingl_2 = []
    kingl2 = 0.0
    bilal2 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem, todatem, ])
    for bi in bilal2:
        if bi.paymmethod=='Cash' and bi.category1 == 'Output Krishi Kalyan Cess RCM':
            kingl_2.append(bi.totamt)
            kingl2+=float(bi.totamt)
    context['kingl2'] = kingl2
    kingl_3 = []
    kingl3 = 0.0
    bilal3 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem1, todatem1, ])
    for be in bilal3:
        if be.paymmethod=='Cash' and be.category1 == 'Output Krishi Kalyan Cess RCM':
            kingl_3.append(be.totamt)
            kingl3+=float(be.totamt)
    context['kingl3'] = kingl3
    kingl_4 = []
    kingl4 = 0.0
    bilal4 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem2, todatem2, ])
    for be in bilal4:
        if be.paymmethod=='Cash' and be.category1 == 'Output Krishi Kalyan Cess RCM':
            kingl_4.append(be.totamt)
            kingl4+=float(be.totamt)
    context['kingl4'] = kingl4
    kingl_5 = []
    kingl5 = 0.0
    bilal5 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem3, todatem3, ])
    for be in bilal5:
        if be.paymmethod=='Cash' and be.category1 == 'Output Krishi Kalyan Cess RCM':
            kingl_5.append(be.totamt)
            kingl5+=float(be.totamt)
    context['kingl5'] = kingl5
    
    # Output Service Tax
    kingz_1=[]
    kingz1 = 0.0
    bilal = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdate, todate, ])
    for b in bilal:
        if b.paymmethod=='Cash' and b.category1 == 'Output Service Tax':
            kingz_1.append(b.totamt)
            kingz1+=float(b.totamt)
    context['kingz1'] = kingz1
    kingz_2 = []
    kingz2 = 0.0
    bilal2 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem, todatem, ])
    for bi in bilal2:
        if bi.paymmethod=='Cash' and bi.category1 == 'Output Service Tax':
            kingz_2.append(bi.totamt)
            kingz2+=float(bi.totamt)
    context['kingz2'] = kingz2
    kingz_3 = []
    kingz3 = 0.0
    bilal3 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem1, todatem1, ])
    for be in bilal3:
        if be.paymmethod=='Cash' and be.category1 == 'Output Service Tax':
            kingz_3.append(be.totamt)
            kingz3+=float(be.totamt)
    context['kingz3'] = kingz3
    kingz_4 = []
    kingz4 = 0.0
    bilal4 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem2, todatem2, ])
    for be in bilal4:
        if be.paymmethod=='Cash' and be.category1 == 'Output Service Tax':
            kingz_4.append(be.totamt)
            kingz4+=float(be.totamt)
    context['kingz4'] = kingz4
    kingz_5 = []
    kingz5 = 0.0
    bilal5 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem3, todatem3, ])
    for be in bilal5:
        if be.paymmethod=='Cash' and be.category1 == 'Output Service Tax':
            kingz_5.append(be.totamt)
            kingz5+=float(be.totamt)
    context['kingz5'] = kingz5
    
    # Output Service Tax RCM
    kingx_1=[]
    kingx1 = 0.0
    bilal = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdate, todate, ])
    for b in bilal:
        if b.paymmethod=='Cash' and b.category1 == 'Output Service Tax RCM':
            kingx_1.append(b.totamt)
            kingx1+=float(b.totamt)
    context['kingx1'] = kingx1
    kingx_2 = []
    kingx2 = 0.0
    bilal2 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem, todatem, ])
    for bi in bilal2:
        if bi.paymmethod=='Cash' and bi.category1 == 'Output Service Tax RCM':
            kingx_2.append(bi.totamt)
            kingx2+=float(bi.totamt)
    context['kingx2'] = kingx2
    kingx_3 = []
    kingx3 = 0.0
    bilal3 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem1, todatem1, ])
    for be in bilal3:
        if be.paymmethod=='Cash' and be.category1 == 'Output Service Tax RCM':
            kingx_3.append(be.totamt)
            kingx3+=float(be.totamt)
    context['kingx3'] = kingx3
    kingx_4 = []
    kingx4 = 0.0
    bilal4 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem2, todatem2, ])
    for be in bilal4:
        if be.paymmethod=='Cash' and be.category1 == 'Output Service Tax RCM':
            kingx_4.append(be.totamt)
            kingx4+=float(be.totamt)
    context['kingx4'] = kingx4
    kingx_5 = []
    kingx5 = 0.0
    bilal5 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem3, todatem3, ])
    for be in bilal5:
        if be.paymmethod=='Cash' and be.category1 == 'Output Service Tax RCM':
            kingx_5.append(be.totamt)
            kingx5+=float(be.totamt)
    context['kingx5'] = kingx5
    
    # Output SGST
    kingc_1=[]
    kingc1 = 0.0
    bilal = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdate, todate, ])
    for b in bilal:
        if b.paymmethod=='Cash' and b.category1 == 'Output SGST':
            kingc_1.append(b.totamt)
            kingc1+=float(b.totamt)
    context['kingc1'] = kingc1
    kingc_2 = []
    kingc2 = 0.0
    bilal2 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem, todatem, ])
    for bi in bilal2:
        if bi.paymmethod=='Cash' and bi.category1 == 'Output SGST':
            kingc_2.append(bi.totamt)
            kingc2+=float(bi.totamt)
    context['kingc2'] = kingc2
    kingc_3 = []
    kingc3 = 0.0
    bilal3 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem1, todatem1, ])
    for be in bilal3:
        if be.paymmethod=='Cash' and be.category1 == 'Output SGST':
            kingc_3.append(be.totamt)
            kingc3+=float(be.totamt)
    context['kingc3'] = kingc3
    kingc_4 = []
    kingc4 = 0.0
    bilal4 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem2, todatem2, ])
    for be in bilal4:
        if be.paymmethod=='Cash' and be.category1 == 'Output SGST':
            kingc_4.append(be.totamt)
            kingc4+=float(be.totamt)
    context['kingc4'] = kingc4
    kingc_5 = []
    kingc5 = 0.0
    bilal5 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem3, todatem3, ])
    for be in bilal5:
        if be.paymmethod=='Cash' and be.category1 == 'Output SGST':
            kingc_5.append(be.totamt)
            kingc5+=float(be.totamt)
    context['kingc5'] = kingc5
    
    # Output SGST Tax RCM
    kingv_1=[]
    kingv1 = 0.0
    bilal = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdate, todate, ])
    for b in bilal:
        if b.paymmethod=='Cash' and b.category1 == 'Output SGST Tax RCM':
            kingv_1.append(b.totamt)
            kingv1+=float(b.totamt)
    context['kingv1'] = kingv1
    kingv_2 = []
    kingv2 = 0.0
    bilal2 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem, todatem, ])
    for bi in bilal2:
        if bi.paymmethod=='Cash' and bi.category1 == 'Output SGST Tax RCM':
            kingv_2.append(bi.totamt)
            kingv2+=float(bi.totamt)
    context['kingv2'] = kingv2
    kingv_3 = []
    kingv3 = 0.0
    bilal3 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem1, todatem1, ])
    for be in bilal3:
        if be.paymmethod=='Cash' and be.category1 == 'Output SGST Tax RCM':
            kingv_3.append(be.totamt)
            kingv3+=float(be.totamt)
    context['kingv3'] = kingv3
    kingv_4 = []
    kingv4 = 0.0
    bilal4 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem2, todatem2, ])
    for be in bilal4:
        if be.paymmethod=='Cash' and be.category1 == 'Output SGST Tax RCM':
            kingv_4.append(be.totamt)
            kingv4+=float(be.totamt)
    context['kingv4'] = kingv4
    kingv_5 = []
    kingv5 = 0.0
    bilal5 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem3, todatem3, ])
    for be in bilal5:
        if be.paymmethod=='Cash' and be.category1 == 'Output SGST Tax RCM':
            kingv_5.append(be.totamt)
            kingv5+=float(be.totamt)
    context['kingv5'] = kingv5
    
    # Output VAT 14%
    kingb_1=[]
    kingb1 = 0.0
    bilal = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdate, todate, ])
    for b in bilal:
        if b.paymmethod=='Cash' and b.category1 == 'Output VAT 14%':
            kingb_1.append(b.totamt)
            kingb1+=float(b.totamt)
    context['kingb1'] = kingb1
    kingb_2 = []
    kingb2 = 0.0
    bilal2 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem, todatem, ])
    for bi in bilal2:
        if bi.paymmethod=='Cash' and bi.category1 == 'Output VAT 14%':
            kingb_2.append(bi.totamt)
            kingb2+=float(bi.totamt)
    context['kingb2'] = kingb2
    kingb_3 = []
    kingb3 = 0.0
    bilal3 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem1, todatem1, ])
    for be in bilal3:
        if be.paymmethod=='Cash' and be.category1 == 'Output VAT 14%':
            kingb_3.append(be.totamt)
            kingb3+=float(be.totamt)
    context['kingb3'] = kingb3
    kingb_4 = []
    kingb4 = 0.0
    bilal4 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem2, todatem2, ])
    for be in bilal4:
        if be.paymmethod=='Cash' and be.category1 == 'Output VAT 14%':
            kingb_4.append(be.totamt)
            kingb4+=float(be.totamt)
    context['kingb4'] = kingb4
    kingb_5 = []
    kingb5 = 0.0
    bilal5 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem3, todatem3, ])
    for be in bilal5:
        if be.paymmethod=='Cash' and be.category1 == 'Output VAT 14%':
            kingb_5.append(be.totamt)
            kingb5+=float(be.totamt)
    context['kingb5'] = kingb5
    
    # Output VAT 4%
    kingn_1=[]
    kingn1 = 0.0
    bilal = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdate, todate, ])
    for b in bilal:
        if b.paymmethod=='Cash' and b.category1 == 'Output VAT 4%':
            kingn_1.append(b.totamt)
            kingn1+=float(b.totamt)
    context['kingn1'] = kingn1
    kingn_2 = []
    kingn2 = 0.0
    bilal2 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem, todatem, ])
    for bi in bilal2:
        if bi.paymmethod=='Cash' and bi.category1 == 'Output VAT 4%':
            kingn_2.append(bi.totamt)
            kingn2+=float(bi.totamt)
    context['kingn2'] = kingn2
    kingn_3 = []
    kingn3 = 0.0
    bilal3 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem1, todatem1, ])
    for be in bilal3:
        if be.paymmethod=='Cash' and be.category1 == 'Output VAT 4%':
            kingn_3.append(be.totamt)
            kingn3+=float(be.totamt)
    context['kingn3'] = kingn3
    kingn_4 = []
    kingn4 = 0.0
    bilal4 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem2, todatem2, ])
    for be in bilal4:
        if be.paymmethod=='Cash' and be.category1 == 'Output VAT 4%':
            kingn_4.append(be.totamt)
            kingn4+=float(be.totamt)
    context['kingn4'] = kingn4
    kingn_5 = []
    kingn5 = 0.0
    bilal5 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem3, todatem3, ])
    for be in bilal5:
        if be.paymmethod=='Cash' and be.category1 == 'Output VAT 4%':
            kingn_5.append(be.totamt)
            kingn5+=float(be.totamt)
    context['kingn5'] = kingn5
    
    # Output VAT 5%
    kingm_1=[]
    kingm1 = 0.0
    bilal = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdate, todate, ])
    for b in bilal:
        if b.paymmethod=='Cash' and b.category1 == 'Output VAT 5%':
            kingm_1.append(b.totamt)
            kingm1+=float(b.totamt)
    context['kingm1'] = kingm1
    kingm_2 = []
    kingm2 = 0.0
    bilal2 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem, todatem, ])
    for bi in bilal2:
        if bi.paymmethod=='Cash' and bi.category1 == 'Output VAT 5%':
            kingm_2.append(bi.totamt)
            kingm2+=float(bi.totamt)
    context['kingm2'] = kingm2
    kingm_3 = []
    kingm3 = 0.0
    bilal3 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem1, todatem1, ])
    for be in bilal3:
        if be.paymmethod=='Cash' and be.category1 == 'Output VAT 5%':
            kingm_3.append(be.totamt)
            kingm3+=float(be.totamt)
    context['kingm3'] = kingm3
    kingm_4 = []
    kingm4 = 0.0
    bilal4 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem2, todatem2, ])
    for be in bilal4:
        if be.paymmethod=='Cash' and be.category1 == 'Output VAT 5%':
            kingm_4.append(be.totamt)
            kingm4+=float(be.totamt)
    context['kingm4'] = kingm4
    kingm_5 = []
    kingm5 = 0.0
    bilal5 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem3, todatem3, ])
    for be in bilal5:
        if be.paymmethod=='Cash' and be.category1 == 'Output VAT 5%':
            kingm_5.append(be.totamt)
            kingm5+=float(be.totamt)
    context['kingm5'] = kingm5
    
    # Service Tax Payable
    kingmq_1=[]
    kingmq1 = 0.0
    bilal = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdate, todate, ])
    for b in bilal:
        if b.paymmethod=='Cash' and b.category1 == 'Service Tax Payable':
            kingmq_1.append(b.totamt)
            kingmq1+=float(b.totamt)
    context['kingmq1'] = kingmq1
    kingmq_2 = []
    kingmq2 = 0.0
    bilal2 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem, todatem, ])
    for bi in bilal2:
        if bi.paymmethod=='Cash' and bi.category1 == 'Service Tax Payable':
            kingmq_2.append(bi.totamt)
            kingmq2+=float(bi.totamt)
    context['kingmq2'] = kingmq2
    kingmq_3 = []
    kingmq3 = 0.0
    bilal3 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem1, todatem1, ])
    for be in bilal3:
        if be.paymmethod=='Cash' and be.category1 == 'Service Tax Payable':
            kingmq_3.append(be.totamt)
            kingmq3+=float(be.totamt)
    context['kingmq3'] = kingmq3
    kingmq_4 = []
    kingmq4 = 0.0
    bilal4 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem2, todatem2, ])
    for be in bilal4:
        if be.paymmethod=='Cash' and be.category1 == 'Service Tax Payable':
            kingmq_4.append(be.totamt)
            kingmq4+=float(be.totamt)
    context['kingmq4'] = kingmq4
    kingmq_5 = []
    kingmq5 = 0.0
    bilal5 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem3, todatem3, ])
    for be in bilal5:
        if be.paymmethod=='Cash' and be.category1 == 'Service Tax Payable':
            kingmq_5.append(be.totamt)
            kingmq5+=float(be.totamt)
    context['kingmq5'] = kingmq5
    
    # Service Tax Suspense
    kingmw_1=[]
    kingmw1 = 0.0
    bilal = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdate, todate, ])
    for b in bilal:
        if b.paymmethod=='Cash' and b.category1 == 'Service Tax Suspense':
            kingmw_1.append(b.totamt)
            kingmw1+=float(b.totamt)
    context['kingmw1'] = kingmw1
    kingmw_2 = []
    kingmw2 = 0.0
    bilal2 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem, todatem, ])
    for bi in bilal2:
        if bi.paymmethod=='Cash' and bi.category1 == 'Service Tax Suspense':
            kingmw_2.append(bi.totamt)
            kingmw2+=float(bi.totamt)
    context['kingmw2'] = kingmw2
    kingmw_3 = []
    kingmw3 = 0.0
    bilal3 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem1, todatem1, ])
    for be in bilal3:
        if be.paymmethod=='Cash' and be.category1 == 'Service Tax Suspense':
            kingmw_3.append(be.totamt)
            kingmw3+=float(be.totamt)
    context['kingmw3'] = kingmw3
    kingmw_4 = []
    kingmw4 = 0.0
    bilal4 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem2, todatem2, ])
    for be in bilal4:
        if be.paymmethod=='Cash' and be.category1 == 'Service Tax Suspense':
            kingmw_4.append(be.totamt)
            kingmw4+=float(be.totamt)
    context['kingmw4'] = kingmw4
    kingmw_5 = []
    kingmw5 = 0.0
    bilal5 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem3, todatem3, ])
    for be in bilal5:
        if be.paymmethod=='Cash' and be.category1 == 'Service Tax Suspense':
            kingmw_5.append(be.totamt)
            kingmw5+=float(be.totamt)
    context['kingmw5'] = kingmw5
    
    # SGST Payable
    kingme_1=[]
    kingme1 = 0.0
    bilal = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdate, todate, ])
    for b in bilal:
        if b.paymmethod=='Cash' and b.category1 == 'SGST Payable':
            kingme_1.append(b.totamt)
            kingme1+=float(b.totamt)
    context['kingme1'] = kingme1
    kingme_2 = []
    kingme2 = 0.0
    bilal2 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem, todatem, ])
    for bi in bilal2:
        if bi.paymmethod=='Cash' and bi.category1 == 'SGST Payable':
            kingme_2.append(bi.totamt)
            kingme2+=float(bi.totamt)
    context['kingme2'] = kingme2
    kingme_3 = []
    kingme3 = 0.0
    bilal3 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem1, todatem1, ])
    for be in bilal3:
        if be.paymmethod=='Cash' and be.category1 == 'SGST Payable':
            kingme_3.append(be.totamt)
            kingme3+=float(be.totamt)
    context['kingme3'] = kingme3
    kingme_4 = []
    kingme4 = 0.0
    bilal4 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem2, todatem2, ])
    for be in bilal4:
        if be.paymmethod=='Cash' and be.category1 == 'SGST Payable':
            kingme_4.append(be.totamt)
            kingme4+=float(be.totamt)
    context['kingme4'] = kingme4
    kingme_5 = []
    kingme5 = 0.0
    bilal5 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem3, todatem3, ])
    for be in bilal5:
        if be.paymmethod=='Cash' and be.category1 == 'SGST Payable':
            kingme_5.append(be.totamt)
            kingme5+=float(be.totamt)
    context['kingme5'] = kingme5
    
    # Swachh Bharat Cess Payable
    kingmr_1=[]
    kingmr1 = 0.0
    bilal = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdate, todate, ])
    for b in bilal:
        if b.paymmethod=='Cash' and b.category1 == 'Swachh Bharat Cess Payable':
            kingmr_1.append(b.totamt)
            kingmr1+=float(b.totamt)
    context['kingmr1'] = kingmr1
    kingmr_2 = []
    kingmr2 = 0.0
    bilal2 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem, todatem, ])
    for bi in bilal2:
        if bi.paymmethod=='Cash' and bi.category1 == 'Swachh Bharat Cess Payable':
            kingmr_2.append(bi.totamt)
            kingmr2+=float(bi.totamt)
    context['kingmr2'] = kingmr2
    kingmr_3 = []
    kingmr3 = 0.0
    bilal3 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem1, todatem1, ])
    for be in bilal3:
        if be.paymmethod=='Cash' and be.category1 == 'Swachh Bharat Cess Payable':
            kingmr_3.append(be.totamt)
            kingmr3+=float(be.totamt)
    context['kingmr3'] = kingmr3
    kingmr_4 = []
    kingmr4 = 0.0
    bilal4 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem2, todatem2, ])
    for be in bilal4:
        if be.paymmethod=='Cash' and be.category1 == 'Swachh Bharat Cess Payable':
            kingmr_4.append(be.totamt)
            kingmr4+=float(be.totamt)
    context['kingmr4'] = kingmr4
    kingmr_5 = []
    kingmr5 = 0.0
    bilal5 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem3, todatem3, ])
    for be in bilal5:
        if be.paymmethod=='Cash' and be.category1 == 'Swachh Bharat Cess Payable':
            kingmr_5.append(be.totamt)
            kingmr5+=float(be.totamt)
    context['kingmr5'] = kingmr5
    
    # Swachh Bharat Cess Suspense
    kingmt_1=[]
    kingmt1 = 0.0
    bilal = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdate, todate, ])
    for b in bilal:
        if b.paymmethod=='Cash' and b.category1 == 'Swachh Bharat Cess Suspense':
            kingmt_1.append(b.totamt)
            kingmt1+=float(b.totamt)
    context['kingmt1'] = kingmt1
    kingmt_2 = []
    kingmt2 = 0.0
    bilal2 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem, todatem, ])
    for bi in bilal2:
        if bi.paymmethod=='Cash' and bi.category1 == 'Swachh Bharat Cess Suspense':
            kingmt_2.append(bi.totamt)
            kingmt2+=float(bi.totamt)
    context['kingmt2'] = kingmt2
    kingmt_3 = []
    kingmt3 = 0.0
    bilal3 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem1, todatem1, ])
    for be in bilal3:
        if be.paymmethod=='Cash' and be.category1 == 'Swachh Bharat Cess Suspense':
            kingmt_3.append(be.totamt)
            kingmt3+=float(be.totamt)
    context['kingmt3'] = kingmt3
    kingmt_4 = []
    kingmt4 = 0.0
    bilal4 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem2, todatem2, ])
    for be in bilal4:
        if be.paymmethod=='Cash' and be.category1 == 'Swachh Bharat Cess Suspense':
            kingmt_4.append(be.totamt)
            kingmt4+=float(be.totamt)
    context['kingmt4'] = kingmt4
    kingmt_5 = []
    kingmt5 = 0.0
    bilal5 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem3, todatem3, ])
    for be in bilal5:
        if be.paymmethod=='Cash' and be.category1 == 'Swachh Bharat Cess Suspense':
            kingmt_5.append(be.totamt)
            kingmt5+=float(be.totamt)
    context['kingmt5'] = kingmt5
    
    # TDS Payable
    kingmy_1=[]
    kingmy1 = 0.0
    bilal = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdate, todate, ])
    for b in bilal:
        if b.paymmethod=='Cash' and b.category1 == 'TDS Payable':
            kingmy_1.append(b.totamt)
            kingmy1+=float(b.totamt)
    context['kingmy1'] = kingmy1
    kingmy_2 = []
    kingmy2 = 0.0
    bilal2 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem, todatem, ])
    for bi in bilal2:
        if bi.paymmethod=='Cash' and bi.category1 == 'TDS Payable':
            kingmy_2.append(bi.totamt)
            kingmy2+=float(bi.totamt)
    context['kingmy2'] = kingmy2
    kingmy_3 = []
    kingmy3 = 0.0
    bilal3 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem1, todatem1, ])
    for be in bilal3:
        if be.paymmethod=='Cash' and be.category1 == 'TDS Payable':
            kingmy_3.append(be.totamt)
            kingmy3+=float(be.totamt)
    context['kingmy3'] = kingmy3
    kingmy_4 = []
    kingmy4 = 0.0
    bilal4 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem2, todatem2, ])
    for be in bilal4:
        if be.paymmethod=='Cash' and be.category1 == 'TDS Payable':
            kingmy_4.append(be.totamt)
            kingmy4+=float(be.totamt)
    context['kingmy4'] = kingmy4
    kingmy_5 = []
    kingmy5 = 0.0
    bilal5 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem3, todatem3, ])
    for be in bilal5:
        if be.paymmethod=='Cash' and be.category1 == 'TDS Payable':
            kingmy_5.append(be.totamt)
            kingmy5+=float(be.totamt)
    context['kingmy5'] = kingmy5
    
    # VAT Suspense
    kingmu_1=[]
    kingmu1 = 0.0
    bilal = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdate, todate, ])
    for b in bilal:
        if b.paymmethod=='Cash' and b.category1 == 'VAT Suspense':
            kingmu_1.append(b.totamt)
            kingmu1+=float(b.totamt)
    context['kingmu1'] = kingmu1
    kingmu_2 = []
    kingmu2 = 0.0
    bilal2 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem, todatem, ])
    for bi in bilal2:
        if bi.paymmethod=='Cash' and bi.category1 == 'VAT Suspense':
            kingmu_2.append(bi.totamt)
            kingmu2+=float(bi.totamt)
    context['kingmu2'] = kingmu2
    kingmu_3 = []
    kingmu3 = 0.0
    bilal3 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem1, todatem1, ])
    for be in bilal3:
        if be.paymmethod=='Cash' and be.category1 == 'VAT Suspense':
            kingmu_3.append(be.totamt)
            kingmu3+=float(be.totamt)
    context['kingmu3'] = kingmu3
    kingmu_4 = []
    kingmu4 = 0.0
    bilal4 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem2, todatem2, ])
    for be in bilal4:
        if be.paymmethod=='Cash' and be.category1 == 'VAT Suspense':
            kingmu_4.append(be.totamt)
            kingmu4+=float(be.totamt)
    context['kingmu4'] = kingmu4
    kingmu_5 = []
    kingmu5 = 0.0
    bilal5 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem3, todatem3, ])
    for be in bilal5:
        if be.paymmethod=='Cash' and be.category1 == 'VAT Suspense':
            kingmu_5.append(be.totamt)
            kingmu5+=float(be.totamt)
    context['kingmu5'] = kingmu5
    
    # Opening Balance Equity
    kingmi_1=[]
    kingmi1 = 0.0
    bilal = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdate, todate, ])
    for b in bilal:
        if b.paymmethod=='Cash' and b.category1 == 'Opening Balance Equity':
            kingmi_1.append(b.totamt)
            kingmi1+=float(b.totamt)
    context['kingmi1'] = kingmi1
    kingmi_2 = []
    kingmi2 = 0.0
    bilal2 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem, todatem, ])
    for bi in bilal2:
        if bi.paymmethod=='Cash' and bi.category1 == 'Opening Balance Equity':
            kingmi_2.append(bi.totamt)
            kingmi2+=float(bi.totamt)
    context['kingmi2'] = kingmi2
    kingmi_3 = []
    kingmi3 = 0.0
    bilal3 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem1, todatem1, ])
    for be in bilal3:
        if be.paymmethod=='Cash' and be.category1 == 'Opening Balance Equity':
            kingmi_3.append(be.totamt)
            kingmi3+=float(be.totamt)
    context['kingmi3'] = kingmi3
    kingmi_4 = []
    kingmi4 = 0.0
    bilal4 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem2, todatem2, ])
    for be in bilal4:
        if be.paymmethod=='Cash' and be.category1 == 'Opening Balance Equity':
            kingmi_4.append(be.totamt)
            kingmi4+=float(be.totamt)
    context['kingmi4'] = kingmi4
    kingmi_5 = []
    kingmi5 = 0.0
    bilal5 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem3, todatem3, ])
    for be in bilal5:
        if be.paymmethod=='Cash' and be.category1 == 'Opening Balance Equity':
            kingmi_5.append(be.totamt)
            kingmi5+=float(be.totamt)
    context['kingmi5'] = kingmi5
    
    # Retained Earnings
    kingmo_1=[]
    kingmo1 = 0.0
    bilal = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdate, todate, ])
    for b in bilal:
        if b.paymmethod=='Cash' and b.category1 == 'Retained Earnings':
            kingmo_1.append(b.totamt)
            kingmo1+=float(b.totamt)
    context['kingmo1'] = kingmo1
    kingmo_2 = []
    kingmo2 = 0.0
    bilal2 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem, todatem, ])
    for bi in bilal2:
        if bi.paymmethod=='Cash' and bi.category1 == 'Retained Earnings':
            kingmo_2.append(bi.totamt)
            kingmo2+=float(bi.totamt)
    context['kingmo2'] = kingmo2
    kingmo_3 = []
    kingmo3 = 0.0
    bilal3 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem1, todatem1, ])
    for be in bilal3:
        if be.paymmethod=='Cash' and be.category1 == 'Retained Earnings':
            kingmo_3.append(be.totamt)
            kingmo3+=float(be.totamt)
    context['kingmo3'] = kingmo3
    kingmo_4 = []
    kingmo4 = 0.0
    bilal4 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem2, todatem2, ])
    for be in bilal4:
        if be.paymmethod=='Cash' and be.category1 == 'Retained Earnings':
            kingmo_4.append(be.totamt)
            kingmo4+=float(be.totamt)
    context['kingmo4'] = kingmo4
    kingmo_5 = []
    kingmo5 = 0.0
    bilal5 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem3, todatem3, ])
    for be in bilal5:
        if be.paymmethod=='Cash' and be.category1 == 'Retained Earnings':
            kingmo_5.append(be.totamt)
            kingmo5+=float(be.totamt)
    context['kingmo5'] = kingmo5
    
    # Billable Expense Income
    kingmp_1=[]
    kingmp1 = 0.0
    bilal = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdate, todate, ])
    for b in bilal:
        if b.paymmethod=='Cash' and b.category1 == 'Billable Expense Income':
            kingmp_1.append(b.totamt)
            kingmp1+=float(b.totamt)
    context['kingmp1'] = kingmp1
    kingmp_2 = []
    kingmp2 = 0.0
    bilal2 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem, todatem, ])
    for bi in bilal2:
        if bi.paymmethod=='Cash' and bi.category1 == 'Billable Expense Income':
            kingmp_2.append(bi.totamt)
            kingmp2+=float(bi.totamt)
    context['kingmp2'] = kingmp2
    kingmp_3 = []
    kingmp3 = 0.0
    bilal3 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem1, todatem1, ])
    for be in bilal3:
        if be.paymmethod=='Cash' and be.category1 == 'Billable Expense Income':
            kingmp_3.append(be.totamt)
            kingmp3+=float(be.totamt)
    context['kingmp3'] = kingmp3
    kingmp_4 = []
    kingmp4 = 0.0
    bilal4 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem2, todatem2, ])
    for be in bilal4:
        if be.paymmethod=='Cash' and be.category1 == 'Billable Expense Income':
            kingmp_4.append(be.totamt)
            kingmp4+=float(be.totamt)
    context['kingmp4'] = kingmp4
    kingmp_5 = []
    kingmp5 = 0.0
    bilal5 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem3, todatem3, ])
    for be in bilal5:
        if be.paymmethod=='Cash' and be.category1 == 'Billable Expense Income':
            kingmp_5.append(be.totamt)
            kingmp5+=float(be.totamt)
    context['kingmp5'] = kingmp5
    
    # Consulting Income
    kingma_1=[]
    kingma1 = 0.0
    bilal = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdate, todate, ])
    for b in bilal:
        if b.paymmethod=='Cash' and b.category1 == 'Consulting Income':
            kingma_1.append(b.totamt)
            kingma1+=float(b.totamt)
    context['kingma1'] = kingma1
    kingma_2 = []
    kingma2 = 0.0
    bilal2 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem, todatem, ])
    for bi in bilal2:
        if bi.paymmethod=='Cash' and bi.category1 == 'Consulting Income':
            kingma_2.append(bi.totamt)
            kingma2+=float(bi.totamt)
    context['kingma2'] = kingma2
    kingma_3 = []
    kingma3 = 0.0
    bilal3 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem1, todatem1, ])
    for be in bilal3:
        if be.paymmethod=='Cash' and be.category1 == 'Consulting Income':
            kingma_3.append(be.totamt)
            kingma3+=float(be.totamt)
    context['kingma3'] = kingma3
    kingma_4 = []
    kingma4 = 0.0
    bilal4 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem2, todatem2, ])
    for be in bilal4:
        if be.paymmethod=='Cash' and be.category1 == 'Consulting Income':
            kingma_4.append(be.totamt)
            kingma4+=float(be.totamt)
    context['kingma4'] = kingma4
    kingma_5 = []
    kingma5 = 0.0
    bilal5 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem3, todatem3, ])
    for be in bilal5:
        if be.paymmethod=='Cash' and be.category1 == 'Consulting Income':
            kingma_5.append(be.totamt)
            kingma5+=float(be.totamt)
    context['kingma5'] = kingma5
    
    # Product Sales
    kingms_1=[]
    kingms1 = 0.0
    bilal = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdate, todate, ])
    for b in bilal:
        if b.paymmethod=='Cash' and b.category1 == 'Product Sales':
            kingms_1.append(b.totamt)
            kingms1+=float(b.totamt)
    context['kingms1'] = kingms1
    kingms_2 = []
    kingms2 = 0.0
    bilal2 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem, todatem, ])
    for bi in bilal2:
        if bi.paymmethod=='Cash' and bi.category1 == 'Product Sales':
            kingms_2.append(bi.totamt)
            kingms2+=float(bi.totamt)
    context['kingms2'] = kingms2
    kingms_3 = []
    kingms3 = 0.0
    bilal3 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem1, todatem1, ])
    for be in bilal3:
        if be.paymmethod=='Cash' and be.category1 == 'Product Sales':
            kingms_3.append(be.totamt)
            kingms3+=float(be.totamt)
    context['kingms3'] = kingms3
    kingms_4 = []
    kingms4 = 0.0
    bilal4 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem2, todatem2, ])
    for be in bilal4:
        if be.paymmethod=='Cash' and be.category1 == 'Product Sales':
            kingms_4.append(be.totamt)
            kingms4+=float(be.totamt)
    context['kingms4'] = kingms4
    kingms_5 = []
    kingms5 = 0.0
    bilal5 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem3, todatem3, ])
    for be in bilal5:
        if be.paymmethod=='Cash' and be.category1 == 'Product Sales':
            kingms_5.append(be.totamt)
            kingms5+=float(be.totamt)
    context['kingms5'] = kingms5
    
    # Sales
    kingmd_1=[]
    kingmd1 = 0.0
    bilal = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdate, todate, ])
    for b in bilal:
        if b.paymmethod=='Cash' and b.category1 == 'Sales':
            kingmd_1.append(b.totamt)
            kingmd1+=float(b.totamt)
    context['kingmd1'] = kingmd1
    kingmd_2 = []
    kingmd2 = 0.0
    bilal2 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem, todatem, ])
    for bi in bilal2:
        if bi.paymmethod=='Cash' and bi.category1 == 'Sales':
            kingmd_2.append(bi.totamt)
            kingmd2+=float(bi.totamt)
    context['kingmd2'] = kingmd2
    kingmd_3 = []
    kingmd3 = 0.0
    bilal3 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem1, todatem1, ])
    for be in bilal3:
        if be.paymmethod=='Cash' and be.category1 == 'Sales':
            kingmd_3.append(be.totamt)
            kingmd3+=float(be.totamt)
    context['kingmd3'] = kingmd3
    kingmd_4 = []
    kingmd4 = 0.0
    bilal4 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem2, todatem2, ])
    for be in bilal4:
        if be.paymmethod=='Cash' and be.category1 == 'Sales':
            kingmd_4.append(be.totamt)
            kingmd4+=float(be.totamt)
    context['kingmd4'] = kingmd4
    kingmd_5 = []
    kingmd5 = 0.0
    bilal5 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem3, todatem3, ])
    for be in bilal5:
        if be.paymmethod=='Cash' and be.category1 == 'Sales':
            kingmd_5.append(be.totamt)
            kingmd5+=float(be.totamt)
    context['kingmd5'] = kingmd5
    
    # Sales - Hardware
    kingmf_1=[]
    kingmf1 = 0.0
    bilal = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdate, todate, ])
    for b in bilal:
        if b.paymmethod=='Cash' and b.category1 == 'Sales - Hardware':
            kingmf_1.append(b.totamt)
            kingmf1+=float(b.totamt)
    context['kingmf1'] = kingmf1
    kingmf_2 = []
    kingmf2 = 0.0
    bilal2 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem, todatem, ])
    for bi in bilal2:
        if bi.paymmethod=='Cash' and bi.category1 == 'Sales - Hardware':
            kingmf_2.append(bi.totamt)
            kingmf2+=float(bi.totamt)
    context['kingmf2'] = kingmf2
    kingmf_3 = []
    kingmf3 = 0.0
    bilal3 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem1, todatem1, ])
    for be in bilal3:
        if be.paymmethod=='Cash' and be.category1 == 'Sales - Hardware':
            kingmf_3.append(be.totamt)
            kingmf3+=float(be.totamt)
    context['kingmf3'] = kingmf3
    kingmf_4 = []
    kingmf4 = 0.0
    bilal4 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem2, todatem2, ])
    for be in bilal4:
        if be.paymmethod=='Cash' and be.category1 == 'Sales - Hardware':
            kingmf_4.append(be.totamt)
            kingmf4+=float(be.totamt)
    context['kingmf4'] = kingmf4
    kingmf_5 = []
    kingmf5 = 0.0
    bilal5 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem3, todatem3, ])
    for be in bilal5:
        if be.paymmethod=='Cash' and be.category1 == 'Sales - Hardware':
            kingmf_5.append(be.totamt)
            kingmf5+=float(be.totamt)
    context['kingmf5'] = kingmf5
    
    # Sales - Software
    kingmg_1=[]
    kingmg1 = 0.0
    bilal = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdate, todate, ])
    for b in bilal:
        if b.paymmethod=='Cash' and b.category1 == 'Sales - Software':
            kingmg_1.append(b.totamt)
            kingmg1+=float(b.totamt)
    context['kingmg1'] = kingmg1
    kingmg_2 = []
    kingmg2 = 0.0
    bilal2 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem, todatem, ])
    for bi in bilal2:
        if bi.paymmethod=='Cash' and bi.category1 == 'Sales - Software':
            kingmg_2.append(bi.totamt)
            kingmg2+=float(bi.totamt)
    context['kingmg2'] = kingmg2
    kingmg_3 = []
    kingmg3 = 0.0
    bilal3 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem1, todatem1, ])
    for be in bilal3:
        if be.paymmethod=='Cash' and be.category1 == 'Sales - Software':
            kingmg_3.append(be.totamt)
            kingmg3+=float(be.totamt)
    context['kingmg3'] = kingmg3
    kingmg_4 = []
    kingmg4 = 0.0
    bilal4 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem2, todatem2, ])
    for be in bilal4:
        if be.paymmethod=='Cash' and be.category1 == 'Sales - Software':
            kingmg_4.append(be.totamt)
            kingmg4+=float(be.totamt)
    context['kingmg4'] = kingmg4
    kingmg_5 = []
    kingmg5 = 0.0
    bilal5 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem3, todatem3, ])
    for be in bilal5:
        if be.paymmethod=='Cash' and be.category1 == 'Sales - Software':
            kingmg_5.append(be.totamt)
            kingmg5+=float(be.totamt)
    context['kingmg5'] = kingmg5
    
    # Sales - Support and Maintenance
    kingmh_1=[]
    kingmh1 = 0.0
    bilal = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdate, todate, ])
    for b in bilal:
        if b.paymmethod=='Cash' and b.category1 == 'Sales - Support and Maintenance':
            kingmh_1.append(b.totamt)
            kingmh1+=float(b.totamt)
    context['kingmh1'] = kingmh1
    kingmh_2 = []
    kingmh2 = 0.0
    bilal2 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem, todatem, ])
    for bi in bilal2:
        if bi.paymmethod=='Cash' and bi.category1 == 'Sales - Support and Maintenance':
            kingmh_2.append(bi.totamt)
            kingmh2+=float(bi.totamt)
    context['kingmh2'] = kingmh2
    kingmh_3 = []
    kingmh3 = 0.0
    bilal3 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem1, todatem1, ])
    for be in bilal3:
        if be.paymmethod=='Cash' and be.category1 == 'Sales - Support and Maintenance':
            kingmh_3.append(be.totamt)
            kingmh3+=float(be.totamt)
    context['kingmh3'] = kingmh3
    kingmh_4 = []
    kingmh4 = 0.0
    bilal4 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem2, todatem2, ])
    for be in bilal4:
        if be.paymmethod=='Cash' and be.category1 == 'Sales - Support and Maintenance':
            kingmh_4.append(be.totamt)
            kingmh4+=float(be.totamt)
    context['kingmh4'] = kingmh4
    kingmh_5 = []
    kingmh5 = 0.0
    bilal5 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem3, todatem3, ])
    for be in bilal5:
        if be.paymmethod=='Cash' and be.category1 == 'Sales - Support and Maintenance':
            kingmh_5.append(be.totamt)
            kingmh5+=float(be.totamt)
    context['kingmh5'] = kingmh5
    
    # Sales Discounts
    kingmj_1=[]
    kingmj1 = 0.0
    bilal = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdate, todate, ])
    for b in bilal:
        if b.paymmethod=='Cash' and b.category1 == 'Sales Discounts':
            kingmj_1.append(b.totamt)
            kingmj1+=float(b.totamt)
    context['kingmj1'] = kingmj1
    kingmj_2 = []
    kingmj2 = 0.0
    bilal2 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem, todatem, ])
    for bi in bilal2:
        if bi.paymmethod=='Cash' and bi.category1 == 'Sales Discounts':
            kingmj_2.append(bi.totamt)
            kingmj2+=float(bi.totamt)
    context['kingmj2'] = kingmj2
    kingmj_3 = []
    kingmj3 = 0.0
    bilal3 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem1, todatem1, ])
    for be in bilal3:
        if be.paymmethod=='Cash' and be.category1 == 'Sales Discounts':
            kingmj_3.append(be.totamt)
            kingmj3+=float(be.totamt)
    context['kingmj3'] = kingmj3
    kingmj_4 = []
    kingmj4 = 0.0
    bilal4 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem2, todatem2, ])
    for be in bilal4:
        if be.paymmethod=='Cash' and be.category1 == 'Sales Discounts':
            kingmj_4.append(be.totamt)
            kingmj4+=float(be.totamt)
    context['kingmj4'] = kingmj4
    kingmj_5 = []
    kingmj5 = 0.0
    bilal5 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem3, todatem3, ])
    for be in bilal5:
        if be.paymmethod=='Cash' and be.category1 == 'Sales Discounts':
            kingmj_5.append(be.totamt)
            kingmj5+=float(be.totamt)
    context['kingmj5'] = kingmj5
    
    # Sales of Product Income
    kingmk_1=[]
    kingmk1 = 0.0
    bilal = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdate, todate, ])
    for b in bilal:
        if b.paymmethod=='Cash' and b.category1 == 'Sales of Product Income':
            kingmk_1.append(b.totamt)
            kingmk1+=float(b.totamt)
    context['kingmk1'] = kingmk1
    kingmk_2 = []
    kingmk2 = 0.0
    bilal2 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem, todatem, ])
    for bi in bilal2:
        if bi.paymmethod=='Cash' and bi.category1 == 'Sales of Product Income':
            kingmk_2.append(bi.totamt)
            kingmk2+=float(bi.totamt)
    context['kingmk2'] = kingmk2
    kingmk_3 = []
    kingmk3 = 0.0
    bilal3 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem1, todatem1, ])
    for be in bilal3:
        if be.paymmethod=='Cash' and be.category1 == 'Sales of Product Incomes':
            kingmk_3.append(be.totamt)
            kingmk3+=float(be.totamt)
    context['kingmk3'] = kingmk3
    kingmk_4 = []
    kingmk4 = 0.0
    bilal4 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem2, todatem2, ])
    for be in bilal4:
        if be.paymmethod=='Cash' and be.category1 == 'Sales of Product Income':
            kingmk_4.append(be.totamt)
            kingmk4+=float(be.totamt)
    context['kingmk4'] = kingmk4
    kingmk_5 = []
    kingmk5 = 0.0
    bilal5 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem3, todatem3, ])
    for be in bilal5:
        if be.paymmethod=='Cash' and be.category1 == 'Sales of Product Income':
            kingmk_5.append(be.totamt)
            kingmk5+=float(be.totamt)
    context['kingmk5'] = kingmk5
    
    # Uncategorised Income
    kingml_1=[]
    kingml1 = 0.0
    bilal = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdate, todate, ])
    for b in bilal:
        if b.paymmethod=='Cash' and b.category1 == 'Uncategorised Income':
            kingml_1.append(b.totamt)
            kingml1+=float(b.totamt)
    context['kingml1'] = kingml1
    kingml_2 = []
    kingml2 = 0.0
    bilal2 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem, todatem, ])
    for bi in bilal2:
        if bi.paymmethod=='Cash' and bi.category1 == 'Uncategorised Income':
            kingml_2.append(bi.totamt)
            kingml2+=float(bi.totamt)
    context['kingml2'] = kingml2
    kingml_3 = []
    kingml3 = 0.0
    bilal3 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem1, todatem1, ])
    for be in bilal3:
        if be.paymmethod=='Cash' and be.category1 == 'Uncategorised Income':
            kingml_3.append(be.totamt)
            kingml3+=float(be.totamt)
    context['kingml3'] = kingml3
    kingml_4 = []
    kingml4 = 0.0
    bilal4 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem2, todatem2, ])
    for be in bilal4:
        if be.paymmethod=='Cash' and be.category1 == 'Uncategorised Income':
            kingml_4.append(be.totamt)
            kingml4+=float(be.totamt)
    context['kingml4'] = kingml4
    kingml_5 = []
    kingml5 = 0.0
    bilal5 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem3, todatem3, ])
    for be in bilal5:
        if be.paymmethod=='Cash' and be.category1 == 'Uncategorised Income':
            kingml_5.append(be.totamt)
            kingml5+=float(be.totamt)
    context['kingml5'] = kingml5
    
    # Cost of sales
    kingmz_1=[]
    kingmz1 = 0.0
    bilal = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdate, todate, ])
    for b in bilal:
        if b.paymmethod=='Cash' and b.category1 == 'Cost of sales':
            kingmz_1.append(b.totamt)
            kingmz1+=float(b.totamt)
    context['kingmz1'] = kingmz1
    kingmz_2 = []
    kingmz2 = 0.0
    bilal2 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem, todatem, ])
    for bi in bilal2:
        if bi.paymmethod=='Cash' and bi.category1 == 'Cost of sales':
            kingmz_2.append(bi.totamt)
            kingmz2+=float(bi.totamt)
    context['kingmz2'] = kingmz2
    kingmz_3 = []
    kingmz3 = 0.0
    bilal3 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem1, todatem1, ])
    for be in bilal3:
        if be.paymmethod=='Cash' and be.category1 == 'Cost of sales':
            kingmz_3.append(be.totamt)
            kingmz3+=float(be.totamt)
    context['kingmz3'] = kingmz3
    kingmz_4 = []
    kingmz4 = 0.0
    bilal4 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem2, todatem2, ])
    for be in bilal4:
        if be.paymmethod=='Cash' and be.category1 == 'Cost of sales':
            kingmz_4.append(be.totamt)
            kingmz4+=float(be.totamt)
    context['kingmz4'] = kingmz4
    kingmz_5 = []
    kingmz5 = 0.0
    bilal5 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem3, todatem3, ])
    for be in bilal5:
        if be.paymmethod=='Cash' and be.category1 == 'Cost of sales':
            kingmz_5.append(be.totamt)
            kingmz5+=float(be.totamt)
    context['kingmz5'] = kingmz5
    
    # Equipment Rental for Jobs
    kingmx_1=[]
    kingmx1 = 0.0
    bilal = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdate, todate, ])
    for b in bilal:
        if b.paymmethod=='Cash' and b.category1 == 'Equipment Rental for Jobs':
            kingmx_1.append(b.totamt)
            kingmx1+=float(b.totamt)
    context['kingmx1'] = kingmx1
    kingmx_2 = []
    kingmx2 = 0.0
    bilal2 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem, todatem, ])
    for bi in bilal2:
        if bi.paymmethod=='Cash' and bi.category1 == 'Equipment Rental for Jobs':
            kingmx_2.append(bi.totamt)
            kingmx2+=float(bi.totamt)
    context['kingmx2'] = kingmx2
    kingmx_3 = []
    kingmx3 = 0.0
    bilal3 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem1, todatem1, ])
    for be in bilal3:
        if be.paymmethod=='Cash' and be.category1 == 'Equipment Rental for Jobs':
            kingmx_3.append(be.totamt)
            kingmx3+=float(be.totamt)
    context['kingmx3'] = kingmx3
    kingmx_4 = []
    kingmx4 = 0.0
    bilal4 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem2, todatem2, ])
    for be in bilal4:
        if be.paymmethod=='Cash' and be.category1 == 'Equipment Rental for Jobs':
            kingmx_4.append(be.totamt)
            kingmx4+=float(be.totamt)
    context['kingmx4'] = kingmx4
    kingmx_5 = []
    kingmx5 = 0.0
    bilal5 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem3, todatem3, ])
    for be in bilal5:
        if be.paymmethod=='Cash' and be.category1 == 'Equipment Rental for Jobs':
            kingmx_5.append(be.totamt)
            kingmx5+=float(be.totamt)
    context['kingmx5'] = kingmx5
    
    # Freight and Shipping Costs
    kingmc_1=[]
    kingmc1 = 0.0
    bilal = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdate, todate, ])
    for b in bilal:
        if b.paymmethod=='Cash' and b.category1 == 'Freight and Shipping Costs':
            kingmc_1.append(b.totamt)
            kingmc1+=float(b.totamt)
    context['kingmc1'] = kingmc1
    kingmc_2 = []
    kingmc2 = 0.0
    bilal2 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem, todatem, ])
    for bi in bilal2:
        if bi.paymmethod=='Cash' and bi.category1 == 'Freight and Shipping Costs':
            kingmc_2.append(bi.totamt)
            kingmc2+=float(bi.totamt)
    context['kingmc2'] = kingmc2
    kingmc_3 = []
    kingmc3 = 0.0
    bilal3 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem1, todatem1, ])
    for be in bilal3:
        if be.paymmethod=='Cash' and be.category1 == 'Freight and Shipping Costs':
            kingmc_3.append(be.totamt)
            kingmc3+=float(be.totamt)
    context['kingmc3'] = kingmc3
    kingmc_4 = []
    kingmc4 = 0.0
    bilal4 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem2, todatem2, ])
    for be in bilal4:
        if be.paymmethod=='Cash' and be.category1 == 'Freight and Shipping Costs':
            kingmc_4.append(be.totamt)
            kingmc4+=float(be.totamt)
    context['kingmc4'] = kingmc4
    kingmc_5 = []
    kingmc5 = 0.0
    bilal5 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem3, todatem3, ])
    for be in bilal5:
        if be.paymmethod=='Cash' and be.category1 == 'Freight and Shipping Costs':
            kingmc_5.append(be.totamt)
            kingmc5+=float(be.totamt)
    context['kingmc5'] = kingmc5
    
    # Merchant Account Fees
    kingmv_1=[]
    kingmv1 = 0.0
    bilal = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdate, todate, ])
    for b in bilal:
        if b.paymmethod=='Cash' and b.category1 == 'Merchant Account Fees':
            kingmv_1.append(b.totamt)
            kingmv1+=float(b.totamt)
    context['kingmv1'] = kingmv1
    kingmv_2 = []
    kingmv2 = 0.0
    bilal2 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem, todatem, ])
    for bi in bilal2:
        if bi.paymmethod=='Cash' and bi.category1 == 'Merchant Account Fees':
            kingmv_2.append(bi.totamt)
            kingmv2+=float(bi.totamt)
    context['kingmv2'] = kingmv2
    kingmv_3 = []
    kingmv3 = 0.0
    bilal3 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem1, todatem1, ])
    for be in bilal3:
        if be.paymmethod=='Cash' and be.category1 == 'Merchant Account Fees':
            kingmv_3.append(be.totamt)
            kingmv3+=float(be.totamt)
    context['kingmv3'] = kingmv3
    kingmv_4 = []
    kingmv4 = 0.0
    bilal4 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem2, todatem2, ])
    for be in bilal4:
        if be.paymmethod=='Cash' and be.category1 == 'Merchant Account Fees':
            kingmv_4.append(be.totamt)
            kingmv4+=float(be.totamt)
    context['kingmv4'] = kingmv4
    kingmv_5 = []
    kingmv5 = 0.0
    bilal5 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem3, todatem3, ])
    for be in bilal5:
        if be.paymmethod=='Cash' and be.category1 == 'Merchant Account Fees':
            kingmv_5.append(be.totamt)
            kingmv5+=float(be.totamt)
    context['kingmv5'] = kingmv5
    
    # Purchases - Hardware for Resale
    kingmb_1=[]
    kingmb1 = 0.0
    bilal = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdate, todate, ])
    for b in bilal:
        if b.paymmethod=='Cash' and b.category1 == 'Purchases - Hardware for Resale':
            kingmb_1.append(b.totamt)
            kingmb1+=float(b.totamt)
    context['kingmb1'] = kingmb1
    kingmb_2 = []
    kingmb2 = 0.0
    bilal2 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem, todatem, ])
    for bi in bilal2:
        if bi.paymmethod=='Cash' and bi.category1 == 'Purchases - Hardware for Resale':
            kingmb_2.append(bi.totamt)
            kingmb2+=float(bi.totamt)
    context['kingmb2'] = kingmb2
    kingmb_3 = []
    kingmb3 = 0.0
    bilal3 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem1, todatem1, ])
    for be in bilal3:
        if be.paymmethod=='Cash' and be.category1 == 'Purchases - Hardware for Resale':
            kingmb_3.append(be.totamt)
            kingmb3+=float(be.totamt)
    context['kingmb3'] = kingmb3
    kingmb_4 = []
    kingmb4 = 0.0
    bilal4 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem2, todatem2, ])
    for be in bilal4:
        if be.paymmethod=='Cash' and be.category1 == 'Purchases - Hardware for Resale':
            kingmb_4.append(be.totamt)
            kingmb4+=float(be.totamt)
    context['kingmb4'] = kingmb4
    kingmb_5 = []
    kingmb5 = 0.0
    bilal5 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem3, todatem3, ])
    for be in bilal5:
        if be.paymmethod=='Cash' and be.category1 == 'Purchases - Hardware for Resale':
            kingmb_5.append(be.totamt)
            kingmb5+=float(be.totamt)
    context['kingmb5'] = kingmb5
    
    # Purchases - Software for Resale
    kingmn_1=[]
    kingmn1 = 0.0
    bilal = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdate, todate, ])
    for b in bilal:
        if b.paymmethod=='Cash' and b.category1 == 'Purchases - Software for Resale':
            kingmn_1.append(b.totamt)
            kingmn1+=float(b.totamt)
    context['kingmn1'] = kingmn1
    kingmn_2 = []
    kingmn2 = 0.0
    bilal2 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem, todatem, ])
    for bi in bilal2:
        if bi.paymmethod=='Cash' and bi.category1 == 'Purchases - Software for Resale':
            kingmn_2.append(bi.totamt)
            kingmn2+=float(bi.totamt)
    context['kingmn2'] = kingmn2
    kingmn_3 = []
    kingmn3 = 0.0
    bilal3 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem1, todatem1, ])
    for be in bilal3:
        if be.paymmethod=='Cash' and be.category1 == 'Purchases - Software for Resale':
            kingmn_3.append(be.totamt)
            kingmn3+=float(be.totamt)
    context['kingmn3'] = kingmn3
    kingmn_4 = []
    kingmn4 = 0.0
    bilal4 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem2, todatem2, ])
    for be in bilal4:
        if be.paymmethod=='Cash' and be.category1 == 'Purchases - Software for Resale':
            kingmn_4.append(be.totamt)
            kingmn4+=float(be.totamt)
    context['kingmn4'] = kingmn4
    kingmn_5 = []
    kingmn5 = 0.0
    bilal5 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem3, todatem3, ])
    for be in bilal5:
        if be.paymmethod=='Cash' and be.category1 == 'Purchases - Software for Resale':
            kingmn_5.append(be.totamt)
            kingmn5+=float(be.totamt)
    context['kingmn5'] = kingmn5
    
    # Subcontracted Services
    kingmm_1=[]
    kingmm1 = 0.0
    bilal = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdate, todate, ])
    for b in bilal:
        if b.paymmethod=='Cash' and b.category1 == 'Subcontracted Services':
            kingmm_1.append(b.totamt)
            kingmm1+=float(b.totamt)
    context['kingmm1'] = kingmm1
    kingmm_2 = []
    kingmm2 = 0.0
    bilal2 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem, todatem, ])
    for bi in bilal2:
        if bi.paymmethod=='Cash' and bi.category1 == 'Subcontracted Services':
            kingmm_2.append(bi.totamt)
            kingmm2+=float(bi.totamt)
    context['kingmm2'] = kingmm2
    kingmm_3 = []
    kingmm3 = 0.0
    bilal3 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem1, todatem1, ])
    for be in bilal3:
        if be.paymmethod=='Cash' and be.category1 == 'Subcontracted Services':
            kingmm_3.append(be.totamt)
            kingmm3+=float(be.totamt)
    context['kingmm3'] = kingmm3
    kingmm_4 = []
    kingmm4 = 0.0
    bilal4 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem2, todatem2, ])
    for be in bilal4:
        if be.paymmethod=='Cash' and be.category1 == 'Subcontracted Services':
            kingmm_4.append(be.totamt)
            kingmm4+=float(be.totamt)
    context['kingmm4'] = kingmm4
    kingmm_5 = []
    kingmm5 = 0.0
    bilal5 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem3, todatem3, ])
    for be in bilal5:
        if be.paymmethod=='Cash' and be.category1 == 'Subcontracted Services':
            kingmm_5.append(be.totamt)
            kingmm5+=float(be.totamt)
    context['kingmm5'] = kingmm5
    
    # Tools and Craft Supplies
    kingsq_1=[]
    kingsq1 = 0.0
    bilal = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdate, todate, ])
    for b in bilal:
        if b.paymmethod=='Cash' and b.category1 == 'Tools and Craft Supplies':
            kingsq_1.append(b.totamt)
            kingsq1+=float(b.totamt)
    context['kingsq1'] = kingsq1
    kingsq_2 = []
    kingsq2 = 0.0
    bilal2 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem, todatem, ])
    for bi in bilal2:
        if bi.paymmethod=='Cash' and bi.category1 == 'Tools and Craft Supplies':
            kingsq_2.append(bi.totamt)
            kingsq2+=float(bi.totamt)
    context['kingsq2'] = kingsq2
    kingsq_3 = []
    kingsq3 = 0.0
    bilal3 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem1, todatem1, ])
    for be in bilal3:
        if be.paymmethod=='Cash' and be.category1 == 'Tools and Craft Supplies':
            kingsq_3.append(be.totamt)
            kingsq3+=float(be.totamt)
    context['kingsq3'] = kingsq3
    kingsq_4 = []
    kingsq4 = 0.0
    bilal4 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem2, todatem2, ])
    for be in bilal4:
        if be.paymmethod=='Cash' and be.category1 == 'Tools and Craft Supplies':
            kingsq_4.append(be.totamt)
            kingsq4+=float(be.totamt)
    context['kingsq4'] = kingsq4
    kingsq_5 = []
    kingsq5 = 0.0
    bilal5 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem3, todatem3, ])
    for be in bilal5:
        if be.paymmethod=='Cash' and be.category1 == 'Tools and Craft Supplies':
            kingsq_5.append(be.totamt)
            kingsq5+=float(be.totamt)
    context['kingsq5'] = kingsq5
    
    # Finance Charge Income
    kingsw_1=[]
    kingsw1 = 0.0
    bilal = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdate, todate, ])
    for b in bilal:
        if b.paymmethod=='Cash' and b.category1 == 'Finance Charge Income':
            kingsw_1.append(b.totamt)
            kingsw1+=float(b.totamt)
    context['kingsw1'] = kingsw1
    kingsw_2 = []
    kingsw2 = 0.0
    bilal2 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem, todatem, ])
    for bi in bilal2:
        if bi.paymmethod=='Cash' and bi.category1 == 'Finance Charge Income':
            kingsw_2.append(bi.totamt)
            kingsw2+=float(bi.totamt)
    context['kingsw2'] = kingsw2
    kingsw_3 = []
    kingsw3 = 0.0
    bilal3 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem1, todatem1, ])
    for be in bilal3:
        if be.paymmethod=='Cash' and be.category1 == 'Finance Charge Income':
            kingsw_3.append(be.totamt)
            kingsw3+=float(be.totamt)
    context['kingsw3'] = kingsw3
    kingsw_4 = []
    kingsw4 = 0.0
    bilal4 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem2, todatem2, ])
    for be in bilal4:
        if be.paymmethod=='Cash' and be.category1 == 'Finance Charge Income':
            kingsw_4.append(be.totamt)
            kingsw4+=float(be.totamt)
    context['kingsw4'] = kingsw4
    kingsw_5 = []
    kingsw5 = 0.0
    bilal5 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem3, todatem3, ])
    for be in bilal5:
        if be.paymmethod=='Cash' and be.category1 == 'Finance Charge Income':
            kingsw_5.append(be.totamt)
            kingsw5+=float(be.totamt)
    context['kingsw5'] = kingsw5
    
    # Insurance Proceeds Received
    kingse_1=[]
    kingse1 = 0.0
    bilal = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdate, todate, ])
    for b in bilal:
        if b.paymmethod=='Cash' and b.category1 == 'Insurance Proceeds Received':
            kingse_1.append(b.totamt)
            kingse1+=float(b.totamt)
    context['kingse1'] = kingse1
    kingse_2 = []
    kingse2 = 0.0
    bilal2 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem, todatem, ])
    for bi in bilal2:
        if bi.paymmethod=='Cash' and bi.category1 == 'Insurance Proceeds Received':
            kingse_2.append(bi.totamt)
            kingse2+=float(bi.totamt)
    context['kingse2'] = kingse2
    kingse_3 = []
    kingse3 = 0.0
    bilal3 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem1, todatem1, ])
    for be in bilal3:
        if be.paymmethod=='Cash' and be.category1 == 'Insurance Proceeds Received':
            kingse_3.append(be.totamt)
            kingse3+=float(be.totamt)
    context['kingse3'] = kingse3
    kingse_4 = []
    kingse4 = 0.0
    bilal4 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem2, todatem2, ])
    for be in bilal4:
        if be.paymmethod=='Cash' and be.category1 == 'Insurance Proceeds Received':
            kingse_4.append(be.totamt)
            kingse4+=float(be.totamt)
    context['kingse4'] = kingse4
    kingse_5 = []
    kingse5 = 0.0
    bilal5 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem3, todatem3, ])
    for be in bilal5:
        if be.paymmethod=='Cash' and be.category1 == 'Insurance Proceeds Received':
            kingsw_5.append(be.totamt)
            kingse5+=float(be.totamt)
    context['kingse5'] = kingse5
    
    # Interest Income
    kingsr_1=[]
    kingsr1 = 0.0
    bilal = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdate, todate, ])
    for b in bilal:
        if b.paymmethod=='Cash' and b.category1 == 'Interest Income':
            kingsr_1.append(b.totamt)
            kingsr1+=float(b.totamt)
    context['kingsr1'] = kingsr1
    kingsr_2 = []
    kingsr2 = 0.0
    bilal2 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem, todatem, ])
    for bi in bilal2:
        if bi.paymmethod=='Cash' and bi.category1 == 'Interest Income':
            kingsr_2.append(bi.totamt)
            kingsr2+=float(bi.totamt)
    context['kingsr2'] = kingsr2
    kingsr_3 = []
    kingsr3 = 0.0
    bilal3 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem1, todatem1, ])
    for be in bilal3:
        if be.paymmethod=='Cash' and be.category1 == 'Interest Income':
            kingsr_3.append(be.totamt)
            kingsr3+=float(be.totamt)
    context['kingsr3'] = kingsr3
    kingsr_4 = []
    kingsr4 = 0.0
    bilal4 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem2, todatem2, ])
    for be in bilal4:
        if be.paymmethod=='Cash' and be.category1 == 'Interest Income':
            kingsr_4.append(be.totamt)
            kingsr4+=float(be.totamt)
    context['kingsr4'] = kingsr4
    kingsr_5 = []
    kingsr5 = 0.0
    bilal5 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem3, todatem3, ])
    for be in bilal5:
        if be.paymmethod=='Cash' and be.category1 == 'Interest Income':
            kingsr_5.append(be.totamt)
            kingsr5+=float(be.totamt)
    context['kingsr5'] = kingsr5
    
    # Proceeds from Sale of Assets
    kingst_1=[]
    kingst1 = 0.0
    bilal = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdate, todate, ])
    for b in bilal:
        if b.paymmethod=='Cash' and b.category1 == 'Proceeds from Sale of Assets':
            kingst_1.append(b.totamt)
            kingst1+=float(b.totamt)
    context['kingst1'] = kingst1
    kingst_2 = []
    kingst2 = 0.0
    bilal2 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem, todatem, ])
    for bi in bilal2:
        if bi.paymmethod=='Cash' and bi.category1 == 'Proceeds from Sale of Assets':
            kingst_2.append(bi.totamt)
            kingst2+=float(bi.totamt)
    context['kingst2'] = kingst2
    kingst_3 = []
    kingst3 = 0.0
    bilal3 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem1, todatem1, ])
    for be in bilal3:
        if be.paymmethod=='Cash' and be.category1 == 'Proceeds from Sale of Assets':
            kingst_3.append(be.totamt)
            kingst3+=float(be.totamt)
    context['kingst3'] = kingst3
    kingst_4 = []
    kingst4 = 0.0
    bilal4 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem2, todatem2, ])
    for be in bilal4:
        if be.paymmethod=='Cash' and be.category1 == 'Proceeds from Sale of Assets':
            kingst_4.append(be.totamt)
            kingst4+=float(be.totamt)
    context['kingst4'] = kingst4
    kingst_5 = []
    kingst5 = 0.0
    bilal5 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem3, todatem3, ])
    for be in bilal5:
        if be.paymmethod=='Cash' and be.category1 == 'Proceeds from Sale of Assets':
            kingst_5.append(be.totamt)
            kingst5+=float(be.totamt)
    context['kingst5'] = kingst5
    
    # Shipping and Delivery Income
    kingsy_1=[]
    kingsy1 = 0.0
    bilal = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdate, todate, ])
    for b in bilal:
        if b.paymmethod=='Cash' and b.category1 == 'Shipping and Delivery Income':
            kingsy_1.append(b.totamt)
            kingsy1+=float(b.totamt)
    context['kingsy1'] = kingsy1
    kingsy_2 = []
    kingsy2 = 0.0
    bilal2 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem, todatem, ])
    for bi in bilal2:
        if bi.paymmethod=='Cash' and bi.category1 == 'Shipping and Delivery Income':
            kingsy_2.append(bi.totamt)
            kingsy2+=float(bi.totamt)
    context['kingsy2'] = kingsy2
    kingsy_3 = []
    kingsy3 = 0.0
    bilal3 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem1, todatem1, ])
    for be in bilal3:
        if be.paymmethod=='Cash' and be.category1 == 'Shipping and Delivery Income':
            kingsy_3.append(be.totamt)
            kingsy3+=float(be.totamt)
    context['kingsy3'] = kingsy3
    kingsy_4 = []
    kingsy4 = 0.0
    bilal4 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem2, todatem2, ])
    for be in bilal4:
        if be.paymmethod=='Cash' and be.category1 == 'Shipping and Delivery Income':
            kingsy_4.append(be.totamt)
            kingsy4+=float(be.totamt)
    context['kingsy4'] = kingsy4
    kingsy_5 = []
    kingsy5 = 0.0
    bilal5 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem3, todatem3, ])
    for be in bilal5:
        if be.paymmethod=='Cash' and be.category1 == 'Shipping and Delivery Income':
            kingsy_5.append(be.totamt)
            kingsy5+=float(be.totamt)
    context['kingsy5'] = kingsy5
    
    # Ask My Accountant
    kingsu_1=[]
    kingsu1 = 0.0
    bilal = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdate, todate, ])
    for b in bilal:
        if b.paymmethod=='Cash' and b.category1 == 'Ask My Accountant':
            kingsu_1.append(b.totamt)
            kingsu1+=float(b.totamt)
    context['kingsu1'] = kingsu1
    kingsu_2 = []
    kingsu2 = 0.0
    bilal2 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem, todatem, ])
    for bi in bilal2:
        if bi.paymmethod=='Cash' and bi.category1 == 'Ask My Accountant':
            kingsu_2.append(bi.totamt)
            kingsu2+=float(bi.totamt)
    context['kingsu2'] = kingsu2
    kingsu_3 = []
    kingsu3 = 0.0
    bilal3 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem1, todatem1, ])
    for be in bilal3:
        if be.paymmethod=='Cash' and be.category1 == 'Ask My Accountant':
            kingsu_3.append(be.totamt)
            kingsu3+=float(be.totamt)
    context['kingsu3'] = kingsu3
    kingsu_4 = []
    kingsu4 = 0.0
    bilal4 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem2, todatem2, ])
    for be in bilal4:
        if be.paymmethod=='Cash' and be.category1 == 'Ask My Accountant':
            kingsu_4.append(be.totamt)
            kingsu4+=float(be.totamt)
    context['kingsu4'] = kingsu4
    kingsu_5 = []
    kingsu5 = 0.0
    bilal5 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem3, todatem3, ])
    for be in bilal5:
        if be.paymmethod=='Cash' and be.category1 == 'Ask My Accountant':
            kingsu_5.append(be.totamt)
            kingsu5+=float(be.totamt)
    context['kingsu5'] = kingsu5
    
    # CGST write-off
    kingsi_1=[]
    kingsi1 = 0.0
    bilal = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdate, todate, ])
    for b in bilal:
        if b.paymmethod=='Cash' and b.category1 == 'CGST write-off':
            kingsi_1.append(b.totamt)
            kingsi1+=float(b.totamt)
    context['kingsi1'] = kingsi1
    kingsi_2 = []
    kingsi2 = 0.0
    bilal2 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem, todatem, ])
    for bi in bilal2:
        if bi.paymmethod=='Cash' and bi.category1 == 'CGST write-off':
            kingsi_2.append(bi.totamt)
            kingsi2+=float(bi.totamt)
    context['kingsi2'] = kingsi2
    kingsi_3 = []
    kingsi3 = 0.0
    bilal3 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem1, todatem1, ])
    for be in bilal3:
        if be.paymmethod=='Cash' and be.category1 == 'CGST write-off':
            kingsi_3.append(be.totamt)
            kingsi3+=float(be.totamt)
    context['kingsi3'] = kingsi3
    kingsi_4 = []
    kingsi4 = 0.0
    bilal4 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem2, todatem2, ])
    for be in bilal4:
        if be.paymmethod=='Cash' and be.category1 == 'CGST write-off':
            kingsi_4.append(be.totamt)
            kingsi4+=float(be.totamt)
    context['kingsi4'] = kingsi4
    kingsi_5 = []
    kingsi5 = 0.0
    bilal5 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem3, todatem3, ])
    for be in bilal5:
        if be.paymmethod=='Cash' and be.category1 == 'CGST write-off':
            kingsi_5.append(be.totamt)
            kingsi5+=float(be.totamt)
    context['kingsi5'] = kingsi5
    
    # GST write-off
    kingso_1=[]
    kingso1 = 0.0
    bilal = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdate, todate, ])
    for b in bilal:
        if b.paymmethod=='Cash' and b.category1 == 'GST write-off':
            kingso_1.append(b.totamt)
            kingso1+=float(b.totamt)
    context['kingso1'] = kingso1
    kingso_2 = []
    kingso2 = 0.0
    bilal2 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem, todatem, ])
    for bi in bilal2:
        if bi.paymmethod=='Cash' and bi.category1 == 'GST write-off':
            kingso_2.append(bi.totamt)
            kingso2+=float(bi.totamt)
    context['kingso2'] = kingso2
    kingso_3 = []
    kingso3 = 0.0
    bilal3 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem1, todatem1, ])
    for be in bilal3:
        if be.paymmethod=='Cash' and be.category1 == 'GST write-off':
            kingso_3.append(be.totamt)
            kingso3+=float(be.totamt)
    context['kingso3'] = kingso3
    kingso_4 = []
    kingso4 = 0.0
    bilal4 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem2, todatem2, ])
    for be in bilal4:
        if be.paymmethod=='Cash' and be.category1 == 'GST write-off':
            kingso_4.append(be.totamt)
            kingso4+=float(be.totamt)
    context['kingso4'] = kingso4
    kingso_5 = []
    kingso5 = 0.0
    bilal5 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem3, todatem3, ])
    for be in bilal5:
        if be.paymmethod=='Cash' and be.category1 == 'GST write-off':
            kingso_5.append(be.totamt)
            kingso5+=float(be.totamt)
    context['kingso5'] = kingso5
    
    # IGST write-off
    kingsp_1=[]
    kingsp1 = 0.0
    bilal = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdate, todate, ])
    for b in bilal:
        if b.paymmethod=='Cash' and b.category1 == 'IGST write-off':
            kingsp_1.append(b.totamt)
            kingsp1+=float(b.totamt)
    context['kingsp1'] = kingsp1
    kingsp_2 = []
    kingsp2 = 0.0
    bilal2 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem, todatem, ])
    for bi in bilal2:
        if bi.paymmethod=='Cash' and bi.category1 == 'IGST write-off':
            kingsp_2.append(bi.totamt)
            kingsp2+=float(bi.totamt)
    context['kingsp2'] = kingsp2
    kingsp_3 = []
    kingsp3 = 0.0
    bilal3 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem1, todatem1, ])
    for be in bilal3:
        if be.paymmethod=='Cash' and be.category1 == 'IGST write-off':
            kingsp_3.append(be.totamt)
            kingsp3+=float(be.totamt)
    context['kingsp3'] = kingsp3
    kingsp_4 = []
    kingsp4 = 0.0
    bilal4 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem2, todatem2, ])
    for be in bilal4:
        if be.paymmethod=='Cash' and be.category1 == 'IGST write-off':
            kingsp_4.append(be.totamt)
            kingsp4+=float(be.totamt)
    context['kingsp4'] = kingsp4
    kingsp_5 = []
    kingsp5 = 0.0
    bilal5 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem3, todatem3, ])
    for be in bilal5:
        if be.paymmethod=='Cash' and be.category1 == 'IGST write-off':
            kingsp_5.append(be.totamt)
            kingsp5+=float(be.totamt)
    context['kingsp5'] = kingsp5
    
    # Miscellaneous Expense
    kingsa_1=[]
    kingsa1 = 0.0
    bilal = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdate, todate, ])
    for b in bilal:
        if b.paymmethod=='Cash' and b.category1 == 'Miscellaneous Expense':
            kingsa_1.append(b.totamt)
            kingsa1+=float(b.totamt)
    context['kingsa1'] = kingsa1
    kingsa_2 = []
    kingsa2 = 0.0
    bilal2 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem, todatem, ])
    for bi in bilal2:
        if bi.paymmethod=='Cash' and bi.category1 == 'Miscellaneous Expense':
            kingsa_2.append(bi.totamt)
            kingsa2+=float(bi.totamt)
    context['kingsa2'] = kingsa2
    kingsa_3 = []
    kingsa3 = 0.0
    bilal3 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem1, todatem1, ])
    for be in bilal3:
        if be.paymmethod=='Cash' and be.category1 == 'Miscellaneous Expense':
            kingsa_3.append(be.totamt)
            kingsa3+=float(be.totamt)
    context['kingsa3'] = kingsa3
    kingsa_4 = []
    kingsa4 = 0.0
    bilal4 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem2, todatem2, ])
    for be in bilal4:
        if be.paymmethod=='Cash' and be.category1 == 'Miscellaneous Expense':
            kingsa_4.append(be.totamt)
            kingsa4+=float(be.totamt)
    context['kingsa4'] = kingsa4
    kingsa_5 = []
    kingsa5 = 0.0
    bilal5 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem3, todatem3, ])
    for be in bilal5:
        if be.paymmethod=='Cash' and be.category1 == 'Miscellaneous Expense':
            kingsa_5.append(be.totamt)
            kingsa5+=float(be.totamt)
    context['kingsa5'] = kingsa5
    
    # Political Contributions
    kingss_1=[]
    kingss1 = 0.0
    bilal = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdate, todate, ])
    for b in bilal:
        if b.paymmethod=='Cash' and b.category1 == 'Political Contributions':
            kingss_1.append(b.totamt)
            kingss1+=float(b.totamt)
    context['kingss1'] = kingss1
    kingss_2 = []
    kingss2 = 0.0
    bilal2 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem, todatem, ])
    for bi in bilal2:
        if bi.paymmethod=='Cash' and bi.category1 == 'Political Contributions':
            kingss_2.append(bi.totamt)
            kingss2+=float(bi.totamt)
    context['kingss2'] = kingss2
    kingss_3 = []
    kingss3 = 0.0
    bilal3 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem1, todatem1, ])
    for be in bilal3:
        if be.paymmethod=='Cash' and be.category1 == 'Political Contributions':
            kingss_3.append(be.totamt)
            kingss3+=float(be.totamt)
    context['kingss3'] = kingss3
    kingss_4 = []
    kingss4 = 0.0
    bilal4 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem2, todatem2, ])
    for be in bilal4:
        if be.paymmethod=='Cash' and be.category1 == 'Political Contributions':
            kingss_4.append(be.totamt)
            kingss4+=float(be.totamt)
    context['kingss4'] = kingss4
    kingss_5 = []
    kingss5 = 0.0
    bilal5 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem3, todatem3, ])
    for be in bilal5:
        if be.paymmethod=='Cash' and be.category1 == 'Political Contributions':
            kingss_5.append(be.totamt)
            kingss5+=float(be.totamt)
    context['kingss5'] = kingss5
    
    # SGST write-off
    kingsd_1=[]
    kingsd1 = 0.0
    bilal = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdate, todate, ])
    for b in bilal:
        if b.paymmethod=='Cash' and b.category1 == 'SGST write-off':
            kingsd_1.append(b.totamt)
            kingsd1+=float(b.totamt)
    context['kingsd1'] = kingsd1
    kingsd_2 = []
    kingsd2 = 0.0
    bilal2 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem, todatem, ])
    for bi in bilal2:
        if bi.paymmethod=='Cash' and bi.category1 == 'SGST write-off':
            kingsd_2.append(bi.totamt)
            kingsd2+=float(bi.totamt)
    context['kingsd2'] = kingsd2
    kingsd_3 = []
    kingsd3 = 0.0
    bilal3 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem1, todatem1, ])
    for be in bilal3:
        if be.paymmethod=='Cash' and be.category1 == 'SGST write-off':
            kingsd_3.append(be.totamt)
            kingsd3+=float(be.totamt)
    context['kingsd3'] = kingsd3
    kingsd_4 = []
    kingsd4 = 0.0
    bilal4 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem2, todatem2, ])
    for be in bilal4:
        if be.paymmethod=='Cash' and be.category1 == 'SGST write-off':
            kingsd_4.append(be.totamt)
            kingsd4+=float(be.totamt)
    context['kingsd4'] = kingsd4
    kingsd_5 = []
    kingsd5 = 0.0
    bilal5 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem3, todatem3, ])
    for be in bilal5:
        if be.paymmethod=='Cash' and be.category1 == 'SGST write-off':
            kingsd_5.append(be.totamt)
            kingsd5+=float(be.totamt)
    context['kingsd5'] = kingsd5
    
    # Tax write-of
    kingsf_1=[]
    kingsf1 = 0.0
    bilal = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdate, todate, ])
    for b in bilal:
        if b.paymmethod=='Cash' and b.category1 == 'Tax write-of':
            kingsf_1.append(b.totamt)
            kingsf1+=float(b.totamt)
    context['kingsf1'] = kingsf1
    kingsf_2 = []
    kingsf2 = 0.0
    bilal2 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem, todatem, ])
    for bi in bilal2:
        if bi.paymmethod=='Cash' and bi.category1 == 'Tax write-of':
            kingsf_2.append(bi.totamt)
            kingsf2+=float(bi.totamt)
    context['kingsf2'] = kingsf2
    kingsf_3 = []
    kingsf3 = 0.0
    bilal3 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem1, todatem1, ])
    for be in bilal3:
        if be.paymmethod=='Cash' and be.category1 == 'Tax write-of':
            kingsf_3.append(be.totamt)
            kingsf3+=float(be.totamt)
    context['kingsf3'] = kingsf3
    kingsf_4 = []
    kingsf4 = 0.0
    bilal4 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem2, todatem2, ])
    for be in bilal4:
        if be.paymmethod=='Cash' and be.category1 == 'Tax write-of':
            kingsf_4.append(be.totamt)
            kingsf4+=float(be.totamt)
    context['kingsf4'] = kingsf4
    kingsf_5 = []
    kingsf5 = 0.0
    bilal5 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem3, todatem3, ])
    for be in bilal5:
        if be.paymmethod=='Cash' and be.category1 == 'Tax write-of':
            kingsf_5.append(be.totamt)
            kingsf5+=float(be.totamt)
    context['kingsf5'] = kingsf5
    
    # Vehicle Expenses
    kingsg_1=[]
    kingsg1 = 0.0
    bilal = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdate, todate, ])
    for b in bilal:
        if b.paymmethod=='Cash' and b.category1 == 'Vehicle Expenses':
            kingsg_1.append(b.totamt)
            kingsg1+=float(b.totamt)
    context['kingsg1'] = kingsg1
    kingsg_2 = []
    kingsg2 = 0.0
    bilal2 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem, todatem, ])
    for bi in bilal2:
        if bi.paymmethod=='Cash' and bi.category1 == 'Vehicle Expenses':
            kingsg_2.append(bi.totamt)
            kingsg2+=float(bi.totamt)
    context['kingsg2'] = kingsg2
    kingsg_3 = []
    kingsg3 = 0.0
    bilal3 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem1, todatem1, ])
    for be in bilal3:
        if be.paymmethod=='Cash' and be.category1 == 'Vehicle Expenses':
            kingsg_3.append(be.totamt)
            kingsg3+=float(be.totamt)
    context['kingsg3'] = kingsg3
    kingsg_4 = []
    kingsg4 = 0.0
    bilal4 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem2, todatem2, ])
    for be in bilal4:
        if be.paymmethod=='Cash' and be.category1 == 'Vehicle Expenses':
            kingsg_4.append(be.totamt)
            kingsg4+=float(be.totamt)
    context['kingsg4'] = kingsg4
    kingsg_5 = []
    kingsg5 = 0.0
    bilal5 = expences.objects.raw(
        'select * from app1_expences where paymdate between %s and %s', [fromdatem3, todatem3, ])
    for be in bilal5:
        if be.paymmethod=='Cash' and be.category1 == 'Vehicle Expenses':
            kingsg_5.append(be.totamt)
            kingsg5+=float(be.totamt)
    context['kingsg5'] = kingsg5
    
    
    
    
    for bal in balance:    
        if (bal.paymmethod=='Cash'):
            data_1.append(bal.totamt)
            exp+=float(bal.totamt)
    context['exp'] = exp
    for ban in ball:
        if (ban.category1=='Advertising/Promotional'):
            data_1.append(ban.totamt)
            bat+=float(ban.totamt)
    context['bat'] = bat       
    for bb in ball:
            if (bb.category1=='Bank Charges'):
                data_1.append(bb.totamt)
                bank+=float(bb.totamt)
    context['bank'] = bank
    for vvv in ball:
            if (vvv.category1=='Business Licenses and Permits'):        
                data_1.append(vvv.totamt)
                bus+=float(vvv.totamt)
    context['bus'] = bus
    for n in ball:
            if (n.category1=='Charitable Contributions'):
                data_1.append(n.totamt)
                cha+=float(n.totamt)
    context['cha'] = cha  
    for comp in ball:
            if (comp.category1=='Computer and Internet Expense'):
                data_1.append(comp.totamt)
                computer+=float(comp.totamt)
    context['computer'] = computer  
    for cont in ball:
            if (cont.category1=='Continuing Education'):
                data_1.append(cont.totamt)
                continueing+=float(cont.totamt)
    context['continueing'] = continueing
    for depre in ball:
            if (depre.category1=='Depreciation Expense'):
                data_1.append(depre.totamt)
                Depreciation+=float(depre.totamt)
    context['Depreciation'] = Depreciation
    for dues in ball:
            if (dues.category1=='Dues and Subscriptions'):
                data_1.append(dues.totamt)
                Dues+=float(dues.totamt)
    context['Dues'] = Dues
    
    Housekeeping = 0.0
    for Housekeep in ball:
            if (Housekeep.category1=='Housekeeping Charges'):
                data_1.append(Housekeep.totamt)
                Housekeeping+=float(Housekeep.totamt)
    context['Housekeeping'] = Housekeeping
    Insurance = 0.0
    for Insuran in ball:
            if (Insuran.category1=='Insurance Expense'):
                data_1.append(Insuran.totamt)
                Insurance+=float(Insuran.totamt)
    context['Insurance'] = Insurance
    ExpenseGeneral = 0.0
    for InsuranceExpense in ball:
            if (InsuranceExpense.category1=='Insurance Expense-General Liability Insurance'):
                data_1.append(InsuranceExpense.totamt)
                ExpenseGeneral+=float(InsuranceExpense.totamt)
    context['ExpenseGeneral'] = ExpenseGeneral
    ExpenseHealth = 0.0
    for Health in ball:
            if (Health.category1=='Insurance Expense-Health Insurance'):
                data_1.append(Health.totamt)
                ExpenseHealth+=float(Health.totamt)
    context['ExpenseHealth'] = ExpenseHealth
    ExpenseLife = 0.0
    for Life in ball:
            if (Life.category1=='Insurance Expense-Life and Disability Insurance'):
                data_1.append(Life.totamt)
                ExpenseLife+=float(Life.totamt)
    context['ExpenseLife'] = ExpenseLife
    ExpenseProfessional = 0.0
    for Professional in ball:
            if (Professional.category1=='Insurance Expense-Professional Liability'):
                data_1.append(Professional.totamt)
                ExpenseProfessional+=float(Professional.totamt)
    context['ExpenseProfessional'] = ExpenseProfessional
    InterestExpense = 0.0
    for InterestExpens in ball:
            if (InterestExpens.category1=='Interest Expense'):
                data_1.append(InterestExpens.totamt)
                InterestExpense+=float(InterestExpens.totamt)
    context['InterestExpense'] = InterestExpense
    Mealsand = 0.0
    for Meals in ball:
            if (Meals.category1=='Meals and entertainment'):
                data_1.append(Meals.totamt)
                Mealsand+=float(Meals.totamt)
    context['Mealsand'] = Mealsand
    OfficeSupplies = 0.0
    for Office in ball:
            if (Office.category1=='Office Supplies'):
                data_1.append(Office.totamt)
                OfficeSupplies+=float(Office.totamt)
    context['OfficeSupplies'] = OfficeSupplies
    Postageand = 0.0
    for Postage in ball:
            if (Postage.category1=='Postage and Delivery'):
                data_1.append(Postage.totamt)
                Postageand+=float(Postage.totamt)
    context['Postageand'] = Postageand
    Printingand = 0.0
    for Printing in ball:
            if (Printing.category1=='Printing and Reproduction'):
                data_1.append(Printing.totamt)
                Printingand+=float(Printing.totamt)
    context['Printingand'] = Printingand
    ProfessionalFees = 0.0
    for alFe in ball:
            if (alFe.category1=='Professional Fees'):
                data_1.append(alFe.totamt)
                ProfessionalFees+=float(alFe.totamt)
    context['ProfessionalFees'] = ProfessionalFees
    Purchases = 0.0
    for pure in ball:
            if (pure.category1=='Purchases'):
                data_1.append(pure.totamt)
                Purchases+=float(pure.totamt)
    context['Purchases'] = Purchases
    RentExpense = 0.0
    for Rent in ball:
            if (Rent.category1=='Rent Expense'):
                data_1.append(Rent.totamt)
                RentExpense+=float(Rent.totamt)
    context['RentExpense'] = RentExpense
    Repairand = 0.0
    for Repair in ball:
            if (Repair.category1=='Repair and maintenance'):
                data_1.append(Repair.totamt)
                Repairand+=float(Repair.totamt)
    context['Repairand'] = Repairand
    SmallToolsand = 0.0
    for SmallTools in ball:
            if (SmallTools.category1=='Small Tools and Equipment'):
                data_1.append(SmallTools.totamt)
                SmallToolsand+=float(SmallTools.totamt)
    context['SmallToolsand'] = SmallToolsand
    SwachhB = 0.0
    for Swac in ball:
            if (Swac.category1=='Swachh Bharat Cess Expense'):
                data_1.append(Swac.totamt)
                SwachhB+=float(Swac.totamt)
    context['SwachhB'] = SwachhB
    TaxesP = 0.0
    for Taxe in ball:
            if (Taxe.category1=='Taxes - Property'):
                data_1.append(Taxe.totamt)
                TaxesP+=float(Taxe.totamt)
    context['TaxesP'] = TaxesP
    Telephon = 0.0
    for Telep in ball:
            if (Telep.category1=='Telephone Expense'):
                data_1.append(Telep.totamt)
                Telephon+=float(Telep.totamt)
    context['Telephon'] = Telephon
    Trave = 0.0
    for Trav in ball:
            if (Trav.category1=='Travel Expense'):
                data_1.append(Trav.totamt)
                Trave+=float(Trav.totamt)
    context['Trave'] = Trave
    Uncateg = 0.0
    for Uncat in ball:
            if (Uncat.category1=='Uncategorised Expense'):
                data_1.append(Uncat.totamt)
                Uncateg+=float(Uncat.totamt)
    context['Uncateg'] = Uncateg
    Utilit = 0.0
    for Uti in ball:
            if (Uti.category1=='Utilities'):
                data_1.append(Uti.totamt)
                Utilit+=float(Uti.totamt)
    context['Utilit'] = Utilit
    Cashand = 0.0
    for Cas in ball:
            if (Cas.category1=='Cash and cash equivalents'):
                data_1.append(Cas.totamt)
                Cashand+=float(Cas.totamt)
    context['Cashand'] = Cashand
    Acco = 0.0
    for Acc in ball:
            if (Acc.category1=='Accounts Receivable (Debtors)'):
                data_1.append(Acc.totamt)
                Acco+=float(Acc.totamt)
    context['Acco'] = Acco
    Defer = 0.0
    for Defe in ball:
            if (Defe.category1=='Deferred CGST'):
                data_1.append(Defe.totamt)
                Defer+=float(Defe.totamt)
    context['Defer'] = Defer
    edGST = 0.0
    for dGS in ball:
            if (dGS.category1=='Deferred GST Input Credit'):
                data_1.append(dGS.totamt)
                edGST+=float(dGS.totamt)
    context['edGST'] = edGST
    Defem = 0.0
    for De in ball:
            if (De.category1=='Deferred IGST'):
                data_1.append(De.totamt)
                Defem+=float(De.totamt)
    context['Defem'] = Defem
    Krish = 0.0
    for Kri in ball:
            if (Kri.category1=='Deferred Krishi Kalyan Cess Input Credit'):
                data_1.append(Kri.totamt)
                Krish+=float(Kri.totamt)
    context['Krish'] = Krish
    Serv = 0.0
    for Ser in ball:
            if (Ser.category1=='Deferred Service Tax Input Credit'):
                data_1.append(Ser.totamt)
                Serv+=float(Ser.totamt)
    context['Serv'] = Serv
    erre = 0.0
    for rre in ball:
            if (rre.category1=='Deferred SGST'):
                data_1.append(rre.totamt)
                erre+=float(rre.totamt)
    context['erre'] = erre
    VATI = 0.0
    for VA in ball:
            if (VA.category1=='Deferred VAT Input Credit'):
                data_1.append(VA.totamt)
                VATI+=float(VA.totamt)
    context['VATI'] = VATI
    Refu = 0.0
    for Ref in ball:
            if (Ref.category1=='GST Refund'):
                data_1.append(Ref.totamt)
                Refu+=float(Ref.totamt)
    context['Refu'] = Refu
    Inve = 0.0
    for Inv in ball:
            if (Inv.category1=='Inventory Asset'):
                data_1.append(Inv.totamt)
                Inve+=float(Inv.totamt)
    context['Inve'] = Inve
    iKal = 0.0
    for iKa in ball:
            if (iKa.category1=='Krishi Kalyan Cess Refund'):
                data_1.append(iKa.totamt)
                iKal+=float(iKa.totamt)
    context['iKal'] = iKal
    Prep = 0.0
    for Pr in ball:
            if (Pr.category1=='Prepaid Insurance'):
                data_1.append(Pr.totamt)
                Prep+=float(Pr.totamt)
    context['Prep'] = Prep
    rvic = 0.0
    for rvi in ball:
            if (rvi.category1=='Service Tax Refund'):
                data_1.append(rvi.totamt)
                rvic+=float(rvi.totamt)
    context['rvic'] = rvic
    TDSR = 0.0
    for TD in ball:
            if (TD.category1=='TDS Receivable'):
                data_1.append(TD.totamt)
                TDSR+=float(TD.totamt)
    context['TDSR'] = TDSR
    Unca = 0.0
    for Unc in ball:
            if (Unc.category1=='Uncategorised Asset'):
                data_1.append(Unc.totamt)
                Unca+=float(Unc.totamt)
    context['Unca'] = Unca
    Undep = 0.0
    for Unde in ball:
            if (Unde.category1=='Undeposited Funds'):
                data_1.append(Unde.totamt)
                Undep+=float(Unde.totamt)
    context['Undep'] = Undep
    Accum = 0.0
    for Accu in ball:
            if (Accu.category1=='Accumulated Depreciation'):
                data_1.append(Accu.totamt)
                Accum+=float(Accu.totamt)
    context['Accum'] = Accum
    Buil = 0.0
    for Bui in ball:
            if (Bui.category1=='Buildings and Improvements'):
                data_1.append(Bui.totamt)
                Buil+=float(Bui.totamt)
    context['Buil'] = Buil
    Furn = 0.0
    for Fur in ball:
            if (Fur.category1=='Furniture and Equipment'):
                data_1.append(Fur.totamt)
                Furn+=float(Fur.totamt)
    context['Furn'] = Furn
    Lan = 0.0
    for La in ball:
            if (La.category1=='Land'):
                data_1.append(La.totamt)
                Lan+=float(La.totamt)
    context['Lan'] = Lan
    Leas = 0.0
    for Lea in ball:
            if (Lea.category1=='Leasehold Improvements'):
                data_1.append(Lea.totamt)
                Leas+=float(Lea.totamt)
    context['Leas'] = Leas
    Vehi = 0.0
    for Veh in ball:
            if (Veh.category1=='Vehicles'):
                data_1.append(Veh.totamt)
                Vehi+=float(Veh.totamt)
    context['Vehi'] = Vehi
    Paya = 0.0
    for Pa in ball:
            if (Pa.category1=='CGST Payable'):
                data_1.append(Pa.totamt)
                Paya+=float(Pa.totamt)
    context['Paya'] = Paya
    CSTPa = 0.0
    for CS in ball:
            if (CS.category1=='CST Payable'):
                data_1.append(CS.totamt)
                CSTPa+=float(CS.totamt)
    context['CSTPa'] = CSTPa
    TSu = 0.0
    for Su in ball:
            if (Su.category1=='CST Suspense'):
                data_1.append(Su.totamt)
                TSu+=float(Su.totamt)
    context['TSu'] = TSu
    GSTPa = 0.0
    for GS in ball:
            if (GS.category1=='GST Payable'):
                data_1.append(GS.totamt)
                GSTPa+=float(GS.totamt)
    context['GSTPa'] = GSTPa
    GSTSu = 0.0
    for STS in ball:
            if (STS.category1=='GST Suspense'):
                data_1.append(STS.totamt)
                GSTSu+=float(STS.totamt)
    context['GSTSu'] = GSTSu
    STP = 0.0
    for TP in ball:
            if (TP.category1=='IGST Payable'):
                data_1.append(TP.totamt)
                STP+=float(TP.totamt)
    context['STP'] = STP
    tCG = 0.0
    for tC in ball:
            if (tC.category1=='Input CGST'):
                data_1.append(tC.totamt)
                tCG+=float(tC.totamt)
    context['tCG'] = tCG
    RCM = 0.0
    for RC in ball:
            if (RC.category1=='Input CGST Tax RCM'):
                data_1.append(RC.totamt)
                RCM+=float(RC.totamt)
    context['RCM'] = RCM
    put = 0.0
    for pu in ball:
            if (pu.category1=='Input IGST'):
                data_1.append(pu.totamt)
                put+=float(pu.totamt)
    context['put'] = put
    TTa = 0.0
    for TT in ball:
            if (TT.category1=='Input IGST Tax RCM'):
                data_1.append(TT.totamt)
                TTa+=float(TT.totamt)
    context['TTa'] = TTa
    Kris = 0.0
    for Kr in ball:
            if (Kr.category1=='Input Krishi Kalyan Cess'):
                data_1.append(Kr.totamt)
                Kris+=float(Kr.totamt)
    context['Kris'] = Kris
    ess = 0.0
    for es in ball:
            if (es.category1=='Input Krishi Kalyan Cess RCM'):
                data_1.append(es.totamt)
                ess+=float(es.totamt)
    context['ess'] = ess
    npu = 0.0
    for np in ball:
            if (es.category1=='Input Service Tax'):
                data_1.append(np.totamt)
                npu+=float(np.totamt)
    context['npu'] = npu
    tser = 0.0
    for tSe in ball:
            if (tSe.category1=='Input Service Tax RCM'):
                data_1.append(tSe.totamt)
                tser+=float(tSe.totamt)
    context['tser'] = tser
    uts = 0.0
    for ut in ball:
            if (ut.category1=='Input SGST'):
                data_1.append(ut.totamt)
                uts+=float(ut.totamt)
    context['uts'] = uts
    ps = 0.0
    for sp in ball:
            if (sp.category1=='Input SGST Tax RCM'):
                data_1.append(sp.totamt)
                ps+=float(sp.totamt)
    context['ps'] = ps
    AT = 0.0
    for A in ball:
            if (A.category1=='Input VAT 14%'):
                data_1.append(A.totamt)
                AT+=float(A.totamt)
    context['AT'] = AT
    ATv= 0.0
    for tv in ball:
            if (tv.category1=='Input VAT 4%'):
                data_1.append(tv.totamt)
                ATv+=float(tv.totamt)
    context['ATv'] = ATv
    ATvv= 0.0
    for tvv in ball:
            if (tvv.category1=='Input VAT 5%'):
                data_1.append(tvv.totamt)
                ATvv+=float(tvv.totamt)
    context['ATvv'] = ATvv
    aya= 0.0
    for ay in ball:
            if (ay.category1=='Krishi Kalyan Cess Payable'):
                data_1.append(ay.totamt)
                aya+=float(ay.totamt)
    context['aya'] = aya
    yan= 0.0
    for ya in ball:
            if (ya.category1=='Krishi Kalyan Cess Suspense'):
                data_1.append(ya.totamt)
                yan+=float(ya.totamt)
    context['yan'] = yan
    ccsm= 0.0
    for ccs in ball:
            if (ccs.category1=='Output CGST'):
                data_1.append(ccs.totamt)
                ccsm+=float(ccs.totamt)
    context['ccsm'] = ccsm
    utp= 0.0
    for ut in ball:
            if (ut.category1=='Output CGST Tax RCM'):
                data_1.append(ut.totamt)
                utp+=float(ut.totamt)
    context['utp'] = utp
    putsss= 0.0
    for puts in ball:
            if (puts.category1=='Output CST 2%'):
                data_1.append(puts.totamt)
                putsss+=float(puts.totamt)
    context['putsss'] = putsss
    uos= 0.0
    for ou in ball:
            if (ou.category1=='Output IGST'):
                data_1.append(ou.totamt)
                uos+=float(ou.totamt)
    context['uos'] = uos
    tIG= 0.0
    for ax in ball:
            if (ax.category1=='Output IGST Tax RCM'):
                data_1.append(ax.totamt)
                tIG+=float(ax.totamt)
    context['tIG'] = tIG
    shi= 0.0
    for hi in ball:
            if (hi.category1=='Output Krishi Kalyan Cess'):
                data_1.append(hi.totamt)
                shi+=float(hi.totamt)
    context['shi'] = shi
    crc= 0.0
    for cr in ball:
            if (cr.category1=='Output Krishi Kalyan Cess RCM'):
                data_1.append(cr.totamt)
                crc+=float(cr.totamt)
    context['crc'] = crc
    erre= 0.0
    for err in ball:
            if (err.category1=='Output Service Tax'):
                data_1.append(err.totamt)
                erre+=float(err.totamt)
    context['erre'] = erre
    vice= 0.0
    for vi in ball:
            if (vi.category1=='Output Service Tax RCM'):
                data_1.append(vi.totamt)
                vice+=float(vi.totamt)
    context['vice'] = vice
    stqq= 0.0
    for stq in ball:
            if (stq.category1=='Output SGST'):
                data_1.append(stq.totamt)
                stqq+=float(stq.totamt)
    context['stqq'] = stqq
    rcb= 0.0
    for rc in ball:
            if (rc.category1=='Output SGST Tax RCM'):
                data_1.append(rc.totamt)
                rcb+=float(rc.totamt)
    context['rcb'] = rcb
    vat14= 0.0
    for te in ball:
            if (te.category1=='Output VAT 14%'):
                data_1.append(te.totamt)
                vat14+=float(te.totamt)
    context['vat14'] = vat14
    vat4= 0.0
    for tpV in ball:
            if (tpV.category1=='Output VAT 4%'):
                data_1.append(tpV.totamt)
                vat4+=float(tpV.totamt)
    context['vat4'] = vat4
    vat5= 0.0
    for atp in ball:
            if (atp.category1=='Output VAT 5%'):
                data_1.append(atp.totamt)
                vat5+=float(atp.totamt)
    context['vat5'] = vat5
    xpapa= 0.0
    for xpa in ball:
            if (xpa.category1=='Service Tax Payable'):
                data_1.append(xpa.totamt)
                xpapa+=float(xpa.totamt)
    context['xpapa'] = xpapa
    sosvice= 0.0
    for sos in ball:
            if (sos.category1=='Service Tax Suspense'):
                data_1.append(sos.totamt)
                sosvice+=float(sos.totamt)
    context['sosvice'] = sosvice
    blu= 0.0
    for bl in ball:
            if (bl.category1=='SGST Payable'):
                data_1.append(bl.totamt)
                blu+=float(bl.totamt)
    context['blu'] = blu
    achws= 0.0
    for achw in ball:
            if (achw.category1=='Swachh Bharat Cess Payable'):
                data_1.append(achw.totamt)
                achws+=float(achw.totamt)
    context['achws'] = achws
    csebsu= 0.0
    for cseb in ball:
            if (cseb.category1=='Swachh Bharat Cess Suspense'):
                data_1.append(cseb.totamt)
                csebsu+=float(cseb.totamt)
    context['csebsu'] = csebsu
    dsptds= 0.0
    for dsp in ball:
            if (dsp.category1=='TDS Payable'):
                data_1.append(dsp.totamt)
                dsptds+=float(dsp.totamt)
    context['dsptds'] = dsptds
    spnse= 0.0
    for spn in ball:
            if (spn.category1=='VAT Suspense'):
                data_1.append(spn.totamt)
                spnse+=float(spn.totamt)
    context['spnse'] = spnse
    opnbl= 0.0
    for opn in ball:
            if (opn.category1=='Opening Balance Equity'):
                data_1.append(opn.totamt)
                opnbl+=float(opn.totamt)
    context['opnbl'] = opnbl
    rtier= 0.0
    for rti in ball:
            if (rti.category1=='Retained Earnings'):
                data_1.append(rti.totamt)
                rtier+=float(rti.totamt)
    context['rtier'] = rtier
    exbi= 0.0
    for exb in ball:
            if (exb.category1=='Billable Expense Income'):
                data_1.append(exb.totamt)
                exbi+=float(exb.totamt)
    context['exbi'] = exbi
    csltin= 0.0
    for csl in ball:
            if (csl.category1=='Consulting Income'):
                data_1.append(csl.totamt)
                csltin+=float(csl.totamt)
    context['csltin'] = csltin
    psldct= 0.0
    for psl in ball:
            if (psl.category1=='Product Sales'):
                data_1.append(psl.totamt)
                psldct+=float(psl.totamt)
    context['psldct'] = psldct
    slels= 0.0
    for sle in ball:
            if (sle.category1=='Sales'):
                data_1.append(sle.totamt)
                slels+=float(sle.totamt)
    context['slels'] = slels
    shdwre= 0.0
    for shd in ball:
            if (shd.category1=='Sales - Hardware'):
                data_1.append(shd.totamt)
                shdwre+=float(shd.totamt)
    context['shdwre'] = shdwre
    shsft= 0.0
    for std in ball:
            if (std.category1=='Sales - Software'):
                data_1.append(std.totamt)
                shsft+=float(std.totamt)
    context['shsft'] = shsft
    sumance= 0.0
    for suma in ball:
            if (suma.category1=='Sales - Support and Maintenance'):
                data_1.append(suma.totamt)
                sumance+=float(suma.totamt)
    context['sumance'] = sumance
    sldic= 0.0
    for sldi in ball:
            if (sldi.category1=='Sales Discounts'):
                data_1.append(sldi.totamt)
                sldic+=float(sldi.totamt)
    context['sldic'] = sldic
    sopi= 0.0
    for sop in ball:
            if (sop.category1=='Sales of Product Income'):
                data_1.append(sop.totamt)
                sopi+=float(sop.totamt)
    context['sopi'] = sopi
    uninc= 0.0
    for unin in ball:
            if (unin.category1=='Uncategorised Income'):
                data_1.append(unin.totamt)
                uninc+=float(unin.totamt)
    context['uninc'] = uninc
    cosos= 0.0
    for coso in ball:
            if (coso.category1=='Cost of sales'):
                data_1.append(coso.totamt)
                cosos+=float(coso.totamt)
    context['cosos'] = cosos
    eqrfj= 0.0
    for eqr in ball:
            if (eqr.category1=='Equipment Rental for Jobs'):
                data_1.append(eqr.totamt)
                eqrfj+=float(eqr.totamt)
    context['eqrfj'] = eqrfj
    frasco= 0.0
    for fras in ball:
            if (fras.category1=='Freight and Shipping Costs'):
                data_1.append(fras.totamt)
                frasco+=float(fras.totamt)
    context['frasco'] = frasco
    mraf= 0.0
    for mra in ball:
            if (mra.category1=='Merchant Account Fees'):
                data_1.append(mra.totamt)
                mraf+=float(mra.totamt)
    context['mraf'] = mraf
    phfres= 0.0
    for phfr in ball:
            if (phfr.category1=='Purchases - Hardware for Resale'):
                data_1.append(phfr.totamt)
                phfres+=float(phfr.totamt)
    context['phfres'] = phfres
    psfrsl= 0.0
    for psfr in ball:
            if (psfr.category1=='Purchases - Software for Resale'):
                data_1.append(psfr.totamt)
                psfrsl+=float(psfr.totamt)
    context['psfrsl'] = psfrsl
    sbtsco= 0.0
    for sbts in ball:
            if (sbts.category1=='Subcontracted Services'):
                data_1.append(sbts.totamt)
                sbtsco+=float(sbts.totamt)
    context['sbtsco'] = sbtsco
    tacspp= 0.0
    for tacs in ball:
            if (tacs.category1=='Tools and Craft Supplies'):
                data_1.append(tacs.totamt)
                tacspp+=float(tacs.totamt)
    context['tacspp'] = tacspp
    fciin= 0.0
    for fci in ball:
            if (fci.category1=='Finance Charge Income'):
                data_1.append(fci.totamt)
                fciin+=float(fci.totamt)
    context['fciin'] = fciin
    iprpr= 0.0
    for ipr in ball:
            if (ipr.category1=='Insurance Proceeds Received'):
                data_1.append(ipr.totamt)
                iprpr+=float(ipr.totamt)
    context['iprpr'] = iprpr
    iicom= 0.0
    for iic in ball:
            if (iic.category1=='Interest Income'):
                data_1.append(iic.totamt)
                iicom+=float(iic.totamt)
    context['iicom'] = iicom
    pfsoa= 0.0
    for pfso in ball:
            if (pfso.category1=='Proceeds from Sale of Assets'):
                data_1.append(pfso.totamt)
                pfsoa+=float(pfso.totamt)
    context['pfsoa'] = pfsoa
    sadic= 0.0
    for sadi in ball:
            if (sadi.category1=='Shipping and Delivery Income'):
                data_1.append(sadi.totamt)
                sadic+=float(sadi.totamt)
    context['sadic'] = sadic
    amacou= 0.0
    for amac in ball:
            if (amac.category1=='Ask My Accountant'):
                data_1.append(amac.totamt)
                amacou+=float(amac.totamt)
    context['amacou'] = amacou
    cwoff= 0.0
    for cwo in ball:
            if (cwo.category1=='CGST write-off'):
                data_1.append(cwo.totamt)
                cwoff+=float(cwo.totamt)
    context['cwoff'] = cwoff
    gwoff= 0.0
    for gwo in ball:
            if (gwo.category1=='GST write-off'):
                data_1.append(gwo.totamt)
                gwoff+=float(gwo.totamt)
    context['gwoff'] = gwoff
    iwoff= 0.0
    for iwo in ball:
            if (iwo.category1=='IGST write-off'):
                data_1.append(iwo.totamt)
                iwoff+=float(iwo.totamt)
    context['iwoff'] = iwoff
    miexpn= 0.0
    for miex in ball:
            if (miex.category1=='Miscellaneous Expense'):
                data_1.append(miex.totamt)
                miexpn+=float(miex.totamt)
    context['miexpn'] = miexpn
    poltcon= 0.0
    for polt in ball:
            if (polt.category1=='Political Contributions'):
                data_1.append(polt.totamt)
                poltcon+=float(polt.totamt)
    context['poltcon'] = poltcon
    sgwoff= 0.0
    for sgwo in ball:
            if (sgwo.category1=='SGST write-off'):
                data_1.append(sgwo.totamt)
                sgwoff+=float(sgwo.totamt)
    context['sgwoff'] = sgwoff
    twof= 0.0
    for two in ball:
            if (two.category1=='Tax write-of'):
                data_1.append(two.totamt)
                twof+=float(two.totamt)
    context['twof'] = twof
    vlexp= 0.0
    for vlex in ball:
            if (vlex.category1=='Vehicle Expenses'):
                data_1.append(vlex.totamt)
                vlexp+=float(vlex.totamt)
    context['vlexp'] = vlexp
    
    
    # for bal in balance:    
    #     if (bal.paymmethod=='Cash'):
    #         data_1.append(bal.totamt)
    #         exp+=float(bal.totamt)
    # context['exp'] = exp
    # do_1 =[]
    # do = 0.0
    # for ban in ball:
    #     if (ban.category1=='Advertising/Promotional'):
    #         data_1.append(ban.totamt)
    #         bat+=float(ban.totamt)
    # context['bat'] = bat 
    return render(request, 'app1/cash_flow_analyzer.html', context)


def cash_flow_sort(request):
   
        cmp1 = company.objects.get(id=request.session['uid'])
        context = {'cmp1': cmp1}
        data_1 = []
        toda = date.today()
        tod = toda.strftime("%Y-%m-%d")
        filmeth = request.POST['reportperiod1']
        if filmeth == 'Today':
            fromdate = tod
            todate = tod
        elif filmeth == 'Custom':
            fromdate = request.POST['fper']
            todate = request.POST['tper']
        elif filmeth == 'This month':
            fromdate = toda.strftime("%Y-%m-01")
            todate = toda.strftime("%Y-%m-31")
        elif filmeth == 'This financial year':
            if int(toda.strftime("%m")) >= 1 and int(toda.strftime("%m")) <= 3:
                pyear = int(toda.strftime("%Y")) - 1
                fromdate = f'{pyear}-03-01'
                todate = f'{toda.strftime("%Y")}-03-31'
            else:
                pyear = int(toda.strftime("%Y")) + 1
                fromdate = f'{toda.strftime("%Y")}-03-01'
                todate = f'{pyear}-03-31'
                print(fromdate, todate)
        else:
            return redirect('cash_flow_analyzer')

        # Account Receivable(Debtors)

        invoi = expences.objects.raw(
            'select * from app1_expences where paymdate between %s and %s', [fromdate, todate, ])
        totalardebtors = 0.0
        tot1 = 0.0
        totalardebtors1 = 0.0
        print(invoi)       
        print("hai")
        
       
        creditnote = expences.objects.raw('select * from app1_expences where paymdate between %s and %s',
                                        [fromdate, todate, ])
        for ad in creditnote:
            if ad.category1 == 'Advertising/Promotional':
                data_1.append(ad.totamt)
                totalardebtors += float(ad.totamt)
       
        context['accountreceivable'] = totalardebtors
        payed = expences.objects.raw('select * from app1_expences where paymdate between %s and %s',
                                        [fromdate, todate, ])
        for bnk in payed:
            if bnk.category1 == 'Bank Charges':
                data_1.append(bnk.totamt)
                tot1 += float(bnk.totamt)
        context['accountreceivable1'] = tot1
        
        for bus in creditnote:
            if bus.category1 == 'Business Licenses and Permits':
                data_1.append(bus.totamt)
                totalardebtors1 += float(bus.totamt)
        context['accountreceivable2'] = totalardebtors1
        
        return render(request, 'app1/cash_flow_sort.html', context)

def materialmasterhome(request):
    
    return render(request,'app1/materialmasterbasepage.html')

# def  viewmaterialcreate(request):
    
#     return render(request,'app1/materialcreate.html')


def materialcreate(request):
    if request.method == 'POST':
        productname=request.POST['productname']
        sku=request.POST['sku']
        hsn=request.POST['hsn']
        manufactuaring_date=request.POST['manufactuaring_date']
        expiry_date = request.POST['expiry_date']
        rdata = rawmaterials(productname=productname,sku=sku,hsn=hsn,manufactuaring_date=manufactuaring_date,expiry_date=expiry_date)
        rdata.save()
        
        return redirect('materialview')
        
    return render(request,'app1/addmaterial.html')

def materialview(request):
   mdata = rawmaterials.objects.all()
   return render(request,'app1/viewmaterial.html',{'mdata':mdata})    
